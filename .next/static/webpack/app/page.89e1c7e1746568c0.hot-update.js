"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/page.tsx":
/*!**********************!*\
  !*** ./app/page.tsx ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Home; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _barrel_optimize_names_ArrowRightIcon_heroicons_react_24_outline__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=ArrowRightIcon!=!@heroicons/react/24/outline */ \"(app-pages-browser)/./node_modules/@heroicons/react/24/outline/esm/ArrowRightIcon.js\");\n/* harmony import */ var _components_Navigation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/Navigation */ \"(app-pages-browser)/./app/components/Navigation.tsx\");\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/image */ \"(app-pages-browser)/./node_modules/next/dist/api/image.js\");\n/* harmony import */ var animejs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! animejs */ \"(app-pages-browser)/./node_modules/animejs/lib/anime.esm.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\nfunction Home() {\n    _s();\n    const [showMain, setShowMain] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [transitioning, setTransitioning] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [visibleSection, setVisibleSection] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const observerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Prevent scrolling when splash is visible\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!showMain) {\n            document.body.style.overflow = \"hidden\";\n        } else {\n            document.body.style.overflow = \"\";\n        }\n        return ()=>{\n            document.body.style.overflow = \"\";\n        };\n    }, [\n        showMain\n    ]);\n    // Set up intersection observer for section animations\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (showMain) {\n            observerRef.current = new IntersectionObserver((entries)=>{\n                entries.forEach((entry)=>{\n                    if (entry.isIntersecting) {\n                        setVisibleSection(entry.target.id);\n                        const content = entry.target.querySelector(\".section-content\");\n                        const bg = entry.target.querySelector(\".section-bg\");\n                        if (content) content.classList.add(\"visible\");\n                        if (bg) bg.classList.add(\"visible\");\n                    } else {\n                        const content = entry.target.querySelector(\".section-content\");\n                        const bg = entry.target.querySelector(\".section-bg\");\n                        if (content) content.classList.remove(\"visible\");\n                        if (bg) bg.classList.remove(\"visible\");\n                    }\n                });\n            }, {\n                threshold: 0.3\n            });\n            document.querySelectorAll(\"section\").forEach((section)=>{\n                var _observerRef_current;\n                (_observerRef_current = observerRef.current) === null || _observerRef_current === void 0 ? void 0 : _observerRef_current.observe(section);\n            });\n        }\n        return ()=>{\n            var _observerRef_current;\n            (_observerRef_current = observerRef.current) === null || _observerRef_current === void 0 ? void 0 : _observerRef_current.disconnect();\n        };\n    }, [\n        showMain\n    ]);\n    // Handles the splash-to-main transition\n    const handleFindOutMore = ()=>{\n        setTransitioning(true);\n        // Animate splash screen elements out\n        (0,animejs__WEBPACK_IMPORTED_MODULE_4__[\"default\"])({\n            targets: \".splash-content h1, .splash-content p, .splash-content button\",\n            opacity: [\n                1,\n                0\n            ],\n            translateY: [\n                0,\n                20\n            ],\n            duration: 500,\n            easing: \"easeOutExpo\",\n            delay: animejs__WEBPACK_IMPORTED_MODULE_4__[\"default\"].stagger(100),\n            complete: ()=>{\n                (0,animejs__WEBPACK_IMPORTED_MODULE_4__[\"default\"])({\n                    targets: \".splash-screen\",\n                    opacity: [\n                        1,\n                        0\n                    ],\n                    duration: 700,\n                    easing: \"easeOutExpo\",\n                    complete: ()=>setShowMain(true)\n                });\n            }\n        });\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"min-h-screen bg-neutral-900\",\n        children: [\n            !showMain && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"fixed inset-0 z-50 flex flex-col items-center justify-center bg-neutral-900 transition-opacity duration-700 \".concat(transitioning ? \"opacity-0 pointer-events-none\" : \"opacity-100\"),\n                style: {\n                    transform: \"scale(1)\"\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"splash-content flex flex-col items-center justify-center\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center justify-center mb-10 w-[180px] h-[28px] sm:w-[320px] sm:h-[48px] md:w-[480px] md:h-[72px]\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_image__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                src: \"/SubclearLogo.svg\",\n                                alt: \"SubClear Logo\",\n                                width: 480,\n                                height: 72,\n                                priority: true,\n                                className: \"w-full h-auto\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                lineNumber: 93,\n                                columnNumber: 15\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                            lineNumber: 92,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                            className: \"text-lg sm:text-2xl md:text-3xl mb-12 text-neutral-300 font-light font-sans text-center px-4\",\n                            children: \"Clearing the air beneath our cities.\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                            lineNumber: 95,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            className: \"btn-primary text-base sm:text-lg px-6 sm:px-10 py-4 sm:py-5 shadow-md w-full max-w-xs sm:max-w-md\",\n                            onClick: handleFindOutMore,\n                            style: {\n                                minWidth: 120\n                            },\n                            children: [\n                                \"Find out more\",\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_ArrowRightIcon_heroicons_react_24_outline__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                                    className: \"w-6 h-6 sm:w-7 sm:h-7 inline-block ml-3\"\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                    lineNumber: 104,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                            lineNumber: 98,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                    lineNumber: 91,\n                    columnNumber: 11\n                }, this)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                lineNumber: 87,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"transition-opacity duration-700 \".concat(showMain ? \"opacity-100\" : \"opacity-0 pointer-events-none\", \" scroll-snap-container\"),\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Navigation__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {}, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                        lineNumber: 112,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n                        id: \"concept\",\n                        className: \"full-page-section bg-neutral-900\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"section-bg bg-white\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                lineNumber: 115,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"container-custom section-content\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                        className: \"text-3xl sm:text-4xl md:text-5xl font-bold text-center mb-10 sm:mb-16 md:mb-20 font-sans\",\n                                        children: \"The Concept\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                        lineNumber: 117,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"max-w-4xl mx-auto\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                            className: \"text-base sm:text-xl md:text-2xl mb-8 leading-relaxed font-sans px-2 sm:px-0\",\n                                            children: \"SubClear is a clean-tech startup developing a track-mounted air filtration system designed specifically for underground railway systems, starting with the London Underground. The system attaches to existing engineering trains and is passively towed through the tunnels, cleaning polluted air directly at track level — where air pollution is densest and most toxic.\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                            lineNumber: 119,\n                                            columnNumber: 15\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                        lineNumber: 118,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                lineNumber: 116,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                        lineNumber: 114,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n                        id: \"problem\",\n                        className: \"full-page-section bg-neutral-900\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"section-bg bg-white\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                lineNumber: 127,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"container-custom section-content\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                        className: \"text-3xl sm:text-4xl md:text-5xl font-bold text-center mb-10 sm:mb-16 md:mb-20 font-sans\",\n                                        children: \"The Problem\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                        lineNumber: 129,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"max-w-4xl mx-auto\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                className: \"text-base sm:text-xl md:text-2xl mb-8 leading-relaxed font-sans px-2 sm:px-0\",\n                                                children: \"Air pollution in subway systems is dangerously high — in some areas, particulate matter (especially PM2.5 and metallic dust) exceeds above-ground limits by 10x or more. These pollutants come primarily from:\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                                lineNumber: 131,\n                                                columnNumber: 15\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ul\", {\n                                                className: \"list-disc list-inside text-base sm:text-xl md:text-2xl space-y-4 mb-12 font-sans px-2 sm:px-0\",\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                                        children: \"Brake and wheel wear\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                                        lineNumber: 135,\n                                                        columnNumber: 17\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                                        children: \"Track friction\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                                        lineNumber: 136,\n                                                        columnNumber: 17\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                                        children: \"Poor tunnel ventilation\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                                        lineNumber: 137,\n                                                        columnNumber: 17\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                                        children: \"Accumulated historic dust\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                                        lineNumber: 138,\n                                                        columnNumber: 17\n                                                    }, this)\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                                lineNumber: 134,\n                                                columnNumber: 15\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                className: \"text-base sm:text-xl md:text-2xl leading-relaxed font-sans px-2 sm:px-0\",\n                                                children: \"Prolonged exposure poses serious health risks to commuters, staff, and maintenance crews.\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                                lineNumber: 140,\n                                                columnNumber: 15\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                        lineNumber: 130,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                lineNumber: 128,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                        lineNumber: 126,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n                        id: \"solution\",\n                        className: \"full-page-section bg-neutral-900\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"section-bg bg-white\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                lineNumber: 148,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"container-custom section-content\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                        className: \"text-3xl sm:text-4xl md:text-5xl font-bold text-center mb-10 sm:mb-16 md:mb-20 font-sans\",\n                                        children: \"The Solution\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                        lineNumber: 150,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"max-w-4xl mx-auto\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                            className: \"text-base sm:text-xl md:text-2xl mb-8 leading-relaxed font-sans px-2 sm:px-0\",\n                                            children: \"SubClear introduces a modular, retrofittable filtration system that's mounted on the chassis of engineering trains or dedicated rolling stock. As the train moves through the tunnels during non-passenger hours, the system sucks in contaminated air, filters it, and discharges cleaned air back into the tunnel environment.\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                            lineNumber: 152,\n                                            columnNumber: 15\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                        lineNumber: 151,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                lineNumber: 149,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                        lineNumber: 147,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n                        id: \"components\",\n                        className: \"full-page-section bg-neutral-900\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"section-bg bg-white\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                lineNumber: 160,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"container-custom section-content\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                        className: \"text-3xl sm:text-4xl md:text-5xl font-bold text-center mb-10 sm:mb-16 md:mb-20 font-sans\",\n                                        children: \"Core System Components\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                        lineNumber: 162,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"max-w-6xl mx-auto\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 sm:gap-8 lg:gap-10\",\n                                            children: components.map((component, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"card group p-4 sm:p-6 md:p-8\",\n                                                    children: [\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                                            className: \"text-lg sm:text-xl md:text-2xl font-bold mb-4 text-neutral-100 group-hover:text-secondary-700 transition-colors duration-200 font-sans\",\n                                                            children: component.module\n                                                        }, void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                                            lineNumber: 167,\n                                                            columnNumber: 21\n                                                        }, this),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                            className: \"text-base sm:text-lg text-neutral-300 font-sans\",\n                                                            children: component.function\n                                                        }, void 0, false, {\n                                                            fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                                            lineNumber: 170,\n                                                            columnNumber: 21\n                                                        }, this)\n                                                    ]\n                                                }, index, true, {\n                                                    fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                                    lineNumber: 166,\n                                                    columnNumber: 19\n                                                }, this))\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                            lineNumber: 164,\n                                            columnNumber: 15\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                        lineNumber: 163,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                lineNumber: 161,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                        lineNumber: 159,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n                        id: \"contact\",\n                        className: \"full-page-section bg-neutral-900\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"section-bg bg-white\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                lineNumber: 179,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"container-custom section-content\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                                        className: \"text-3xl sm:text-4xl md:text-5xl font-bold text-center mb-8 sm:mb-10 font-sans\",\n                                        children: \"Contact Us\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                        lineNumber: 181,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                        className: \"text-base sm:text-xl md:text-2xl mb-8 sm:mb-12 text-neutral-300 font-sans text-center px-2 sm:px-0\",\n                                        children: \"Ready to discuss your underground transit project?\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                        lineNumber: 182,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"flex justify-center\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                                            href: \"mailto:Team@SubClear.co.uk\",\n                                            className: \"btn-primary inline-block text-base sm:text-xl md:text-2xl px-6 sm:px-10 md:px-12 py-4 sm:py-5 md:py-6 shadow-xl\",\n                                            children: \"Team@SubClear.co.uk\"\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                            lineNumber: 186,\n                                            columnNumber: 15\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                        lineNumber: 185,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                                lineNumber: 180,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                        lineNumber: 178,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n                lineNumber: 111,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\SantthosSiwasubraman\\\\source\\\\repos\\\\SubClear Website\\\\app\\\\page.tsx\",\n        lineNumber: 84,\n        columnNumber: 5\n    }, this);\n}\n_s(Home, \"ZrMPtczuA655QB17lTXPXclbvSI=\");\n_c = Home;\nconst components = [\n    {\n        module: \"Air Intake & Suction System\",\n        function: \"Captures tunnel air at high flow rate\"\n    },\n    {\n        module: \"Electrostatic Precipitator (ESP)\",\n        function: \"Ionises and traps ultrafine dust\"\n    },\n    {\n        module: \"Magnetic Particle Collection\",\n        function: \"Extracts metallic particles using embedded magnets\"\n    },\n    {\n        module: \"HEPA Filtration Unit\",\n        function: \"Removes residual PM2.5 and PM10 particles\"\n    },\n    {\n        module: \"Power Supply Unit\",\n        function: \"Battery, onboard generator, or regenerative power\"\n    },\n    {\n        module: \"Control System\",\n        function: \"Embedded PLC to monitor flow rates, filter condition, and diagnostics\"\n    },\n    {\n        module: \"Modular Chassis\",\n        function: \"Designed to integrate with existing TfL rolling stock and loading gauges\"\n    }\n];\nvar _c;\n$RefreshReg$(_c, \"Home\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/animejs/lib/anime.esm.js":
/*!***********************************************!*\
  !*** ./node_modules/animejs/lib/anime.esm.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Animatable: function() { return /* binding */ Animatable; },\n/* harmony export */   Draggable: function() { return /* binding */ Draggable; },\n/* harmony export */   JSAnimation: function() { return /* binding */ JSAnimation; },\n/* harmony export */   Scope: function() { return /* binding */ Scope; },\n/* harmony export */   ScrollObserver: function() { return /* binding */ ScrollObserver; },\n/* harmony export */   Spring: function() { return /* binding */ Spring; },\n/* harmony export */   Timeline: function() { return /* binding */ Timeline; },\n/* harmony export */   Timer: function() { return /* binding */ Timer; },\n/* harmony export */   WAAPIAnimation: function() { return /* binding */ WAAPIAnimation; },\n/* harmony export */   animate: function() { return /* binding */ animate; },\n/* harmony export */   createAnimatable: function() { return /* binding */ createAnimatable; },\n/* harmony export */   createDraggable: function() { return /* binding */ createDraggable; },\n/* harmony export */   createScope: function() { return /* binding */ createScope; },\n/* harmony export */   createSpring: function() { return /* binding */ createSpring; },\n/* harmony export */   createTimeline: function() { return /* binding */ createTimeline; },\n/* harmony export */   createTimer: function() { return /* binding */ createTimer; },\n/* harmony export */   eases: function() { return /* binding */ eases; },\n/* harmony export */   engine: function() { return /* binding */ engine; },\n/* harmony export */   onScroll: function() { return /* binding */ onScroll; },\n/* harmony export */   scrollContainers: function() { return /* binding */ scrollContainers; },\n/* harmony export */   stagger: function() { return /* binding */ stagger; },\n/* harmony export */   svg: function() { return /* binding */ svg; },\n/* harmony export */   utils: function() { return /* binding */ utils; },\n/* harmony export */   waapi: function() { return /* binding */ waapi; }\n/* harmony export */ });\n/**\n * anime.js - ESM\n * @version v4.0.2\n * @author Julian Garnier\n * @license MIT\n * @copyright (c) 2025 Julian Garnier\n * @see https://animejs.com\n */ /**\n * @typedef {Object} DefaultsParams\n * @property {Number|String} [id]\n * @property {PercentageKeyframes|DurationKeyframes} [keyframes]\n * @property {EasingParam} [playbackEase]\n * @property {Number} [playbackRate]\n * @property {Number} [frameRate]\n * @property {Number|Boolean} [loop]\n * @property {Boolean} [reversed]\n * @property {Boolean} [alternate]\n * @property {Boolean|ScrollObserver} [autoplay]\n * @property {Number|FunctionValue} [duration]\n * @property {Number|FunctionValue} [delay]\n * @property {Number} [loopDelay]\n * @property {EasingParam} [ease]\n * @property {'none'|'replace'|'blend'|compositionTypes} [composition]\n * @property {(v: any) => any} [modifier]\n * @property {(tickable: Tickable) => void} [onBegin]\n * @property {(tickable: Tickable) => void} [onBeforeUpdate]\n * @property {(tickable: Tickable) => void} [onUpdate]\n * @property {(tickable: Tickable) => void} [onLoop]\n * @property {(tickable: Tickable) => void} [onPause]\n * @property {(tickable: Tickable) => void} [onComplete]\n * @property {(renderable: Renderable) => void} [onRender]\n */ /** @typedef {JSAnimation|Timeline} Renderable */ /** @typedef {Timer|Renderable} Tickable */ /** @typedef {Timer&JSAnimation&Timeline} CallbackArgument */ /** @typedef {Animatable|Tickable|Draggable|ScrollObserver|Scope} Revertible */ /**\n * @typedef {Object} DraggableAxisParam\n * @property {String} [mapTo]\n * @property {TweenModifier} [modifier]\n * @property {TweenComposition} [composition]\n * @property {Number|Array<Number>|((draggable: Draggable) => Number|Array<Number>)} [snap]\n */ /**\n * @typedef {Object} DraggableCursorParams\n * @property {String} [onHover]\n * @property {String} [onGrab]\n */ /**\n * @typedef {Object} DraggableParams\n * @property {DOMTargetSelector} [trigger]\n * @property {DOMTargetSelector|Array<Number>|((draggable: Draggable) => DOMTargetSelector|Array<Number>)} [container]\n * @property {Boolean|DraggableAxisParam} [x]\n * @property {Boolean|DraggableAxisParam} [y]\n * @property {TweenModifier} [modifier]\n * @property {Number|Array<Number>|((draggable: Draggable) => Number|Array<Number>)} [snap]\n * @property {Number|Array<Number>|((draggable: Draggable) => Number|Array<Number>)} [containerPadding]\n * @property {Number|((draggable: Draggable) => Number)} [containerFriction]\n * @property {Number|((draggable: Draggable) => Number)} [releaseContainerFriction]\n * @property {Number|((draggable: Draggable) => Number)} [dragSpeed]\n * @property {Number|((draggable: Draggable) => Number)} [scrollSpeed]\n * @property {Number|((draggable: Draggable) => Number)} [scrollThreshold]\n * @property {Number|((draggable: Draggable) => Number)} [minVelocity]\n * @property {Number|((draggable: Draggable) => Number)} [maxVelocity]\n * @property {Number|((draggable: Draggable) => Number)} [velocityMultiplier]\n * @property {Number} [releaseMass]\n * @property {Number} [releaseStiffness]\n * @property {Number} [releaseDamping]\n * @property {Boolean} [releaseDamping]\n * @property {EasingParam} [releaseEase]\n * @property {Boolean|DraggableCursorParams|((draggable: Draggable) => Boolean|DraggableCursorParams)} [cursor]\n * @property {Callback<Draggable>} [onGrab]\n * @property {Callback<Draggable>} [onDrag]\n * @property {Callback<Draggable>} [onRelease]\n * @property {Callback<Draggable>} [onUpdate]\n * @property {Callback<Draggable>} [onSettle]\n * @property {Callback<Draggable>} [onSnap]\n * @property {Callback<Draggable>} [onResize]\n * @property {Callback<Draggable>} [onAfterResize]\n */ /**\n * @typedef {SVGGeometryElement & {\n *   setAttribute(name: 'draw', value: `${number} ${number}`): void;\n *   draw: `${number} ${number}`;\n * }} DrawableSVGGeometry\n */ /**\n * @callback EasingFunction\n * @param {Number} time\n * @return {Number}\n */ /**\n * @typedef {('linear'|'linear(x1, x2 25%, x3)'|'in'|'out'|'inOut'|'inQuad'|'outQuad'|'inOutQuad'|'inCubic'|'outCubic'|'inOutCubic'|'inQuart'|'outQuart'|'inOutQuart'|'inQuint'|'outQuint'|'inOutQuint'|'inSine'|'outSine'|'inOutSine'|'inCirc'|'outCirc'|'inOutCirc'|'inExpo'|'outExpo'|'inOutExpo'|'inBounce'|'outBounce'|'inOutBounce'|'inBack'|'outBack'|'inOutBack'|'inElastic'|'outElastic'|'inOutElastic'|'irregular'|'cubicBezier'|'steps'|'in(p = 1.675)'|'out(p = 1.675)'|'inOut(p = 1.675)'|'inBack(overshoot = 1.70158)'|'outBack(overshoot = 1.70158)'|'inOutBack(overshoot = 1.70158)'|'inElastic(amplitude = 1, period = .3)'|'outElastic(amplitude = 1, period = .3)'|'inOutElastic(amplitude = 1, period = .3)'|'irregular(length = 10, randomness = 1)'|'cubicBezier(x1, y1, x2, y2)'|'steps(steps = 10)')} EaseStringParamNames\n */ // A hack to get both ease names suggestions AND allow any strings\n// https://github.com/microsoft/TypeScript/issues/29729#issuecomment-460346421\n/** @typedef {(String & {})|EaseStringParamNames|EasingFunction|Spring} EasingParam */ /** @typedef {HTMLElement|SVGElement} DOMTarget */ /** @typedef {Record<String, any>} JSTarget */ /** @typedef {DOMTarget|JSTarget} Target */ /** @typedef {Target|NodeList|String} TargetSelector */ /** @typedef {DOMTarget|NodeList|String} DOMTargetSelector */ /** @typedef {Array.<DOMTargetSelector>|DOMTargetSelector} DOMTargetsParam */ /** @typedef {Array.<DOMTarget>} DOMTargetsArray */ /** @typedef {Array.<JSTarget>|JSTarget} JSTargetsParam */ /** @typedef {Array.<JSTarget>} JSTargetsArray */ /** @typedef {Array.<TargetSelector>|TargetSelector} TargetsParam */ /** @typedef {Array.<Target>} TargetsArray */ /**\n * @callback FunctionValue\n * @param {Target} target - The animated target\n * @param {Number} index - The target index\n * @param {Number} length - The total number of animated targets\n * @return {Number|String|TweenObjectValue|Array.<Number|String|TweenObjectValue>}\n */ /**\n * @callback TweenModifier\n * @param {Number} value - The animated value\n * @return {Number|String}\n */ /** @typedef {[Number, Number, Number, Number]} ColorArray */ /**\n * @template T\n * @callback Callback\n * @param {T} self - Returns itself\n * @param {PointerEvent} [e]\n * @return {*}\n */ /**\n * @template {object} T\n * @typedef {Object} TickableCallbacks\n * @property {Callback<T>} [onBegin]\n * @property {Callback<T>} [onBeforeUpdate]\n * @property {Callback<T>} [onUpdate]\n * @property {Callback<T>} [onLoop]\n * @property {Callback<T>} [onPause]\n * @property {Callback<T>} [onComplete]\n */ /**\n * @template {object} T\n * @typedef {Object} RenderableCallbacks\n * @property {Callback<T>} [onRender]\n */ /**\n * @typedef {Object} Tween\n * @property {Number} id\n * @property {JSAnimation} parent\n * @property {String} property\n * @property {Target} target\n * @property {String|Number} _value\n * @property {Function|null} _func\n * @property {EasingFunction} _ease\n * @property {Array.<Number>} _fromNumbers\n * @property {Array.<Number>} _toNumbers\n * @property {Array.<String>} _strings\n * @property {Number} _fromNumber\n * @property {Number} _toNumber\n * @property {Array.<Number>} _numbers\n * @property {Number} _number\n * @property {String} _unit\n * @property {TweenModifier} _modifier\n * @property {Number} _currentTime\n * @property {Number} _delay\n * @property {Number} _updateDuration\n * @property {Number} _startTime\n * @property {Number} _changeDuration\n * @property {Number} _absoluteStartTime\n * @property {tweenTypes} _tweenType\n * @property {valueTypes} _valueType\n * @property {Number} _composition\n * @property {Number} _isOverlapped\n * @property {Number} _isOverridden\n * @property {Number} _renderTransforms\n * @property {Tween} _prevRep\n * @property {Tween} _nextRep\n * @property {Tween} _prevAdd\n * @property {Tween} _nextAdd\n * @property {Tween} _prev\n * @property {Tween} _next\n */ /**\n * @typedef TweenDecomposedValue\n * @property {Number} t - Type\n * @property {Number} n - Single number value\n * @property {String} u - Value unit\n * @property {String} o - Value operator\n * @property {Array.<Number>} d - Array of Numbers (in case of complex value type)\n * @property {Array.<String>} s - Strings (in case of complex value type)\n */ /** @typedef {{_head: null|Tween, _tail: null|Tween}} TweenPropertySiblings */ /** @typedef {Record<String, TweenPropertySiblings>} TweenLookups */ /** @typedef {WeakMap.<Target, TweenLookups>} TweenReplaceLookups */ /** @typedef {Map.<Target, TweenLookups>} TweenAdditiveLookups */ /**\n * @typedef {Object} TimerOptions\n * @property {Number|String} [id]\n * @property {TweenParamValue} [duration]\n * @property {TweenParamValue} [delay]\n * @property {Number} [loopDelay]\n * @property {Boolean} [reversed]\n * @property {Boolean} [alternate]\n * @property {Boolean|Number} [loop]\n * @property {Boolean|ScrollObserver} [autoplay]\n * @property {Number} [frameRate]\n * @property {Number} [playbackRate]\n */ /**\n\n/**\n * @typedef {TimerOptions & TickableCallbacks<Timer>} TimerParams\n */ /**\n * @typedef {Number|String|FunctionValue} TweenParamValue\n */ /**\n * @typedef {TweenParamValue|[TweenParamValue, TweenParamValue]} TweenPropValue\n */ /**\n * @typedef {(String & {})|'none'|'replace'|'blend'|compositionTypes} TweenComposition\n */ /**\n * @typedef {Object} TweenParamsOptions\n * @property {TweenParamValue} [duration]\n * @property {TweenParamValue} [delay]\n * @property {EasingParam} [ease]\n * @property {TweenModifier} [modifier]\n * @property {TweenComposition} [composition]\n */ /**\n * @typedef {Object} TweenValues\n * @property {TweenParamValue} [from]\n * @property {TweenPropValue} [to]\n * @property {TweenPropValue} [fromTo]\n */ /**\n * @typedef {TweenParamsOptions & TweenValues} TweenKeyValue\n */ /**\n * @typedef {Array.<TweenKeyValue|TweenPropValue>} ArraySyntaxValue\n */ /**\n * @typedef {TweenParamValue|ArraySyntaxValue|TweenKeyValue} TweenOptions\n */ /**\n * @typedef {Partial<{to: TweenParamValue|Array.<TweenParamValue>; from: TweenParamValue|Array.<TweenParamValue>; fromTo: TweenParamValue|Array.<TweenParamValue>;}>} TweenObjectValue\n */ /**\n * @typedef {Object} PercentageKeyframeOptions\n * @property {EasingParam} [ease]\n */ /**\n * @typedef {Record<String, TweenParamValue>} PercentageKeyframeParams\n */ /**\n * @typedef {Record<String, PercentageKeyframeParams & PercentageKeyframeOptions>} PercentageKeyframes\n */ /**\n * @typedef {Array<Record<String, TweenOptions | TweenModifier | boolean> & TweenParamsOptions>} DurationKeyframes\n */ /**\n * @typedef {Object} AnimationOptions\n * @property {PercentageKeyframes|DurationKeyframes} [keyframes]\n * @property {EasingParam} [playbackEase]\n */ // TODO: Currently setting TweenModifier to the intersected Record<> makes the FunctionValue type target param any if only one parameter is set\n/**\n * @typedef {Record<String, TweenOptions | Callback<JSAnimation> | TweenModifier | boolean | PercentageKeyframes | DurationKeyframes | ScrollObserver> & TimerOptions & AnimationOptions & TweenParamsOptions & TickableCallbacks<JSAnimation> & RenderableCallbacks<JSAnimation>} AnimationParams\n */ /**\n * @typedef {Object} TimelineOptions\n * @property {DefaultsParams} [defaults]\n * @property {EasingParam} [playbackEase]\n */ /**\n * @typedef {TimerOptions & TimelineOptions & TickableCallbacks<Timeline> & RenderableCallbacks<Timeline>} TimelineParams\n */ /**\n * @callback AnimatablePropertySetter\n * @param  {Number|Array.<Number>} to\n * @param  {Number} [duration]\n * @param  {EasingParam} [ease]\n * @return {AnimatableObject}\n */ /**\n * @callback AnimatablePropertyGetter\n * @return {Number|Array.<Number>}\n */ /**\n * @typedef {AnimatablePropertySetter & AnimatablePropertyGetter} AnimatableProperty\n */ /**\n * @typedef {Animatable & Record<String, AnimatableProperty>} AnimatableObject\n */ /**\n * @typedef {Object} AnimatablePropertyParamsOptions\n * @property {String} [unit]\n * @property {TweenParamValue} [duration]\n * @property {EasingParam} [ease]\n * @property {TweenModifier} [modifier]\n * @property {TweenComposition} [composition]\n */ /**\n * @typedef {Record<String, TweenParamValue | EasingParam | TweenModifier | TweenComposition | AnimatablePropertyParamsOptions> & AnimatablePropertyParamsOptions} AnimatableParams\n */ // Environments\n// TODO: Do we need to check if we're running inside a worker ?\nconst isBrowser = \"object\" !== \"undefined\";\n/** @type {Object|Null} */ const win = isBrowser ? window : null;\n/** @type {Document} */ const doc = isBrowser ? document : null;\n// Enums\n/** @enum {Number} */ const tweenTypes = {\n    OBJECT: 0,\n    ATTRIBUTE: 1,\n    CSS: 2,\n    TRANSFORM: 3,\n    CSS_VAR: 4\n};\n/** @enum {Number} */ const valueTypes = {\n    NUMBER: 0,\n    UNIT: 1,\n    COLOR: 2,\n    COMPLEX: 3\n};\n/** @enum {Number} */ const tickModes = {\n    NONE: 0,\n    AUTO: 1,\n    FORCE: 2\n};\n/** @enum {Number} */ const compositionTypes = {\n    replace: 0,\n    none: 1,\n    blend: 2\n};\n// Cache symbols\nconst isRegisteredTargetSymbol = Symbol();\nconst isDomSymbol = Symbol();\nconst isSvgSymbol = Symbol();\nconst transformsSymbol = Symbol();\nconst morphPointsSymbol = Symbol();\nconst proxyTargetSymbol = Symbol();\n// Numbers\nconst minValue = 1e-11;\nconst maxValue = 1e12;\nconst K = 1e3;\nconst maxFps = 120;\n// Strings\nconst emptyString = \"\";\nconst shortTransforms = new Map();\nshortTransforms.set(\"x\", \"translateX\");\nshortTransforms.set(\"y\", \"translateY\");\nshortTransforms.set(\"z\", \"translateZ\");\nconst validTransforms = [\n    \"translateX\",\n    \"translateY\",\n    \"translateZ\",\n    \"rotate\",\n    \"rotateX\",\n    \"rotateY\",\n    \"rotateZ\",\n    \"scale\",\n    \"scaleX\",\n    \"scaleY\",\n    \"scaleZ\",\n    \"skew\",\n    \"skewX\",\n    \"skewY\",\n    \"perspective\",\n    \"matrix\",\n    \"matrix3d\"\n];\nconst transformsFragmentStrings = validTransforms.reduce((a, v)=>({\n        ...a,\n        [v]: v + \"(\"\n    }), {});\n// Functions\n/** @return {void} */ const noop = ()=>{};\n// Regex\nconst hexTestRgx = /(^#([\\da-f]{3}){1,2}$)|(^#([\\da-f]{4}){1,2}$)/i;\nconst rgbExecRgx = /rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)/i;\nconst rgbaExecRgx = /rgba\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(-?\\d+|-?\\d*.\\d+)\\s*\\)/i;\nconst hslExecRgx = /hsl\\(\\s*(-?\\d+|-?\\d*.\\d+)\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*\\)/i;\nconst hslaExecRgx = /hsla\\(\\s*(-?\\d+|-?\\d*.\\d+)\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*,\\s*(-?\\d+|-?\\d*.\\d+)\\s*\\)/i;\n// export const digitWithExponentRgx = /[-+]?\\d*\\.?\\d+(?:[eE][-+]?\\d+)?/g;\nconst digitWithExponentRgx = /[-+]?\\d*\\.?\\d+(?:e[-+]?\\d)?/gi;\n// export const unitsExecRgx = /^([-+]?\\d*\\.?\\d+(?:[eE][-+]?\\d+)?)+([a-z]+|%)$/i;\nconst unitsExecRgx = /^([-+]?\\d*\\.?\\d+(?:e[-+]?\\d+)?)([a-z]+|%)$/i;\nconst lowerCaseRgx = /([a-z])([A-Z])/g;\nconst transformsExecRgx = /(\\w+)(\\([^)]+\\)+)/g; // Match inline transforms with cacl() values, returns the value wrapped in ()\nconst relativeValuesExecRgx = /(\\*=|\\+=|-=)/;\n/** @type {DefaultsParams} */ const defaults = {\n    id: null,\n    keyframes: null,\n    playbackEase: null,\n    playbackRate: 1,\n    frameRate: maxFps,\n    loop: 0,\n    reversed: false,\n    alternate: false,\n    autoplay: true,\n    duration: K,\n    delay: 0,\n    loopDelay: 0,\n    ease: \"out(2)\",\n    composition: compositionTypes.replace,\n    modifier: (v)=>v,\n    onBegin: noop,\n    onBeforeUpdate: noop,\n    onUpdate: noop,\n    onLoop: noop,\n    onPause: noop,\n    onComplete: noop,\n    onRender: noop\n};\nconst globals = {\n    /** @type {DefaultsParams} */ defaults,\n    /** @type {Document|DOMTarget} */ root: doc,\n    /** @type {Scope} */ scope: null,\n    /** @type {Number} */ precision: 4,\n    /** @type {Number} */ timeScale: 1,\n    /** @type {Number} */ tickThreshold: 200\n};\nconst globalVersions = {\n    version: \"4.0.2\",\n    engine: null\n};\nif (isBrowser) {\n    if (!win.AnimeJS) win.AnimeJS = [];\n    win.AnimeJS.push(globalVersions);\n}\n// Strings\n/**\n * @param  {String} str\n * @return {String}\n */ const toLowerCase = (str)=>str.replace(lowerCaseRgx, \"$1-$2\").toLowerCase();\n/**\n * Prioritize this method instead of regex when possible\n * @param  {String} str\n * @param  {String} sub\n * @return {Boolean}\n */ const stringStartsWith = (str, sub)=>str.indexOf(sub) === 0;\n// Time\n// Note: Date.now is used instead of performance.now since it is precise enough for timings calculations, performs slightly faster and works in Node.js environement.\nconst now = Date.now;\n// Types checkers\nconst isArr = Array.isArray;\n/**@param {any} a @return {a is Record<String, any>} */ const isObj = (a)=>a && a.constructor === Object;\n/**@param {any} a @return {a is Number} */ const isNum = (a)=>typeof a === \"number\" && !isNaN(a);\n/**@param {any} a @return {a is String} */ const isStr = (a)=>typeof a === \"string\";\n/**@param {any} a @return {a is Function} */ const isFnc = (a)=>typeof a === \"function\";\n/**@param {any} a @return {a is undefined} */ const isUnd = (a)=>typeof a === \"undefined\";\n/**@param {any} a @return {a is null | undefined} */ const isNil = (a)=>isUnd(a) || a === null;\n/**@param {any} a @return {a is SVGElement} */ const isSvg = (a)=>isBrowser && a instanceof SVGElement;\n/**@param {any} a @return {Boolean} */ const isHex = (a)=>hexTestRgx.test(a);\n/**@param {any} a @return {Boolean} */ const isRgb = (a)=>stringStartsWith(a, \"rgb\");\n/**@param {any} a @return {Boolean} */ const isHsl = (a)=>stringStartsWith(a, \"hsl\");\n/**@param {any} a @return {Boolean} */ const isCol = (a)=>isHex(a) || isRgb(a) || isHsl(a);\n/**@param {any} a @return {Boolean} */ const isKey = (a)=>!globals.defaults.hasOwnProperty(a);\n// Number\n/**\n * @param  {Number|String} str\n * @return {Number}\n */ const parseNumber = (str)=>isStr(str) ? parseFloat(/** @type {String} */ str) : /** @type {Number} */ str;\n// Math\nconst pow = Math.pow;\nconst sqrt = Math.sqrt;\nconst sin = Math.sin;\nconst cos = Math.cos;\nconst abs = Math.abs;\nconst exp = Math.exp;\nconst ceil = Math.ceil;\nconst floor = Math.floor;\nconst asin = Math.asin;\nconst max = Math.max;\nconst atan2 = Math.atan2;\nconst PI = Math.PI;\nconst _round = Math.round;\n/**\n * @param  {Number} v\n * @param  {Number} min\n * @param  {Number} max\n * @return {Number}\n */ const clamp = (v, min, max)=>v < min ? min : v > max ? max : v;\nconst powCache = {};\n/**\n * @param  {Number} v\n * @param  {Number} decimalLength\n * @return {Number}\n */ const round = (v, decimalLength)=>{\n    if (decimalLength < 0) return v;\n    if (!decimalLength) return _round(v);\n    let p = powCache[decimalLength];\n    if (!p) p = powCache[decimalLength] = 10 ** decimalLength;\n    return _round(v * p) / p;\n};\n/**\n * @param  {Number} v\n * @param  {Number|Array<Number>} increment\n * @return {Number}\n */ const snap = (v, increment)=>isArr(increment) ? increment.reduce((closest, cv)=>abs(cv - v) < abs(closest - v) ? cv : closest) : increment ? _round(v / increment) * increment : v;\n/**\n * @param  {Number} start\n * @param  {Number} end\n * @param  {Number} progress\n * @return {Number}\n */ const interpolate = (start, end, progress)=>start + (end - start) * progress;\n/**\n * @param  {Number} v\n * @return {Number}\n */ const clampInfinity = (v)=>v === Infinity ? maxValue : v === -Infinity ? -1e12 : v;\n/**\n * @param  {Number} v\n * @return {Number}\n */ const normalizeTime = (v)=>v <= minValue ? minValue : clampInfinity(round(v, 11));\n// Arrays\n/**\n * @template T\n * @param {T[]} a\n * @return {T[]}\n */ const cloneArray = (a)=>isArr(a) ? [\n        ...a\n    ] : a;\n// Objects\n/**\n * @template T\n * @template U\n * @param {T} o1\n * @param {U} o2\n * @return {T & U}\n */ const mergeObjects = (o1, o2)=>{\n    const merged = /** @type {T & U} */ {\n        ...o1\n    };\n    for(let p in o2){\n        const o1p = /** @type {T & U} */ o1[p];\n        merged[p] = isUnd(o1p) ? /** @type {T & U} */ o2[p] : o1p;\n    }\n    return merged;\n};\n// Linked lists\n/**\n * @param {Object} parent\n * @param {Function} callback\n * @param {Boolean} [reverse]\n * @param {String} [prevProp]\n * @param {String} [nextProp]\n * @return {void}\n */ const forEachChildren = function(parent, callback, reverse) {\n    let prevProp = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : \"_prev\", nextProp = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : \"_next\";\n    let next = parent._head;\n    let adjustedNextProp = nextProp;\n    if (reverse) {\n        next = parent._tail;\n        adjustedNextProp = prevProp;\n    }\n    while(next){\n        const currentNext = next[adjustedNextProp];\n        callback(next);\n        next = currentNext;\n    }\n};\n/**\n * @param  {Object} parent\n * @param  {Object} child\n * @param  {String} [prevProp]\n * @param  {String} [nextProp]\n * @return {void}\n */ const removeChild = function(parent, child) {\n    let prevProp = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"_prev\", nextProp = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : \"_next\";\n    const prev = child[prevProp];\n    const next = child[nextProp];\n    prev ? prev[nextProp] = next : parent._head = next;\n    next ? next[prevProp] = prev : parent._tail = prev;\n    child[prevProp] = null;\n    child[nextProp] = null;\n};\n/**\n * @param  {Object} parent\n * @param  {Object} child\n * @param  {Function} [sortMethod]\n * @param  {String} prevProp\n * @param  {String} nextProp\n * @return {void}\n */ const addChild = function(parent, child, sortMethod) {\n    let prevProp = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : \"_prev\", nextProp = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : \"_next\";\n    let prev = parent._tail;\n    while(prev && sortMethod && sortMethod(prev, child))prev = prev[prevProp];\n    const next = prev ? prev[nextProp] : parent._head;\n    prev ? prev[nextProp] = child : parent._head = child;\n    next ? next[prevProp] = child : parent._tail = child;\n    child[prevProp] = prev;\n    child[nextProp] = next;\n};\n/*\n * Base class to control framerate and playback rate.\n * Inherited by Engine, Timer, Animation and Timeline.\n */ class Clock {\n    get fps() {\n        return this._fps;\n    }\n    set fps(frameRate) {\n        const previousFrameDuration = this._frameDuration;\n        const fr = +frameRate;\n        const fps = fr < minValue ? minValue : fr;\n        const frameDuration = round(K / fps, 0);\n        this._fps = fps;\n        this._frameDuration = frameDuration;\n        this._scheduledTime += frameDuration - previousFrameDuration;\n    }\n    get speed() {\n        return this._speed;\n    }\n    set speed(playbackRate) {\n        const pbr = +playbackRate;\n        this._speed = pbr < minValue ? minValue : pbr;\n    }\n    /**\n   * @param  {Number} time\n   * @return {tickModes}\n   */ requestTick(time) {\n        const scheduledTime = this._scheduledTime;\n        const elapsedTime = this._elapsedTime;\n        this._elapsedTime += time - elapsedTime;\n        // If the elapsed time is lower than the scheduled time\n        // this means not enough time has passed to hit one frameDuration\n        // so skip that frame\n        if (elapsedTime < scheduledTime) return tickModes.NONE;\n        const frameDuration = this._frameDuration;\n        const frameDelta = elapsedTime - scheduledTime;\n        // Ensures that _scheduledTime progresses in steps of at least 1 frameDuration.\n        // Skips ahead if the actual elapsed time is higher.\n        this._scheduledTime += frameDelta < frameDuration ? frameDuration : frameDelta;\n        return tickModes.AUTO;\n    }\n    /**\n   * @param  {Number} time\n   * @return {Number}\n   */ computeDeltaTime(time) {\n        const delta = time - this._lastTime;\n        this.deltaTime = delta;\n        this._lastTime = time;\n        return delta;\n    }\n    /** @param {Number} [initTime] */ constructor(initTime = 0){\n        /** @type {Number} */ this.deltaTime = 0;\n        /** @type {Number} */ this._currentTime = initTime;\n        /** @type {Number} */ this._elapsedTime = initTime;\n        /** @type {Number} */ this._startTime = initTime;\n        /** @type {Number} */ this._lastTime = initTime;\n        /** @type {Number} */ this._scheduledTime = 0;\n        /** @type {Number} */ this._frameDuration = round(K / maxFps, 0);\n        /** @type {Number} */ this._fps = maxFps;\n        /** @type {Number} */ this._speed = 1;\n        /** @type {Boolean} */ this._hasChildren = false;\n        /** @type {Tickable|Tween} */ this._head = null;\n        /** @type {Tickable|Tween} */ this._tail = null;\n    }\n}\n/**\n * @param  {Tickable} tickable\n * @param  {Number} time\n * @param  {Number} muteCallbacks\n * @param  {Number} internalRender\n * @param  {tickModes} tickMode\n * @return {Number}\n */ const render = (tickable, time, muteCallbacks, internalRender, tickMode)=>{\n    const parent = tickable.parent;\n    const duration = tickable.duration;\n    const completed = tickable.completed;\n    const iterationDuration = tickable.iterationDuration;\n    const iterationCount = tickable.iterationCount;\n    const _currentIteration = tickable._currentIteration;\n    const _loopDelay = tickable._loopDelay;\n    const _reversed = tickable._reversed;\n    const _alternate = tickable._alternate;\n    const _hasChildren = tickable._hasChildren;\n    const tickableDelay = tickable._delay;\n    const tickablePrevAbsoluteTime = tickable._currentTime; // TODO: rename ._currentTime to ._absoluteCurrentTime\n    const tickableEndTime = tickableDelay + iterationDuration;\n    const tickableAbsoluteTime = time - tickableDelay;\n    const tickablePrevTime = clamp(tickablePrevAbsoluteTime, -tickableDelay, duration);\n    const tickableCurrentTime = clamp(tickableAbsoluteTime, -tickableDelay, duration);\n    const deltaTime = tickableAbsoluteTime - tickablePrevAbsoluteTime;\n    const isCurrentTimeAboveZero = tickableCurrentTime > 0;\n    const isCurrentTimeEqualOrAboveDuration = tickableCurrentTime >= duration;\n    const isSetter = duration <= minValue;\n    const forcedTick = tickMode === tickModes.FORCE;\n    let isOdd = 0;\n    let iterationElapsedTime = tickableAbsoluteTime;\n    // Render checks\n    // Used to also check if the children have rendered in order to trigger the onRender callback on the parent timer\n    let hasRendered = 0;\n    // Execute the \"expensive\" iterations calculations only when necessary\n    if (iterationCount > 1) {\n        // bitwise NOT operator seems to be generally faster than Math.floor() across browsers\n        const currentIteration = ~~(tickableCurrentTime / (iterationDuration + (isCurrentTimeEqualOrAboveDuration ? 0 : _loopDelay)));\n        tickable._currentIteration = clamp(currentIteration, 0, iterationCount);\n        // Prevent the iteration count to go above the max iterations when reaching the end of the animation\n        if (isCurrentTimeEqualOrAboveDuration) tickable._currentIteration--;\n        isOdd = tickable._currentIteration % 2;\n        iterationElapsedTime = tickableCurrentTime % (iterationDuration + _loopDelay) || 0;\n    }\n    // Checks if exactly one of _reversed and (_alternate && isOdd) is true\n    const isReversed = _reversed ^ (_alternate && isOdd);\n    const _ease = /** @type {Renderable} */ tickable._ease;\n    let iterationTime = isCurrentTimeEqualOrAboveDuration ? isReversed ? 0 : duration : isReversed ? iterationDuration - iterationElapsedTime : iterationElapsedTime;\n    if (_ease) iterationTime = iterationDuration * _ease(iterationTime / iterationDuration) || 0;\n    const isRunningBackwards = (parent ? parent.backwards : tickableAbsoluteTime < tickablePrevAbsoluteTime) ? !isReversed : !!isReversed;\n    tickable._currentTime = tickableAbsoluteTime;\n    tickable._iterationTime = iterationTime;\n    tickable.backwards = isRunningBackwards;\n    if (isCurrentTimeAboveZero && !tickable.began) {\n        tickable.began = true;\n        if (!muteCallbacks && !(parent && (isRunningBackwards || !parent.began))) {\n            tickable.onBegin(/** @type {CallbackArgument} */ tickable);\n        }\n    } else if (tickableAbsoluteTime <= 0) {\n        tickable.began = false;\n    }\n    // Only triggers onLoop for tickable without children, otherwise call the the onLoop callback in the tick function\n    // Make sure to trigger the onLoop before rendering to allow .refresh() to pickup the current values\n    if (!muteCallbacks && !_hasChildren && isCurrentTimeAboveZero && tickable._currentIteration !== _currentIteration) {\n        tickable.onLoop(/** @type {CallbackArgument} */ tickable);\n    }\n    if (forcedTick || tickMode === tickModes.AUTO && (time >= tickableDelay && time <= tickableEndTime || // Normal render\n    time <= tickableDelay && tickablePrevTime > tickableDelay || // Playhead is before the animation start time so make sure the animation is at its initial state\n    time >= tickableEndTime && tickablePrevTime !== duration // Playhead is after the animation end time so make sure the animation is at its end state\n    ) || iterationTime >= tickableEndTime && tickablePrevTime !== duration || iterationTime <= tickableDelay && tickablePrevTime > 0 || time <= tickablePrevTime && tickablePrevTime === duration && completed || // Force a render if a seek occurs on an completed animation\n    isCurrentTimeEqualOrAboveDuration && !completed && isSetter // This prevents 0 duration tickables to be skipped\n    ) {\n        if (isCurrentTimeAboveZero) {\n            // Trigger onUpdate callback before rendering\n            tickable.computeDeltaTime(tickablePrevTime);\n            if (!muteCallbacks) tickable.onBeforeUpdate(/** @type {CallbackArgument} */ tickable);\n        }\n        // Start tweens rendering\n        if (!_hasChildren) {\n            // Time has jumped more than globals.tickThreshold so consider this tick manual\n            const forcedRender = forcedTick || (isRunningBackwards ? deltaTime * -1 : deltaTime) >= globals.tickThreshold;\n            const absoluteTime = tickable._offset + (parent ? parent._offset : 0) + tickableDelay + iterationTime;\n            // Only Animation can have tweens, Timer returns undefined\n            let tween = /** @type {Tween} */ /** @type {JSAnimation} */ tickable._head;\n            let tweenTarget;\n            let tweenStyle;\n            let tweenTargetTransforms;\n            let tweenTargetTransformsProperties;\n            let tweenTransformsNeedUpdate = 0;\n            while(tween){\n                const tweenComposition = tween._composition;\n                const tweenCurrentTime = tween._currentTime;\n                const tweenChangeDuration = tween._changeDuration;\n                const tweenAbsEndTime = tween._absoluteStartTime + tween._changeDuration;\n                const tweenNextRep = tween._nextRep;\n                const tweenPrevRep = tween._prevRep;\n                const tweenHasComposition = tweenComposition !== compositionTypes.none;\n                if ((forcedRender || (tweenCurrentTime !== tweenChangeDuration || absoluteTime <= tweenAbsEndTime + (tweenNextRep ? tweenNextRep._delay : 0)) && (tweenCurrentTime !== 0 || absoluteTime >= tween._absoluteStartTime)) && (!tweenHasComposition || !tween._isOverridden && (!tween._isOverlapped || absoluteTime <= tweenAbsEndTime) && (!tweenNextRep || tweenNextRep._isOverridden || absoluteTime <= tweenNextRep._absoluteStartTime) && (!tweenPrevRep || tweenPrevRep._isOverridden || absoluteTime >= tweenPrevRep._absoluteStartTime + tweenPrevRep._changeDuration + tween._delay))) {\n                    const tweenNewTime = tween._currentTime = clamp(iterationTime - tween._startTime, 0, tweenChangeDuration);\n                    const tweenProgress = tween._ease(tweenNewTime / tween._updateDuration);\n                    const tweenModifier = tween._modifier;\n                    const tweenValueType = tween._valueType;\n                    const tweenType = tween._tweenType;\n                    const tweenIsObject = tweenType === tweenTypes.OBJECT;\n                    const tweenIsNumber = tweenValueType === valueTypes.NUMBER;\n                    // Only round the in-between frames values if the final value is a string\n                    const tweenPrecision = tweenIsNumber && tweenIsObject || tweenProgress === 0 || tweenProgress === 1 ? -1 : globals.precision;\n                    // Recompose tween value\n                    /** @type {String|Number} */ let value;\n                    /** @type {Number} */ let number;\n                    if (tweenIsNumber) {\n                        value = number = /** @type {Number} */ tweenModifier(round(interpolate(tween._fromNumber, tween._toNumber, tweenProgress), tweenPrecision));\n                    } else if (tweenValueType === valueTypes.UNIT) {\n                        // Rounding the values speed up string composition\n                        number = /** @type {Number} */ tweenModifier(round(interpolate(tween._fromNumber, tween._toNumber, tweenProgress), tweenPrecision));\n                        value = \"\".concat(number).concat(tween._unit);\n                    } else if (tweenValueType === valueTypes.COLOR) {\n                        const fn = tween._fromNumbers;\n                        const tn = tween._toNumbers;\n                        const r = round(clamp(/** @type {Number} */ tweenModifier(interpolate(fn[0], tn[0], tweenProgress)), 0, 255), 0);\n                        const g = round(clamp(/** @type {Number} */ tweenModifier(interpolate(fn[1], tn[1], tweenProgress)), 0, 255), 0);\n                        const b = round(clamp(/** @type {Number} */ tweenModifier(interpolate(fn[2], tn[2], tweenProgress)), 0, 255), 0);\n                        const a = clamp(/** @type {Number} */ tweenModifier(round(interpolate(fn[3], tn[3], tweenProgress), tweenPrecision)), 0, 1);\n                        value = \"rgba(\".concat(r, \",\").concat(g, \",\").concat(b, \",\").concat(a, \")\");\n                        if (tweenHasComposition) {\n                            const ns = tween._numbers;\n                            ns[0] = r;\n                            ns[1] = g;\n                            ns[2] = b;\n                            ns[3] = a;\n                        }\n                    } else if (tweenValueType === valueTypes.COMPLEX) {\n                        value = tween._strings[0];\n                        for(let j = 0, l = tween._toNumbers.length; j < l; j++){\n                            const n = /** @type {Number} */ tweenModifier(round(interpolate(tween._fromNumbers[j], tween._toNumbers[j], tweenProgress), tweenPrecision));\n                            const s = tween._strings[j + 1];\n                            value += \"\".concat(s ? n + s : n);\n                            if (tweenHasComposition) {\n                                tween._numbers[j] = n;\n                            }\n                        }\n                    }\n                    // For additive tweens and Animatables\n                    if (tweenHasComposition) {\n                        tween._number = number;\n                    }\n                    if (!internalRender && tweenComposition !== compositionTypes.blend) {\n                        const tweenProperty = tween.property;\n                        tweenTarget = tween.target;\n                        if (tweenIsObject) {\n                            tweenTarget[tweenProperty] = value;\n                        } else if (tweenType === tweenTypes.ATTRIBUTE) {\n                            /** @type {DOMTarget} */ tweenTarget.setAttribute(tweenProperty, /** @type {String} */ value);\n                        } else {\n                            tweenStyle = /** @type {DOMTarget} */ tweenTarget.style;\n                            if (tweenType === tweenTypes.TRANSFORM) {\n                                if (tweenTarget !== tweenTargetTransforms) {\n                                    tweenTargetTransforms = tweenTarget;\n                                    // NOTE: Referencing the cachedTransforms in the tween property directly can be a little bit faster but appears to increase memory usage.\n                                    tweenTargetTransformsProperties = tweenTarget[transformsSymbol];\n                                }\n                                tweenTargetTransformsProperties[tweenProperty] = value;\n                                tweenTransformsNeedUpdate = 1;\n                            } else if (tweenType === tweenTypes.CSS) {\n                                tweenStyle[tweenProperty] = value;\n                            } else if (tweenType === tweenTypes.CSS_VAR) {\n                                tweenStyle.setProperty(tweenProperty, /** @type {String} */ value);\n                            }\n                        }\n                        if (isCurrentTimeAboveZero) hasRendered = 1;\n                    } else {\n                        // Used for composing timeline tweens without having to do a real render\n                        tween._value = value;\n                    }\n                }\n                // NOTE: Possible improvement: Use translate(x,y) / translate3d(x,y,z) syntax\n                // to reduce memory usage on string composition\n                if (tweenTransformsNeedUpdate && tween._renderTransforms) {\n                    let str = emptyString;\n                    for(let key in tweenTargetTransformsProperties){\n                        str += \"\".concat(transformsFragmentStrings[key]).concat(tweenTargetTransformsProperties[key], \") \");\n                    }\n                    tweenStyle.transform = str;\n                    tweenTransformsNeedUpdate = 0;\n                }\n                tween = tween._next;\n            }\n            if (!muteCallbacks && hasRendered) {\n                /** @type {JSAnimation} */ tickable.onRender(/** @type {JSAnimation} */ tickable);\n            }\n        }\n        if (!muteCallbacks && isCurrentTimeAboveZero) {\n            tickable.onUpdate(/** @type {CallbackArgument} */ tickable);\n        }\n    }\n    // End tweens rendering\n    // Handle setters on timeline differently and allow re-trigering the onComplete callback when seeking backwards\n    if (parent && isSetter) {\n        if (!muteCallbacks && (parent.began && !isRunningBackwards && tickableAbsoluteTime >= duration && !completed || isRunningBackwards && tickableAbsoluteTime <= minValue && completed)) {\n            tickable.onComplete(/** @type {CallbackArgument} */ tickable);\n            tickable.completed = !isRunningBackwards;\n        }\n    // If currentTime is both above 0 and at least equals to duration, handles normal onComplete or infinite loops\n    } else if (isCurrentTimeAboveZero && isCurrentTimeEqualOrAboveDuration) {\n        if (iterationCount === Infinity) {\n            // Offset the tickable _startTime with its duration to reset _currentTime to 0 and continue the infinite timer\n            tickable._startTime += tickable.duration;\n        } else if (tickable._currentIteration >= iterationCount - 1) {\n            // By setting paused to true, we tell the engine loop to not render this tickable and removes it from the list on the next tick\n            tickable.paused = true;\n            if (!completed && !_hasChildren) {\n                // If the tickable has children, triggers onComplete() only when all children have completed in the tick function\n                tickable.completed = true;\n                if (!muteCallbacks && !(parent && (isRunningBackwards || !parent.began))) {\n                    tickable.onComplete(/** @type {CallbackArgument} */ tickable);\n                    tickable._resolve(/** @type {CallbackArgument} */ tickable);\n                }\n            }\n        }\n    // Otherwise set the completed flag to false\n    } else {\n        tickable.completed = false;\n    }\n    // NOTE: hasRendered * direction (negative for backwards) this way we can remove the tickable.backwards property completly ?\n    return hasRendered;\n};\n/**\n * @param  {Tickable} tickable\n * @param  {Number} time\n * @param  {Number} muteCallbacks\n * @param  {Number} internalRender\n * @param  {Number} tickMode\n * @return {void}\n */ const tick = (tickable, time, muteCallbacks, internalRender, tickMode)=>{\n    const _currentIteration = tickable._currentIteration;\n    render(tickable, time, muteCallbacks, internalRender, tickMode);\n    if (tickable._hasChildren) {\n        const tl = /** @type {Timeline} */ tickable;\n        const tlIsRunningBackwards = tl.backwards;\n        const tlChildrenTime = internalRender ? time : tl._iterationTime;\n        const tlCildrenTickTime = now();\n        let tlChildrenHasRendered = 0;\n        let tlChildrenHaveCompleted = true;\n        // If the timeline has looped forward, we need to manually triggers children skipped callbacks\n        if (!internalRender && tl._currentIteration !== _currentIteration) {\n            const tlIterationDuration = tl.iterationDuration;\n            forEachChildren(tl, (/** @type {JSAnimation} */ child)=>{\n                if (!tlIsRunningBackwards) {\n                    // Force an internal render to trigger the callbacks if the child has not completed on loop\n                    if (!child.completed && !child.backwards && child._currentTime < child.iterationDuration) {\n                        render(child, tlIterationDuration, muteCallbacks, 1, tickModes.FORCE);\n                    }\n                    // Reset their began and completed flags to allow retrigering callbacks on the next iteration\n                    child.began = false;\n                    child.completed = false;\n                } else {\n                    const childDuration = child.duration;\n                    const childStartTime = child._offset + child._delay;\n                    const childEndTime = childStartTime + childDuration;\n                    // Triggers the onComplete callback on reverse for children on the edges of the timeline\n                    if (!muteCallbacks && childDuration <= minValue && (!childStartTime || childEndTime === tlIterationDuration)) {\n                        child.onComplete(child);\n                    }\n                }\n            });\n            if (!muteCallbacks) tl.onLoop(/** @type {CallbackArgument} */ tl);\n        }\n        forEachChildren(tl, (/** @type {JSAnimation} */ child)=>{\n            const childTime = round((tlChildrenTime - child._offset) * child._speed, 12); // Rounding is needed when using seconds\n            const childTickMode = child._fps < tl._fps ? child.requestTick(tlCildrenTickTime) : tickMode;\n            tlChildrenHasRendered += render(child, childTime, muteCallbacks, internalRender, childTickMode);\n            if (!child.completed && tlChildrenHaveCompleted) tlChildrenHaveCompleted = false;\n        }, tlIsRunningBackwards);\n        // Renders on timeline are triggered by its children so it needs to be set after rendering the children\n        if (!muteCallbacks && tlChildrenHasRendered) tl.onRender(/** @type {CallbackArgument} */ tl);\n        // Triggers the timeline onComplete() once all chindren all completed and the current time has reached the end\n        if (tlChildrenHaveCompleted && tl._currentTime >= tl.duration) {\n            // Make sure the paused flag is false in case it has been skipped in the render function\n            tl.paused = true;\n            if (!tl.completed) {\n                tl.completed = true;\n                if (!muteCallbacks) {\n                    tl.onComplete(/** @type {CallbackArgument} */ tl);\n                    tl._resolve(/** @type {CallbackArgument} */ tl);\n                }\n            }\n        }\n    }\n};\nconst additive = {\n    animation: null,\n    update: noop\n};\n/**\n * @typedef AdditiveAnimation\n * @property {Number} duration\n * @property {Number} _offset\n * @property {Number} _delay\n * @property {Tween} _head\n * @property {Tween} _tail\n */ /**\n * @param  {TweenAdditiveLookups} lookups\n * @return {AdditiveAnimation}\n */ const addAdditiveAnimation = (lookups)=>{\n    let animation = additive.animation;\n    if (!animation) {\n        animation = {\n            duration: minValue,\n            computeDeltaTime: noop,\n            _offset: 0,\n            _delay: 0,\n            _head: null,\n            _tail: null\n        };\n        additive.animation = animation;\n        additive.update = ()=>{\n            lookups.forEach((propertyAnimation)=>{\n                for(let propertyName in propertyAnimation){\n                    const tweens = propertyAnimation[propertyName];\n                    const lookupTween = tweens._head;\n                    if (lookupTween) {\n                        const valueType = lookupTween._valueType;\n                        const additiveValues = valueType === valueTypes.COMPLEX || valueType === valueTypes.COLOR ? cloneArray(lookupTween._fromNumbers) : null;\n                        let additiveValue = lookupTween._fromNumber;\n                        let tween = tweens._tail;\n                        while(tween && tween !== lookupTween){\n                            if (additiveValues) {\n                                for(let i = 0, l = tween._numbers.length; i < l; i++)additiveValues[i] += tween._numbers[i];\n                            } else {\n                                additiveValue += tween._number;\n                            }\n                            tween = tween._prevAdd;\n                        }\n                        lookupTween._toNumber = additiveValue;\n                        lookupTween._toNumbers = additiveValues;\n                    }\n                }\n            });\n            // TODO: Avoid polymorphism here, idealy the additive animation should be a regular animation with a higher priority in the render loop\n            render(animation, 1, 1, 0, tickModes.FORCE);\n        };\n    }\n    return animation;\n};\nconst engineTickMethod = isBrowser ? requestAnimationFrame : setImmediate;\nconst engineCancelMethod = isBrowser ? cancelAnimationFrame : clearImmediate;\nclass Engine extends Clock {\n    update() {\n        const time = this._currentTime = now();\n        if (this.requestTick(time)) {\n            this.computeDeltaTime(time);\n            const engineSpeed = this._speed;\n            const engineFps = this._fps;\n            let activeTickable = /** @type {Tickable} */ this._head;\n            while(activeTickable){\n                const nextTickable = activeTickable._next;\n                if (!activeTickable.paused) {\n                    tick(activeTickable, (time - activeTickable._startTime) * activeTickable._speed * engineSpeed, 0, 0, activeTickable._fps < engineFps ? activeTickable.requestTick(time) : tickModes.AUTO);\n                } else {\n                    removeChild(this, activeTickable);\n                    this._hasChildren = !!this._tail;\n                    activeTickable._running = false;\n                    if (activeTickable.completed && !activeTickable._cancelled) {\n                        activeTickable.cancel();\n                    }\n                }\n                activeTickable = nextTickable;\n            }\n            additive.update();\n        }\n    }\n    wake() {\n        if (this.useDefaultMainLoop && !this.reqId && !this.paused) {\n            this.reqId = engineTickMethod(tickEngine);\n        }\n        return this;\n    }\n    pause() {\n        this.paused = true;\n        return killEngine();\n    }\n    resume() {\n        if (!this.paused) return;\n        this.paused = false;\n        forEachChildren(this, (/** @type {Tickable} */ child)=>child.resetTime());\n        return this.wake();\n    }\n    // Getter and setter for speed\n    get speed() {\n        return this._speed * (globals.timeScale === 1 ? 1 : K);\n    }\n    set speed(playbackRate) {\n        this._speed = playbackRate * globals.timeScale;\n        forEachChildren(this, (/** @type {Tickable} */ child)=>child.speed = child._speed);\n    }\n    // Getter and setter for timeUnit\n    get timeUnit() {\n        return globals.timeScale === 1 ? \"ms\" : \"s\";\n    }\n    set timeUnit(unit) {\n        const secondsScale = 0.001;\n        const isSecond = unit === \"s\";\n        const newScale = isSecond ? secondsScale : 1;\n        if (globals.timeScale !== newScale) {\n            globals.timeScale = newScale;\n            globals.tickThreshold = 200 * newScale;\n            const scaleFactor = isSecond ? secondsScale : K;\n            /** @type {Number} */ this.defaults.duration *= scaleFactor;\n            this._speed *= scaleFactor;\n        }\n    }\n    // Getter and setter for precision\n    get precision() {\n        return globals.precision;\n    }\n    set precision(precision) {\n        globals.precision = precision;\n    }\n    /** @param {Number} [initTime] */ constructor(initTime){\n        super(initTime);\n        this.useDefaultMainLoop = true;\n        this.pauseOnDocumentHidden = true;\n        /** @type {DefaultsParams} */ this.defaults = defaults;\n        this.paused = isBrowser && doc.hidden ? true : false;\n        /** @type {Number|NodeJS.Immediate} */ this.reqId = null;\n    }\n}\nconst engine = /*#__PURE__*/ (()=>{\n    const engine = new Engine(now());\n    if (isBrowser) {\n        globalVersions.engine = engine;\n        doc.addEventListener(\"visibilitychange\", ()=>{\n            if (!engine.pauseOnDocumentHidden) return;\n            doc.hidden ? engine.pause() : engine.resume();\n        });\n    }\n    return engine;\n})();\nconst tickEngine = ()=>{\n    if (engine._head) {\n        engine.reqId = engineTickMethod(tickEngine);\n        engine.update();\n    } else {\n        engine.reqId = 0;\n    }\n};\nconst killEngine = ()=>{\n    engineCancelMethod(/** @type {NodeJS.Immediate & Number} */ engine.reqId);\n    engine.reqId = 0;\n    return engine;\n};\n/**\n * @param  {DOMTarget} target\n * @param  {String} propName\n * @param  {Object} animationInlineStyles\n * @return {String}\n */ const parseInlineTransforms = (target, propName, animationInlineStyles)=>{\n    const inlineTransforms = target.style.transform;\n    let inlinedStylesPropertyValue;\n    if (inlineTransforms) {\n        const cachedTransforms = target[transformsSymbol];\n        let t;\n        while(t = transformsExecRgx.exec(inlineTransforms)){\n            const inlinePropertyName = t[1];\n            // const inlinePropertyValue = t[2];\n            const inlinePropertyValue = t[2].slice(1, -1);\n            cachedTransforms[inlinePropertyName] = inlinePropertyValue;\n            if (inlinePropertyName === propName) {\n                inlinedStylesPropertyValue = inlinePropertyValue;\n                // Store the new parsed inline styles if animationInlineStyles is provided\n                if (animationInlineStyles) {\n                    animationInlineStyles[propName] = inlinePropertyValue;\n                }\n            }\n        }\n    }\n    return inlineTransforms && !isUnd(inlinedStylesPropertyValue) ? inlinedStylesPropertyValue : stringStartsWith(propName, \"scale\") ? \"1\" : stringStartsWith(propName, \"rotate\") || stringStartsWith(propName, \"skew\") ? \"0deg\" : \"0px\";\n};\n/**\n * @param  {DOMTargetsParam|TargetsParam} v\n * @return {NodeList|HTMLCollection}\n */ function getNodeList(v) {\n    const n = isStr(v) ? globals.root.querySelectorAll(v) : v;\n    if (n instanceof NodeList || n instanceof HTMLCollection) return n;\n}\n/**\n * @overload\n * @param  {DOMTargetsParam} targets\n * @return {DOMTargetsArray}\n *\n * @overload\n * @param  {JSTargetsParam} targets\n * @return {JSTargetsArray}\n *\n * @overload\n * @param  {TargetsParam} targets\n * @return {TargetsArray}\n *\n * @param  {DOMTargetsParam|JSTargetsParam|TargetsParam} targets\n */ function parseTargets(targets) {\n    if (isNil(targets)) return /** @type {TargetsArray} */ [];\n    if (isArr(targets)) {\n        const flattened = targets.flat(Infinity);\n        /** @type {TargetsArray} */ const parsed = [];\n        for(let i = 0, l = flattened.length; i < l; i++){\n            const item = flattened[i];\n            if (!isNil(item)) {\n                const nodeList = getNodeList(item);\n                if (nodeList) {\n                    for(let j = 0, jl = nodeList.length; j < jl; j++){\n                        const subItem = nodeList[j];\n                        if (!isNil(subItem)) {\n                            let isDuplicate = false;\n                            for(let k = 0, kl = parsed.length; k < kl; k++){\n                                if (parsed[k] === subItem) {\n                                    isDuplicate = true;\n                                    break;\n                                }\n                            }\n                            if (!isDuplicate) {\n                                parsed.push(subItem);\n                            }\n                        }\n                    }\n                } else {\n                    let isDuplicate = false;\n                    for(let j = 0, jl = parsed.length; j < jl; j++){\n                        if (parsed[j] === item) {\n                            isDuplicate = true;\n                            break;\n                        }\n                    }\n                    if (!isDuplicate) {\n                        parsed.push(item);\n                    }\n                }\n            }\n        }\n        return parsed;\n    }\n    if (!isBrowser) return /** @type {JSTargetsArray} */ [\n        targets\n    ];\n    const nodeList = getNodeList(targets);\n    if (nodeList) return /** @type {DOMTargetsArray} */ Array.from(nodeList);\n    return /** @type {TargetsArray} */ [\n        targets\n    ];\n}\n/**\n * @overload\n * @param  {DOMTargetsParam} targets\n * @return {DOMTargetsArray}\n *\n * @overload\n * @param  {JSTargetsParam} targets\n * @return {JSTargetsArray}\n *\n * @overload\n * @param  {TargetsParam} targets\n * @return {TargetsArray}\n *\n * @param  {DOMTargetsParam|JSTargetsParam|TargetsParam} targets\n */ function registerTargets(targets) {\n    const parsedTargetsArray = parseTargets(targets);\n    const parsedTargetsLength = parsedTargetsArray.length;\n    if (parsedTargetsLength) {\n        for(let i = 0; i < parsedTargetsLength; i++){\n            const target = parsedTargetsArray[i];\n            if (!target[isRegisteredTargetSymbol]) {\n                target[isRegisteredTargetSymbol] = true;\n                const isSvgType = isSvg(target);\n                const isDom = /** @type {DOMTarget} */ target.nodeType || isSvgType;\n                if (isDom) {\n                    target[isDomSymbol] = true;\n                    target[isSvgSymbol] = isSvgType;\n                    target[transformsSymbol] = {};\n                }\n            }\n        }\n    }\n    return parsedTargetsArray;\n}\n/**\n * @param  {TargetsParam} path\n * @return {SVGGeometryElement|undefined}\n */ const getPath = (path)=>{\n    const parsedTargets = parseTargets(path);\n    const $parsedSvg = /** @type {SVGGeometryElement} */ parsedTargets[0];\n    if (!$parsedSvg || !isSvg($parsedSvg)) return;\n    return $parsedSvg;\n};\n/**\n * @param  {TargetsParam} path2\n * @param  {Number} [precision]\n * @return {FunctionValue}\n */ const morphTo = function(path2) {\n    let precision = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : .33;\n    return ($path1)=>{\n        const $path2 = /** @type {SVGGeometryElement} */ getPath(path2);\n        if (!$path2) return;\n        const isPath = $path1.tagName === \"path\";\n        const separator = isPath ? \" \" : \",\";\n        const previousPoints = $path1[morphPointsSymbol];\n        if (previousPoints) $path1.setAttribute(isPath ? \"d\" : \"points\", previousPoints);\n        let v1 = \"\", v2 = \"\";\n        if (!precision) {\n            v1 = $path1.getAttribute(isPath ? \"d\" : \"points\");\n            v2 = $path2.getAttribute(isPath ? \"d\" : \"points\");\n        } else {\n            const length1 = /** @type {SVGGeometryElement} */ $path1.getTotalLength();\n            const length2 = $path2.getTotalLength();\n            const maxPoints = Math.max(Math.ceil(length1 * precision), Math.ceil(length2 * precision));\n            for(let i = 0; i < maxPoints; i++){\n                const t = i / (maxPoints - 1);\n                const pointOnPath1 = /** @type {SVGGeometryElement} */ $path1.getPointAtLength(length1 * t);\n                const pointOnPath2 = $path2.getPointAtLength(length2 * t);\n                const prefix = isPath ? i === 0 ? \"M\" : \"L\" : \"\";\n                v1 += prefix + round(pointOnPath1.x, 3) + separator + pointOnPath1.y + \" \";\n                v2 += prefix + round(pointOnPath2.x, 3) + separator + pointOnPath2.y + \" \";\n            }\n        }\n        $path1[morphPointsSymbol] = v2;\n        return [\n            v1,\n            v2\n        ];\n    };\n};\n/**\n * @param {SVGGeometryElement} [$el]\n * @return {Number}\n */ const getScaleFactor = ($el)=>{\n    let scaleFactor = 1;\n    if ($el && $el.getCTM) {\n        const ctm = $el.getCTM();\n        if (ctm) {\n            const scaleX = sqrt(ctm.a * ctm.a + ctm.b * ctm.b);\n            const scaleY = sqrt(ctm.c * ctm.c + ctm.d * ctm.d);\n            scaleFactor = (scaleX + scaleY) / 2;\n        }\n    }\n    return scaleFactor;\n};\n/**\n * Creates a proxy that wraps an SVGGeometryElement and adds drawing functionality.\n * @param {SVGGeometryElement} $el - The SVG element to transform into a drawable\n * @param {number} start - Starting position (0-1)\n * @param {number} end - Ending position (0-1)\n * @return {DrawableSVGGeometry} - Returns a proxy that preserves the original element's type with additional 'draw' attribute functionality\n */ const createDrawableProxy = ($el, start, end)=>{\n    const pathLength = K;\n    const computedStyles = getComputedStyle($el);\n    const strokeLineCap = computedStyles.strokeLinecap;\n    // @ts-ignore\n    const $scalled = computedStyles.vectorEffect === \"non-scaling-stroke\" ? $el : null;\n    let currentCap = strokeLineCap;\n    const proxy = new Proxy($el, {\n        get (target, property) {\n            const value = target[property];\n            if (property === proxyTargetSymbol) return target;\n            if (property === \"setAttribute\") {\n                return function() {\n                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                        args[_key] = arguments[_key];\n                    }\n                    if (args[0] === \"draw\") {\n                        const value = args[1];\n                        const values = value.split(\" \");\n                        const v1 = +values[0];\n                        const v2 = +values[1];\n                        // TOTO: Benchmark if performing two slices is more performant than one split\n                        // const spaceIndex = value.indexOf(' ');\n                        // const v1 = round(+value.slice(0, spaceIndex), precision);\n                        // const v2 = round(+value.slice(spaceIndex + 1), precision);\n                        const scaleFactor = getScaleFactor($scalled);\n                        const os = v1 * -1e3 * scaleFactor;\n                        const d1 = v2 * pathLength * scaleFactor + os;\n                        const d2 = pathLength * scaleFactor + (v1 === 0 && v2 === 1 || v1 === 1 && v2 === 0 ? 0 : 10 * scaleFactor) - d1;\n                        if (strokeLineCap !== \"butt\") {\n                            const newCap = v1 === v2 ? \"butt\" : strokeLineCap;\n                            if (currentCap !== newCap) {\n                                target.style.strokeLinecap = \"\".concat(newCap);\n                                currentCap = newCap;\n                            }\n                        }\n                        target.setAttribute(\"stroke-dashoffset\", \"\".concat(os));\n                        target.setAttribute(\"stroke-dasharray\", \"\".concat(d1, \" \").concat(d2));\n                    }\n                    return Reflect.apply(value, target, args);\n                };\n            }\n            if (isFnc(value)) {\n                return function() {\n                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                        args[_key] = arguments[_key];\n                    }\n                    return Reflect.apply(value, target, args);\n                };\n            } else {\n                return value;\n            }\n        }\n    });\n    if ($el.getAttribute(\"pathLength\") !== \"\".concat(pathLength)) {\n        $el.setAttribute(\"pathLength\", \"\".concat(pathLength));\n        proxy.setAttribute(\"draw\", \"\".concat(start, \" \").concat(end));\n    }\n    return /** @type {DrawableSVGGeometry} */ proxy;\n};\n/**\n * Creates drawable proxies for multiple SVG elements.\n * @param {TargetsParam} selector - CSS selector, SVG element, or array of elements and selectors\n * @param {number} [start=0] - Starting position (0-1)\n * @param {number} [end=0] - Ending position (0-1)\n * @return {Array<DrawableSVGGeometry>} - Array of proxied elements with drawing functionality\n */ const createDrawable = function(selector) {\n    let start = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n    const els = parseTargets(selector);\n    return els.map(($el)=>createDrawableProxy(/** @type {SVGGeometryElement} */ $el, start, end));\n};\n// Motion path animation\n/**\n * @param {SVGGeometryElement} $path\n * @param {Number} progress\n * @param {Number}lookup\n * @return {DOMPoint}\n */ const getPathPoint = function($path, progress) {\n    let lookup = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n    return $path.getPointAtLength(progress + lookup >= 1 ? progress + lookup : 0);\n};\n/**\n * @param {SVGGeometryElement} $path\n * @param {String} pathProperty\n * @return {FunctionValue}\n */ const getPathProgess = ($path, pathProperty)=>{\n    return ($el)=>{\n        const totalLength = +$path.getTotalLength();\n        const inSvg = $el[isSvgSymbol];\n        const ctm = $path.getCTM();\n        /** @type {TweenObjectValue} */ return {\n            from: 0,\n            to: totalLength,\n            /** @type {TweenModifier} */ modifier: (progress)=>{\n                if (pathProperty === \"a\") {\n                    const p0 = getPathPoint($path, progress, -1);\n                    const p1 = getPathPoint($path, progress, 1);\n                    return atan2(p1.y - p0.y, p1.x - p0.x) * 180 / PI;\n                } else {\n                    const p = getPathPoint($path, progress, 0);\n                    return pathProperty === \"x\" ? inSvg || !ctm ? p.x : p.x * ctm.a + p.y * ctm.c + ctm.e : inSvg || !ctm ? p.y : p.x * ctm.b + p.y * ctm.d + ctm.f;\n                }\n            }\n        };\n    };\n};\n/**\n * @param {TargetsParam} path\n */ const createMotionPath = (path)=>{\n    const $path = getPath(path);\n    if (!$path) return;\n    return {\n        translateX: getPathProgess($path, \"x\"),\n        translateY: getPathProgess($path, \"y\"),\n        rotate: getPathProgess($path, \"a\")\n    };\n};\n// Check for valid SVG attribute\nconst cssReservedProperties = [\n    \"opacity\",\n    \"rotate\",\n    \"overflow\",\n    \"color\"\n];\n/**\n * @param  {Target} el\n * @param  {String} propertyName\n * @return {Boolean}\n */ const isValidSVGAttribute = (el, propertyName)=>{\n    // Return early and use CSS opacity animation instead (already better default values (opacity: 1 instead of 0)) and rotate should be considered a transform\n    if (cssReservedProperties.includes(propertyName)) return false;\n    if (el.getAttribute(propertyName) || propertyName in el) {\n        if (propertyName === \"scale\") {\n            const elParentNode = /** @type {SVGGeometryElement} */ /** @type {DOMTarget} */ el.parentNode;\n            // Only consider scale as a valid SVG attribute on filter element\n            return elParentNode && elParentNode.tagName === \"filter\";\n        }\n        return true;\n    }\n};\nconst svg = {\n    morphTo,\n    createMotionPath,\n    createDrawable\n};\n/**\n * RGB / RGBA Color value string -> RGBA values array\n * @param  {String} rgbValue\n * @return {ColorArray}\n */ const rgbToRgba = (rgbValue)=>{\n    const rgba = rgbExecRgx.exec(rgbValue) || rgbaExecRgx.exec(rgbValue);\n    const a = !isUnd(rgba[4]) ? +rgba[4] : 1;\n    return [\n        +rgba[1],\n        +rgba[2],\n        +rgba[3],\n        a\n    ];\n};\n/**\n * HEX3 / HEX3A / HEX6 / HEX6A Color value string -> RGBA values array\n * @param  {String} hexValue\n * @return {ColorArray}\n */ const hexToRgba = (hexValue)=>{\n    const hexLength = hexValue.length;\n    const isShort = hexLength === 4 || hexLength === 5;\n    return [\n        +(\"0x\" + hexValue[1] + hexValue[isShort ? 1 : 2]),\n        +(\"0x\" + hexValue[isShort ? 2 : 3] + hexValue[isShort ? 2 : 4]),\n        +(\"0x\" + hexValue[isShort ? 3 : 5] + hexValue[isShort ? 3 : 6]),\n        hexLength === 5 || hexLength === 9 ? +(+(\"0x\" + hexValue[isShort ? 4 : 7] + hexValue[isShort ? 4 : 8]) / 255).toFixed(3) : 1\n    ];\n};\n/**\n * @param  {Number} p\n * @param  {Number} q\n * @param  {Number} t\n * @return {Number}\n */ const hue2rgb = (p, q, t)=>{\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    return t < 1 / 6 ? p + (q - p) * 6 * t : t < 1 / 2 ? q : t < 2 / 3 ? p + (q - p) * (2 / 3 - t) * 6 : p;\n};\n/**\n * HSL / HSLA Color value string -> RGBA values array\n * @param  {String} hslValue\n * @return {ColorArray}\n */ const hslToRgba = (hslValue)=>{\n    const hsla = hslExecRgx.exec(hslValue) || hslaExecRgx.exec(hslValue);\n    const h = +hsla[1] / 360;\n    const s = +hsla[2] / 100;\n    const l = +hsla[3] / 100;\n    const a = !isUnd(hsla[4]) ? +hsla[4] : 1;\n    let r, g, b;\n    if (s === 0) {\n        r = g = b = l;\n    } else {\n        const q = l < .5 ? l * (1 + s) : l + s - l * s;\n        const p = 2 * l - q;\n        r = round(hue2rgb(p, q, h + 1 / 3) * 255, 0);\n        g = round(hue2rgb(p, q, h) * 255, 0);\n        b = round(hue2rgb(p, q, h - 1 / 3) * 255, 0);\n    }\n    return [\n        r,\n        g,\n        b,\n        a\n    ];\n};\n/**\n * All in one color converter that converts a color string value into an array of RGBA values\n * @param  {String} colorString\n * @return {ColorArray}\n */ const convertColorStringValuesToRgbaArray = (colorString)=>{\n    return isRgb(colorString) ? rgbToRgba(colorString) : isHex(colorString) ? hexToRgba(colorString) : isHsl(colorString) ? hslToRgba(colorString) : [\n        0,\n        0,\n        0,\n        1\n    ];\n};\n/**\n * @template T, D\n * @param {T|undefined} targetValue\n * @param {D} defaultValue\n * @return {T|D}\n */ const setValue = (targetValue, defaultValue)=>{\n    return isUnd(targetValue) ? defaultValue : targetValue;\n};\n/**\n * @param  {TweenPropValue} value\n * @param  {Target} target\n * @param  {Number} index\n * @param  {Number} total\n * @param  {Object} [store]\n * @return {any}\n */ const getFunctionValue = (value, target, index, total, store)=>{\n    if (isFnc(value)) {\n        const func = ()=>{\n            const computed = /** @type {Function} */ value(target, index, total);\n            // Fallback to 0 if the function returns undefined / NaN / null / false / 0\n            return !isNaN(+computed) ? +computed : computed || 0;\n        };\n        if (store) {\n            store.func = func;\n        }\n        return func();\n    } else {\n        return value;\n    }\n};\n/**\n * @param  {Target} target\n * @param  {String} prop\n * @return {tweenTypes}\n */ const getTweenType = (target, prop)=>{\n    return !target[isDomSymbol] ? tweenTypes.OBJECT : // Handle SVG attributes\n    target[isSvgSymbol] && isValidSVGAttribute(target, prop) ? tweenTypes.ATTRIBUTE : // Handle CSS Transform properties differently than CSS to allow individual animations\n    validTransforms.includes(prop) || shortTransforms.get(prop) ? tweenTypes.TRANSFORM : // CSS variables\n    stringStartsWith(prop, \"--\") ? tweenTypes.CSS_VAR : // All other CSS properties\n    prop in /** @type {DOMTarget} */ target.style ? tweenTypes.CSS : // Handle other DOM Attributes\n    prop in target ? tweenTypes.OBJECT : tweenTypes.ATTRIBUTE;\n};\n/**\n * @param  {DOMTarget} target\n * @param  {String} propName\n * @param  {Object} animationInlineStyles\n * @return {String}\n */ const getCSSValue = (target, propName, animationInlineStyles)=>{\n    const inlineStyles = target.style[propName];\n    if (inlineStyles && animationInlineStyles) {\n        animationInlineStyles[propName] = inlineStyles;\n    }\n    const value = inlineStyles || getComputedStyle(target[proxyTargetSymbol] || target).getPropertyValue(propName);\n    return value === \"auto\" ? \"0\" : value;\n};\n/**\n * @param {Target} target\n * @param {String} propName\n * @param {tweenTypes} [tweenType]\n * @param {Object|void} [animationInlineStyles]\n * @return {String|Number}\n */ const getOriginalAnimatableValue = (target, propName, tweenType, animationInlineStyles)=>{\n    const type = !isUnd(tweenType) ? tweenType : getTweenType(target, propName);\n    return type === tweenTypes.OBJECT ? target[propName] || 0 : type === tweenTypes.ATTRIBUTE ? /** @type {DOMTarget} */ target.getAttribute(propName) : type === tweenTypes.TRANSFORM ? parseInlineTransforms(/** @type {DOMTarget} */ target, propName, animationInlineStyles) : type === tweenTypes.CSS_VAR ? getCSSValue(/** @type {DOMTarget} */ target, propName, animationInlineStyles).trimStart() : getCSSValue(/** @type {DOMTarget} */ target, propName, animationInlineStyles);\n};\n/**\n * @param  {Number} x\n * @param  {Number} y\n * @param  {String} operator\n * @return {Number}\n */ const getRelativeValue = (x, y, operator)=>{\n    return operator === \"-\" ? x - y : operator === \"+\" ? x + y : x * y;\n};\n/** @return {TweenDecomposedValue} */ const createDecomposedValueTargetObject = ()=>{\n    return {\n        /** @type {valueTypes} */ t: valueTypes.NUMBER,\n        n: 0,\n        u: null,\n        o: null,\n        d: null,\n        s: null\n    };\n};\n/**\n * @param  {String|Number} rawValue\n * @param  {TweenDecomposedValue} targetObject\n * @return {TweenDecomposedValue}\n */ const decomposeRawValue = (rawValue, targetObject)=>{\n    /** @type {valueTypes} */ targetObject.t = valueTypes.NUMBER;\n    targetObject.n = 0;\n    targetObject.u = null;\n    targetObject.o = null;\n    targetObject.d = null;\n    targetObject.s = null;\n    if (!rawValue) return targetObject;\n    const num = +rawValue;\n    if (!isNaN(num)) {\n        // It's a number\n        targetObject.n = num;\n        return targetObject;\n    } else {\n        // let str = /** @type {String} */(rawValue).trim();\n        let str = /** @type {String} */ rawValue;\n        // Parsing operators (+=, -=, *=) manually is much faster than using regex here\n        if (str[1] === \"=\") {\n            targetObject.o = str[0];\n            str = str.slice(2);\n        }\n        // Skip exec regex if the value type is complex or color to avoid long regex backtracking\n        const unitMatch = str.includes(\" \") ? false : unitsExecRgx.exec(str);\n        if (unitMatch) {\n            // Has a number and a unit\n            targetObject.t = valueTypes.UNIT;\n            targetObject.n = +unitMatch[1];\n            targetObject.u = unitMatch[2];\n            return targetObject;\n        } else if (targetObject.o) {\n            // Has an operator (+=, -=, *=)\n            targetObject.n = +str;\n            return targetObject;\n        } else if (isCol(str)) {\n            // Is a color\n            targetObject.t = valueTypes.COLOR;\n            targetObject.d = convertColorStringValuesToRgbaArray(str);\n            return targetObject;\n        } else {\n            // Is a more complex string (generally svg coords, calc() or filters CSS values)\n            const matchedNumbers = str.match(digitWithExponentRgx);\n            targetObject.t = valueTypes.COMPLEX;\n            targetObject.d = matchedNumbers ? matchedNumbers.map(Number) : [];\n            targetObject.s = str.split(digitWithExponentRgx) || [];\n            return targetObject;\n        }\n    }\n};\n/**\n * @param  {Tween} tween\n * @param  {TweenDecomposedValue} targetObject\n * @return {TweenDecomposedValue}\n */ const decomposeTweenValue = (tween, targetObject)=>{\n    targetObject.t = tween._valueType;\n    targetObject.n = tween._toNumber;\n    targetObject.u = tween._unit;\n    targetObject.o = null;\n    targetObject.d = cloneArray(tween._toNumbers);\n    targetObject.s = cloneArray(tween._strings);\n    return targetObject;\n};\nconst decomposedOriginalValue = createDecomposedValueTargetObject();\nconst lookups = {\n    /** @type {TweenReplaceLookups} */ _rep: new WeakMap(),\n    /** @type {TweenAdditiveLookups} */ _add: new Map()\n};\n/**\n * @param  {Target} target\n * @param  {String} property\n * @param  {String} lookup\n * @return {TweenPropertySiblings}\n */ const getTweenSiblings = function(target, property) {\n    let lookup = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"_rep\";\n    const lookupMap = lookups[lookup];\n    let targetLookup = lookupMap.get(target);\n    if (!targetLookup) {\n        targetLookup = {};\n        lookupMap.set(target, targetLookup);\n    }\n    return targetLookup[property] ? targetLookup[property] : targetLookup[property] = {\n        _head: null,\n        _tail: null\n    };\n};\n/**\n * @param  {Tween} p\n * @param  {Tween} c\n * @return {Number|Boolean}\n */ const addTweenSortMethod = (p, c)=>{\n    return p._isOverridden || p._absoluteStartTime > c._absoluteStartTime;\n};\n/**\n * @param {Tween} tween\n */ const overrideTween = (tween)=>{\n    tween._isOverlapped = 1;\n    tween._isOverridden = 1;\n    tween._changeDuration = minValue;\n    tween._currentTime = minValue;\n};\n/**\n * @param  {Tween} tween\n * @param  {TweenPropertySiblings} siblings\n * @return {Tween}\n */ const composeTween = (tween, siblings)=>{\n    const tweenCompositionType = tween._composition;\n    // Handle replaced tweens\n    if (tweenCompositionType === compositionTypes.replace) {\n        const tweenAbsStartTime = tween._absoluteStartTime;\n        addChild(siblings, tween, addTweenSortMethod, \"_prevRep\", \"_nextRep\");\n        const prevSibling = tween._prevRep;\n        // Update the previous siblings for composition replace tweens\n        if (prevSibling) {\n            const prevParent = prevSibling.parent;\n            const prevAbsEndTime = prevSibling._absoluteStartTime + prevSibling._changeDuration;\n            // Handle looped animations tween\n            if (// Check if the previous tween is from a different animation\n            tween.parent.id !== prevParent.id && // Check if the animation has loops\n            prevParent.iterationCount > 1 && // Check if _absoluteChangeEndTime of last loop overlaps the current tween\n            prevAbsEndTime + (prevParent.duration - prevParent.iterationDuration) > tweenAbsStartTime) {\n                // TODO: Find a way to only override the iterations overlapping with the tween\n                overrideTween(prevSibling);\n                let prevPrevSibling = prevSibling._prevRep;\n                // If the tween was part of a set of keyframes, override its siblings\n                while(prevPrevSibling && prevPrevSibling.parent.id === prevParent.id){\n                    overrideTween(prevPrevSibling);\n                    prevPrevSibling = prevPrevSibling._prevRep;\n                }\n            }\n            const absoluteUpdateStartTime = tweenAbsStartTime - tween._delay;\n            if (prevAbsEndTime > absoluteUpdateStartTime) {\n                const prevChangeStartTime = prevSibling._startTime;\n                const prevTLOffset = prevAbsEndTime - (prevChangeStartTime + prevSibling._updateDuration);\n                prevSibling._changeDuration = absoluteUpdateStartTime - prevTLOffset - prevChangeStartTime;\n                prevSibling._currentTime = prevSibling._changeDuration;\n                prevSibling._isOverlapped = 1;\n                if (prevSibling._changeDuration < minValue) {\n                    overrideTween(prevSibling);\n                }\n            }\n            // Pause (and cancel) the parent if it only contains overlapped tweens\n            let pausePrevParentAnimation = true;\n            forEachChildren(prevParent, (/** @type Tween */ t)=>{\n                if (!t._isOverlapped) pausePrevParentAnimation = false;\n            });\n            if (pausePrevParentAnimation) {\n                const prevParentTL = prevParent.parent;\n                if (prevParentTL) {\n                    let pausePrevParentTL = true;\n                    forEachChildren(prevParentTL, (/** @type JSAnimation */ a)=>{\n                        if (a !== prevParent) {\n                            forEachChildren(a, (/** @type Tween */ t)=>{\n                                if (!t._isOverlapped) pausePrevParentTL = false;\n                            });\n                        }\n                    });\n                    if (pausePrevParentTL) {\n                        prevParentTL.cancel();\n                    }\n                } else {\n                    prevParent.cancel();\n                // Previously, calling .cancel() on a timeline child would affect the render order of other children\n                // Worked around this by marking it as .completed and using .pause() for safe removal in the engine loop\n                // This is no longer needed since timeline tween composition is now handled separatly\n                // Keeping this here for reference\n                // prevParent.completed = true;\n                // prevParent.pause();\n                }\n            }\n        }\n    // let nextSibling = tween._nextRep;\n    // // All the next siblings are automatically overridden\n    // if (nextSibling && nextSibling._absoluteStartTime >= tweenAbsStartTime) {\n    //   while (nextSibling) {\n    //     overrideTween(nextSibling);\n    //     nextSibling = nextSibling._nextRep;\n    //   }\n    // }\n    // if (nextSibling && nextSibling._absoluteStartTime < tweenAbsStartTime) {\n    //   while (nextSibling) {\n    //     overrideTween(nextSibling);\n    //     console.log(tween.id, nextSibling.id);\n    //     nextSibling = nextSibling._nextRep;\n    //   }\n    // }\n    // Handle additive tweens composition\n    } else if (tweenCompositionType === compositionTypes.blend) {\n        const additiveTweenSiblings = getTweenSiblings(tween.target, tween.property, \"_add\");\n        const additiveAnimation = addAdditiveAnimation(lookups._add);\n        let lookupTween = additiveTweenSiblings._head;\n        if (!lookupTween) {\n            lookupTween = {\n                ...tween\n            };\n            lookupTween._composition = compositionTypes.replace;\n            lookupTween._updateDuration = minValue;\n            lookupTween._startTime = 0;\n            lookupTween._numbers = cloneArray(tween._fromNumbers);\n            lookupTween._number = 0;\n            lookupTween._next = null;\n            lookupTween._prev = null;\n            addChild(additiveTweenSiblings, lookupTween);\n            addChild(additiveAnimation, lookupTween);\n        }\n        // Convert the values of TO to FROM and set TO to 0\n        const toNumber = tween._toNumber;\n        tween._fromNumber = lookupTween._fromNumber - toNumber;\n        tween._toNumber = 0;\n        tween._numbers = cloneArray(tween._fromNumbers);\n        tween._number = 0;\n        lookupTween._fromNumber = toNumber;\n        if (tween._toNumbers) {\n            const toNumbers = cloneArray(tween._toNumbers);\n            if (toNumbers) {\n                toNumbers.forEach((value, i)=>{\n                    tween._fromNumbers[i] = lookupTween._fromNumbers[i] - value;\n                    tween._toNumbers[i] = 0;\n                });\n            }\n            lookupTween._fromNumbers = toNumbers;\n        }\n        addChild(additiveTweenSiblings, tween, null, \"_prevAdd\", \"_nextAdd\");\n    }\n    return tween;\n};\n/**\n * @param  {Tween} tween\n * @return {Tween}\n */ const removeTweenSliblings = (tween)=>{\n    const tweenComposition = tween._composition;\n    if (tweenComposition !== compositionTypes.none) {\n        const tweenTarget = tween.target;\n        const tweenProperty = tween.property;\n        const replaceTweensLookup = lookups._rep;\n        const replaceTargetProps = replaceTweensLookup.get(tweenTarget);\n        const tweenReplaceSiblings = replaceTargetProps[tweenProperty];\n        removeChild(tweenReplaceSiblings, tween, \"_prevRep\", \"_nextRep\");\n        if (tweenComposition === compositionTypes.blend) {\n            const addTweensLookup = lookups._add;\n            const addTargetProps = addTweensLookup.get(tweenTarget);\n            if (!addTargetProps) return;\n            const additiveTweenSiblings = addTargetProps[tweenProperty];\n            const additiveAnimation = additive.animation;\n            removeChild(additiveTweenSiblings, tween, \"_prevAdd\", \"_nextAdd\");\n            // If only one tween is left in the additive lookup, it's the tween lookup\n            const lookupTween = additiveTweenSiblings._head;\n            if (lookupTween && lookupTween === additiveTweenSiblings._tail) {\n                removeChild(additiveTweenSiblings, lookupTween, \"_prevAdd\", \"_nextAdd\");\n                removeChild(additiveAnimation, lookupTween);\n                let shouldClean = true;\n                for(let prop in addTargetProps){\n                    if (addTargetProps[prop]._head) {\n                        shouldClean = false;\n                        break;\n                    }\n                }\n                if (shouldClean) {\n                    addTweensLookup.delete(tweenTarget);\n                }\n            }\n        }\n    }\n    return tween;\n};\n/**\n * @param  {Timer} timer\n * @return {Timer}\n */ const resetTimerProperties = (timer)=>{\n    timer.paused = true;\n    timer.began = false;\n    timer.completed = false;\n    return timer;\n};\n/**\n * @param  {Timer} timer\n * @return {Timer}\n */ const reviveTimer = (timer)=>{\n    if (!timer._cancelled) return timer;\n    if (timer._hasChildren) {\n        forEachChildren(timer, reviveTimer);\n    } else {\n        forEachChildren(timer, (/** @type {Tween} tween*/ tween)=>{\n            if (tween._composition !== compositionTypes.none) {\n                composeTween(tween, getTweenSiblings(tween.target, tween.property));\n            }\n        });\n    }\n    timer._cancelled = 0;\n    return timer;\n};\nlet timerId = 0;\n/**\n * Base class used to create Timers, Animations and Timelines\n */ class Timer extends Clock {\n    get cancelled() {\n        return !!this._cancelled;\n    }\n    /** @param {Boolean} cancelled  */ set cancelled(cancelled) {\n        cancelled ? this.cancel() : this.reset(1).play();\n    }\n    get currentTime() {\n        return clamp(round(this._currentTime, globals.precision), -this._delay, this.duration);\n    }\n    /** @param {Number} time  */ set currentTime(time) {\n        const paused = this.paused;\n        // Pausing the timer is necessary to avoid time jumps on a running instance\n        this.pause().seek(+time);\n        if (!paused) this.resume();\n    }\n    get iterationCurrentTime() {\n        return round(this._iterationTime, globals.precision);\n    }\n    /** @param {Number} time  */ set iterationCurrentTime(time) {\n        this.currentTime = this.iterationDuration * this._currentIteration + time;\n    }\n    get progress() {\n        return clamp(round(this._currentTime / this.duration, 5), 0, 1);\n    }\n    /** @param {Number} progress  */ set progress(progress) {\n        this.currentTime = this.duration * progress;\n    }\n    get iterationProgress() {\n        return clamp(round(this._iterationTime / this.iterationDuration, 5), 0, 1);\n    }\n    /** @param {Number} progress  */ set iterationProgress(progress) {\n        const iterationDuration = this.iterationDuration;\n        this.currentTime = iterationDuration * this._currentIteration + iterationDuration * progress;\n    }\n    get currentIteration() {\n        return this._currentIteration;\n    }\n    /** @param {Number} iterationCount  */ set currentIteration(iterationCount) {\n        this.currentTime = this.iterationDuration * clamp(+iterationCount, 0, this.iterationCount - 1);\n    }\n    get reversed() {\n        return !!this._reversed;\n    }\n    /** @param {Boolean} reverse  */ set reversed(reverse) {\n        reverse ? this.reverse() : this.play();\n    }\n    get speed() {\n        return super.speed;\n    }\n    /** @param {Number} playbackRate  */ set speed(playbackRate) {\n        super.speed = playbackRate;\n        this.resetTime();\n    }\n    /**\n   * @param  {Number} internalRender\n   * @return {this}\n   */ reset() {\n        let internalRender = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n        // If cancelled, revive the timer before rendering in order to have propertly composed tweens siblings\n        reviveTimer(this);\n        if (this._reversed && !this._reverse) this.reversed = false;\n        // Rendering before updating the completed flag to prevent skips and to make sure the properties are not overridden\n        // Setting the iterationTime at the end to force the rendering to happend backwards, otherwise calling .reset() on Timelines might not render children in the right order\n        // NOTE: This is only required for Timelines and might be better to move to the Timeline class?\n        this._iterationTime = this.iterationDuration;\n        // Set tickMode to tickModes.FORCE to force rendering\n        tick(this, 0, 1, internalRender, tickModes.FORCE);\n        // Reset timer properties after revive / render to make sure the props are not updated again\n        resetTimerProperties(this);\n        // Also reset children properties\n        if (this._hasChildren) {\n            forEachChildren(this, resetTimerProperties);\n        }\n        return this;\n    }\n    /**\n   * @param  {Number} internalRender\n   * @return {this}\n   */ init() {\n        let internalRender = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n        this.fps = this._fps;\n        this.speed = this._speed;\n        // Manually calling .init() on timelines should render all children intial state\n        // Forces all children to render once then render to 0 when reseted\n        if (!internalRender && this._hasChildren) {\n            tick(this, this.duration, 1, internalRender, tickModes.FORCE);\n        }\n        this.reset(internalRender);\n        // Make sure to set autoplay to false to child timers so it doesn't attempt to autoplay / link\n        const autoplay = this._autoplay;\n        if (autoplay === true) {\n            this.resume();\n        } else if (autoplay && !isUnd(/** @type {ScrollObserver} */ autoplay.linked)) {\n            /** @type {ScrollObserver} */ autoplay.link(this);\n        }\n        return this;\n    }\n    /** @return {this} */ resetTime() {\n        const timeScale = 1 / (this._speed * engine._speed);\n        this._startTime = now() - (this._currentTime + this._delay) * timeScale;\n        return this;\n    }\n    /** @return {this} */ pause() {\n        if (this.paused) return this;\n        this.paused = true;\n        this.onPause(this);\n        return this;\n    }\n    /** @return {this} */ resume() {\n        if (!this.paused) return this;\n        this.paused = false;\n        // We can safely imediatly render a timer that has no duration and no children\n        if (this.duration <= minValue && !this._hasChildren) {\n            tick(this, minValue, 0, 0, tickModes.FORCE);\n        } else {\n            if (!this._running) {\n                addChild(engine, this);\n                engine._hasChildren = true;\n                this._running = true;\n            }\n            this.resetTime();\n            // Forces the timer to advance by at least one frame when the next tick occurs\n            this._startTime -= 12;\n            engine.wake();\n        }\n        return this;\n    }\n    /** @return {this} */ restart() {\n        return this.reset(0).resume();\n    }\n    /**\n   * @param  {Number} time\n   * @param  {Boolean|Number} [muteCallbacks]\n   * @param  {Boolean|Number} [internalRender]\n   * @return {this}\n   */ seek(time) {\n        let muteCallbacks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, internalRender = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n        // Recompose the tween siblings in case the timer has been cancelled\n        reviveTimer(this);\n        // If you seek a completed animation, otherwise the next play will starts at 0\n        this.completed = false;\n        const isPaused = this.paused;\n        this.paused = true;\n        // timer, time, muteCallbacks, internalRender, tickMode\n        tick(this, time + this._delay, ~~muteCallbacks, ~~internalRender, tickModes.AUTO);\n        return isPaused ? this : this.resume();\n    }\n    /** @return {this} */ alternate() {\n        const reversed = this._reversed;\n        const count = this.iterationCount;\n        const duration = this.iterationDuration;\n        // Calculate the maximum iterations possible given the iteration duration\n        const iterations = count === Infinity ? floor(maxValue / duration) : count;\n        this._reversed = +(this._alternate && !(iterations % 2) ? reversed : !reversed);\n        if (count === Infinity) {\n            // Handle infinite loops to loop on themself\n            this.iterationProgress = this._reversed ? 1 - this.iterationProgress : this.iterationProgress;\n        } else {\n            this.seek(duration * iterations - this._currentTime);\n        }\n        this.resetTime();\n        return this;\n    }\n    /** @return {this} */ play() {\n        if (this._reversed) this.alternate();\n        return this.resume();\n    }\n    /** @return {this} */ reverse() {\n        if (!this._reversed) this.alternate();\n        return this.resume();\n    }\n    // TODO: Move all the animation / tweens / children related code to Animation / Timeline\n    /** @return {this} */ cancel() {\n        if (this._hasChildren) {\n            forEachChildren(this, (/** @type {Renderable} */ child)=>child.cancel(), true);\n        } else {\n            forEachChildren(this, removeTweenSliblings);\n        }\n        this._cancelled = 1;\n        // Pausing the timer removes it from the engine\n        return this.pause();\n    }\n    /**\n   * @param  {Number} newDuration\n   * @return {this}\n   */ stretch(newDuration) {\n        const currentDuration = this.duration;\n        const normlizedDuration = normalizeTime(newDuration);\n        if (currentDuration === normlizedDuration) return this;\n        const timeScale = newDuration / currentDuration;\n        const isSetter = newDuration <= minValue;\n        this.duration = isSetter ? minValue : normlizedDuration;\n        this.iterationDuration = isSetter ? minValue : normalizeTime(this.iterationDuration * timeScale);\n        this._offset *= timeScale;\n        this._delay *= timeScale;\n        this._loopDelay *= timeScale;\n        return this;\n    }\n    /**\n   * Cancels the timer by seeking it back to 0 and reverting the attached scroller if necessary\n   * @return {this}\n   */ revert() {\n        tick(this, 0, 1, 0, tickModes.AUTO);\n        const ap = /** @type {ScrollObserver} */ this._autoplay;\n        if (ap && ap.linked && ap.linked === this) ap.revert();\n        return this.cancel();\n    }\n    /**\n   * Imediatly completes the timer, cancels it and triggers the onComplete callback\n   * @return {this}\n   */ complete() {\n        return this.seek(this.duration).cancel();\n    }\n    /**\n   * @param  {Callback<this>} [callback]\n   * @return {Promise}\n   */ then() {\n        let callback = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : noop;\n        const then = this.then;\n        const onResolve = ()=>{\n            // this.then = null prevents infinite recursion if returned by an async function\n            // https://github.com/juliangarnierorg/anime-beta/issues/26\n            this.then = null;\n            callback(this);\n            this.then = then;\n            this._resolve = noop;\n        };\n        return new Promise((r)=>{\n            this._resolve = ()=>r(onResolve());\n            // Make sure to resolve imediatly if the timer has already completed\n            if (this.completed) this._resolve();\n            return this;\n        });\n    }\n    /**\n   * @param {TimerParams} [parameters]\n   * @param {Timeline} [parent]\n   * @param {Number} [parentPosition]\n   */ constructor(parameters = {}, parent = null, parentPosition = 0){\n        super(0);\n        const { id, delay, duration, reversed, alternate, loop, loopDelay, autoplay, frameRate, playbackRate, onComplete, onLoop, onPause, onBegin, onBeforeUpdate, onUpdate } = parameters;\n        if (globals.scope) globals.scope.revertibles.push(this);\n        const timerInitTime = parent ? 0 : engine._elapsedTime;\n        const timerDefaults = parent ? parent.defaults : globals.defaults;\n        const timerDelay = /** @type {Number} */ isFnc(delay) || isUnd(delay) ? timerDefaults.delay : +delay;\n        const timerDuration = isFnc(duration) || isUnd(duration) ? Infinity : +duration;\n        const timerLoop = setValue(loop, timerDefaults.loop);\n        const timerLoopDelay = setValue(loopDelay, timerDefaults.loopDelay);\n        const timerIterationCount = timerLoop === true || timerLoop === Infinity || /** @type {Number} */ timerLoop < 0 ? Infinity : /** @type {Number} */ timerLoop + 1;\n        let offsetPosition = 0;\n        if (parent) {\n            offsetPosition = parentPosition;\n        } else {\n            let startTime = now();\n            // Make sure to tick the engine once if suspended to avoid big gaps with the following offsetPosition calculation\n            if (engine.paused) {\n                engine.requestTick(startTime);\n                startTime = engine._elapsedTime;\n            }\n            offsetPosition = startTime - engine._startTime;\n        }\n        // Timer's parameters\n        this.id = !isUnd(id) ? id : ++timerId;\n        /** @type {Timeline} */ this.parent = parent;\n        // Total duration of the timer\n        this.duration = clampInfinity((timerDuration + timerLoopDelay) * timerIterationCount - timerLoopDelay) || minValue;\n        /** @type {Boolean} */ this.backwards = false;\n        /** @type {Boolean} */ this.paused = true;\n        /** @type {Boolean} */ this.began = false;\n        /** @type {Boolean} */ this.completed = false;\n        /** @type {Callback<this>} */ this.onBegin = onBegin || timerDefaults.onBegin;\n        /** @type {Callback<this>} */ this.onBeforeUpdate = onBeforeUpdate || timerDefaults.onBeforeUpdate;\n        /** @type {Callback<this>} */ this.onUpdate = onUpdate || timerDefaults.onUpdate;\n        /** @type {Callback<this>} */ this.onLoop = onLoop || timerDefaults.onLoop;\n        /** @type {Callback<this>} */ this.onPause = onPause || timerDefaults.onPause;\n        /** @type {Callback<this>} */ this.onComplete = onComplete || timerDefaults.onComplete;\n        /** @type {Number} */ this.iterationDuration = timerDuration; // Duration of one loop\n        /** @type {Number} */ this.iterationCount = timerIterationCount; // Number of loops\n        /** @type {Boolean|ScrollObserver} */ this._autoplay = parent ? false : setValue(autoplay, timerDefaults.autoplay);\n        /** @type {Number} */ this._offset = offsetPosition;\n        /** @type {Number} */ this._delay = timerDelay;\n        /** @type {Number} */ this._loopDelay = timerLoopDelay;\n        /** @type {Number} */ this._iterationTime = 0;\n        /** @type {Number} */ this._currentIteration = 0; // Current loop index\n        /** @type {Function} */ this._resolve = noop; // Used by .then()\n        /** @type {Boolean} */ this._running = false;\n        /** @type {Number} */ this._reversed = +setValue(reversed, timerDefaults.reversed);\n        /** @type {Number} */ this._reverse = this._reversed;\n        /** @type {Number} */ this._cancelled = 0;\n        /** @type {Boolean} */ this._alternate = setValue(alternate, timerDefaults.alternate);\n        /** @type {Renderable} */ this._prev = null;\n        /** @type {Renderable} */ this._next = null;\n        // Clock's parameters\n        /** @type {Number} */ this._elapsedTime = timerInitTime;\n        /** @type {Number} */ this._startTime = timerInitTime;\n        /** @type {Number} */ this._lastTime = timerInitTime;\n        /** @type {Number} */ this._fps = setValue(frameRate, timerDefaults.frameRate);\n        /** @type {Number} */ this._speed = setValue(playbackRate, timerDefaults.playbackRate);\n    }\n}\n/**\n * @param {TimerParams} [parameters]\n * @return {Timer}\n */ const createTimer = (parameters)=>new Timer(parameters, null, 0).init();\n/** @type {EasingFunction} */ const none = (t)=>t;\n// Cubic Bezier solver adapted from https://github.com/gre/bezier-ease © Gaëtan Renaudeau\n/**\n * @param  {Number} aT\n * @param  {Number} aA1\n * @param  {Number} aA2\n * @return {Number}\n */ const calcBezier = (aT, aA1, aA2)=>(((1 - 3 * aA2 + 3 * aA1) * aT + (3 * aA2 - 6 * aA1)) * aT + 3 * aA1) * aT;\n/**\n * @param  {Number} aX\n * @param  {Number} mX1\n * @param  {Number} mX2\n * @return {Number}\n */ const binarySubdivide = (aX, mX1, mX2)=>{\n    let aA = 0, aB = 1, currentX, currentT, i = 0;\n    do {\n        currentT = aA + (aB - aA) / 2;\n        currentX = calcBezier(currentT, mX1, mX2) - aX;\n        if (currentX > 0) {\n            aB = currentT;\n        } else {\n            aA = currentT;\n        }\n    }while (abs(currentX) > .0000001 && ++i < 100);\n    return currentT;\n};\n/**\n * @param  {Number} [mX1]\n * @param  {Number} [mY1]\n * @param  {Number} [mX2]\n * @param  {Number} [mY2]\n * @return {EasingFunction}\n */ const cubicBezier = function() {\n    let mX1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0.5, mY1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0.0, mX2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0.5, mY2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1.0;\n    return mX1 === mY1 && mX2 === mY2 ? none : (t)=>t === 0 || t === 1 ? t : calcBezier(binarySubdivide(t, mX1, mX2), mY1, mY2);\n};\n/**\n * Steps ease implementation https://developer.mozilla.org/fr/docs/Web/CSS/transition-timing-function\n * Only covers 'end' and 'start' jumpterms\n * @param  {Number} steps\n * @param  {Boolean} [fromStart]\n * @return {EasingFunction}\n */ const steps = function() {\n    let steps = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10, fromStart = arguments.length > 1 ? arguments[1] : void 0;\n    const roundMethod = fromStart ? ceil : floor;\n    return (t)=>roundMethod(clamp(t, 0, 1) * steps) * (1 / steps);\n};\n/**\n * Without parameters, the linear function creates a non-eased transition.\n * Parameters, if used, creates a piecewise linear easing by interpolating linearly between the specified points.\n * @param  {...String|Number} [args] - Points\n * @return {EasingFunction}\n */ const linear = function() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    const argsLength = args.length;\n    if (!argsLength) return none;\n    const totalPoints = argsLength - 1;\n    const firstArg = args[0];\n    const lastArg = args[totalPoints];\n    const xPoints = [\n        0\n    ];\n    const yPoints = [\n        parseNumber(firstArg)\n    ];\n    for(let i = 1; i < totalPoints; i++){\n        const arg = args[i];\n        const splitValue = isStr(arg) ? /** @type {String} */ arg.trim().split(\" \") : [\n            arg\n        ];\n        const value = splitValue[0];\n        const percent = splitValue[1];\n        xPoints.push(!isUnd(percent) ? parseNumber(percent) / 100 : i / totalPoints);\n        yPoints.push(parseNumber(value));\n    }\n    yPoints.push(parseNumber(lastArg));\n    xPoints.push(1);\n    return function easeLinear(t) {\n        for(let i = 1, l = xPoints.length; i < l; i++){\n            const currentX = xPoints[i];\n            if (t <= currentX) {\n                const prevX = xPoints[i - 1];\n                const prevY = yPoints[i - 1];\n                return prevY + (yPoints[i] - prevY) * (t - prevX) / (currentX - prevX);\n            }\n        }\n        return yPoints[yPoints.length - 1];\n    };\n};\n/**\n * Generate random steps\n * @param  {Number} [length] - The number of steps\n * @param  {Number} [randomness] - How strong the randomness is\n * @return {EasingFunction}\n */ const irregular = function() {\n    let length = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10, randomness = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n    const values = [\n        0\n    ];\n    const total = length - 1;\n    for(let i = 1; i < total; i++){\n        const previousValue = values[i - 1];\n        const spacing = i / total;\n        const segmentEnd = (i + 1) / total;\n        const randomVariation = spacing + (segmentEnd - spacing) * Math.random();\n        // Mix the even spacing and random variation based on the randomness parameter\n        const randomValue = spacing * (1 - randomness) + randomVariation * randomness;\n        values.push(clamp(randomValue, previousValue, 1));\n    }\n    values.push(1);\n    return linear(...values);\n};\n// Easing functions adapted from http://www.robertpenner.com/ease © Robert Penner\n/**\n * @callback PowerEasing\n * @param {Number|String} [power=1.675]\n * @return {EasingFunction}\n */ /**\n * @callback BackEasing\n * @param {Number|String} [overshoot=1.70158]\n * @return {EasingFunction}\n */ /**\n * @callback ElasticEasing\n * @param {Number|String} [amplitude=1]\n * @param {Number|String} [period=.3]\n * @return {EasingFunction}\n */ /**\n * @callback EaseFactory\n * @param {Number|String} [paramA]\n * @param {Number|String} [paramB]\n * @return {EasingFunction|Number}\n */ /** @typedef {PowerEasing|BackEasing|ElasticEasing} EasesFactory */ const halfPI = PI / 2;\nconst doublePI = PI * 2;\n/** @type {PowerEasing} */ const easeInPower = function() {\n    let p = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1.68;\n    return (t)=>pow(t, +p);\n};\n/** @type {Record<String, EasesFactory|EasingFunction>} */ const easeInFunctions = {\n    [emptyString]: easeInPower,\n    Quad: easeInPower(2),\n    Cubic: easeInPower(3),\n    Quart: easeInPower(4),\n    Quint: easeInPower(5),\n    /** @type {EasingFunction} */ Sine: (t)=>1 - cos(t * halfPI),\n    /** @type {EasingFunction} */ Circ: (t)=>1 - sqrt(1 - t * t),\n    /** @type {EasingFunction} */ Expo: (t)=>t ? pow(2, 10 * t - 10) : 0,\n    /** @type {EasingFunction} */ Bounce: (t)=>{\n        let pow2, b = 4;\n        while(t < ((pow2 = pow(2, --b)) - 1) / 11);\n        return 1 / pow(4, 3 - b) - 7.5625 * pow((pow2 * 3 - 2) / 22 - t, 2);\n    },\n    /** @type {BackEasing} */ Back: function() {\n        let overshoot = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1.70158;\n        return (t)=>(+overshoot + 1) * t * t * t - +overshoot * t * t;\n    },\n    /** @type {ElasticEasing} */ Elastic: function() {\n        let amplitude = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, period = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : .3;\n        const a = clamp(+amplitude, 1, 10);\n        const p = clamp(+period, minValue, 2);\n        const s = p / doublePI * asin(1 / a);\n        const e = doublePI / p;\n        return (t)=>t === 0 || t === 1 ? t : -a * pow(2, -10 * (1 - t)) * sin((1 - t - s) * e);\n    }\n};\n/**\n * @callback EaseType\n * @param {EasingFunction} Ease\n * @return {EasingFunction}\n */ /** @type {Record<String, EaseType>} */ const easeTypes = {\n    in: (easeIn)=>(t)=>easeIn(t),\n    out: (easeIn)=>(t)=>1 - easeIn(1 - t),\n    inOut: (easeIn)=>(t)=>t < .5 ? easeIn(t * 2) / 2 : 1 - easeIn(t * -2 + 2) / 2,\n    outIn: (easeIn)=>(t)=>t < .5 ? (1 - easeIn(1 - t * 2)) / 2 : (easeIn(t * 2 - 1) + 1) / 2\n};\n/**\n * @param  {String} string\n * @param  {Record<String, EasesFactory|EasingFunction>} easesFunctions\n * @param  {Object} easesLookups\n * @return {EasingFunction}\n */ const parseEaseString = (string, easesFunctions, easesLookups)=>{\n    if (easesLookups[string]) return easesLookups[string];\n    if (string.indexOf(\"(\") <= -1) {\n        const hasParams = easeTypes[string] || string.includes(\"Back\") || string.includes(\"Elastic\");\n        const parsedFn = /** @type {EasingFunction} */ hasParams ? /** @type {EasesFactory} */ easesFunctions[string]() : easesFunctions[string];\n        return parsedFn ? easesLookups[string] = parsedFn : none;\n    } else {\n        const split = string.slice(0, -1).split(\"(\");\n        const parsedFn = /** @type {EasesFactory} */ easesFunctions[split[0]];\n        return parsedFn ? easesLookups[string] = parsedFn(...split[1].split(\",\")) : none;\n    }\n};\n/**\n * @typedef  {Object} EasesFunctions\n * @property {typeof linear} linear\n * @property {typeof irregular} irregular\n * @property {typeof steps} steps\n * @property {typeof cubicBezier} cubicBezier\n * @property {PowerEasing} in\n * @property {PowerEasing} out\n * @property {PowerEasing} inOut\n * @property {PowerEasing} outIn\n * @property {EasingFunction} inQuad\n * @property {EasingFunction} outQuad\n * @property {EasingFunction} inOutQuad\n * @property {EasingFunction} outInQuad\n * @property {EasingFunction} inCubic\n * @property {EasingFunction} outCubic\n * @property {EasingFunction} inOutCubic\n * @property {EasingFunction} outInCubic\n * @property {EasingFunction} inQuart\n * @property {EasingFunction} outQuart\n * @property {EasingFunction} inOutQuart\n * @property {EasingFunction} outInQuart\n * @property {EasingFunction} inQuint\n * @property {EasingFunction} outQuint\n * @property {EasingFunction} inOutQuint\n * @property {EasingFunction} outInQuint\n * @property {EasingFunction} inSine\n * @property {EasingFunction} outSine\n * @property {EasingFunction} inOutSine\n * @property {EasingFunction} outInSine\n * @property {EasingFunction} inCirc\n * @property {EasingFunction} outCirc\n * @property {EasingFunction} inOutCirc\n * @property {EasingFunction} outInCirc\n * @property {EasingFunction} inExpo\n * @property {EasingFunction} outExpo\n * @property {EasingFunction} inOutExpo\n * @property {EasingFunction} outInExpo\n * @property {EasingFunction} inBounce\n * @property {EasingFunction} outBounce\n * @property {EasingFunction} inOutBounce\n * @property {EasingFunction} outInBounce\n * @property {BackEasing} inBack\n * @property {BackEasing} outBack\n * @property {BackEasing} inOutBack\n * @property {BackEasing} outInBack\n * @property {ElasticEasing} inElastic\n * @property {ElasticEasing} outElastic\n * @property {ElasticEasing} inOutElastic\n * @property {ElasticEasing} outInElastic\n */ const eases = /*#__PURE__*/ (()=>{\n    const list = {\n        linear,\n        irregular,\n        steps,\n        cubicBezier\n    };\n    for(let type in easeTypes){\n        for(let name in easeInFunctions){\n            const easeIn = easeInFunctions[name];\n            const easeType = easeTypes[type];\n            list[type + name] = /** @type {EasesFactory|EasingFunction} */ name === emptyString || name === \"Back\" || name === \"Elastic\" ? (a, b)=>easeType(/** @type {EasesFactory} */ easeIn(a, b)) : easeType(/** @type {EasingFunction} */ easeIn);\n        }\n    }\n    return /** @type {EasesFunctions} */ list;\n})();\n/** @type {Record<String, EasingFunction>} */ const JSEasesLookups = {\n    linear: none\n};\n/**\n * @param  {EasingParam} ease\n * @return {EasingFunction}\n */ const parseEasings = (ease)=>isFnc(ease) ? ease : isStr(ease) ? parseEaseString(/** @type {String} */ ease, eases, JSEasesLookups) : none;\nconst propertyNamesCache = {};\n/**\n * @param  {String} propertyName\n * @param  {Target} target\n * @param  {tweenTypes} tweenType\n * @return {String}\n */ const sanitizePropertyName = (propertyName, target, tweenType)=>{\n    if (tweenType === tweenTypes.TRANSFORM) {\n        const t = shortTransforms.get(propertyName);\n        return t ? t : propertyName;\n    } else if (tweenType === tweenTypes.CSS || // Handle special cases where properties like \"strokeDashoffset\" needs to be set as \"stroke-dashoffset\"\n    // but properties like \"baseFrequency\" should stay in lowerCamelCase\n    tweenType === tweenTypes.ATTRIBUTE && isSvg(target) && propertyName in /** @type {DOMTarget} */ target.style) {\n        const cachedPropertyName = propertyNamesCache[propertyName];\n        if (cachedPropertyName) {\n            return cachedPropertyName;\n        } else {\n            const lowerCaseName = propertyName ? toLowerCase(propertyName) : propertyName;\n            propertyNamesCache[propertyName] = lowerCaseName;\n            return lowerCaseName;\n        }\n    } else {\n        return propertyName;\n    }\n};\nconst angleUnitsMap = {\n    \"deg\": 1,\n    \"rad\": 180 / PI,\n    \"turn\": 360\n};\nconst convertedValuesCache = {};\n/**\n * @param  {DOMTarget} el\n * @param  {TweenDecomposedValue} decomposedValue\n * @param  {String} unit\n * @param  {Boolean} [force]\n * @return {TweenDecomposedValue}\n */ const convertValueUnit = function(el, decomposedValue, unit) {\n    let force = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;\n    const currentUnit = decomposedValue.u;\n    const currentNumber = decomposedValue.n;\n    if (decomposedValue.t === valueTypes.UNIT && currentUnit === unit) {\n        return decomposedValue;\n    }\n    const cachedKey = currentNumber + currentUnit + unit;\n    const cached = convertedValuesCache[cachedKey];\n    if (!isUnd(cached) && !force) {\n        decomposedValue.n = cached;\n    } else {\n        let convertedValue;\n        if (currentUnit in angleUnitsMap) {\n            convertedValue = currentNumber * angleUnitsMap[currentUnit] / angleUnitsMap[unit];\n        } else {\n            const baseline = 100;\n            const tempEl = /** @type {DOMTarget} */ el.cloneNode();\n            const parentNode = el.parentNode;\n            const parentEl = parentNode && parentNode !== doc ? parentNode : doc.body;\n            parentEl.appendChild(tempEl);\n            const elStyle = tempEl.style;\n            elStyle.width = baseline + currentUnit;\n            const currentUnitWidth = /** @type {HTMLElement} */ tempEl.offsetWidth || baseline;\n            elStyle.width = baseline + unit;\n            const newUnitWidth = /** @type {HTMLElement} */ tempEl.offsetWidth || baseline;\n            const factor = currentUnitWidth / newUnitWidth;\n            parentEl.removeChild(tempEl);\n            convertedValue = factor * currentNumber;\n        }\n        decomposedValue.n = convertedValue;\n        convertedValuesCache[cachedKey] = convertedValue;\n    }\n    decomposedValue.t === valueTypes.UNIT;\n    decomposedValue.u = unit;\n    return decomposedValue;\n};\n/**\n * @template {Renderable} T\n * @param {T} renderable\n * @return {T}\n */ const cleanInlineStyles = (renderable)=>{\n    // Allow cleanInlineStyles() to be called on timelines\n    if (renderable._hasChildren) {\n        forEachChildren(renderable, cleanInlineStyles, true);\n    } else {\n        const animation = /** @type {JSAnimation} */ renderable;\n        animation.pause();\n        forEachChildren(animation, (/** @type {Tween} */ tween)=>{\n            const tweenProperty = tween.property;\n            const tweenTarget = tween.target;\n            if (tweenTarget[isDomSymbol]) {\n                const targetStyle = /** @type {DOMTarget} */ tweenTarget.style;\n                const originalInlinedValue = animation._inlineStyles[tweenProperty];\n                if (tween._tweenType === tweenTypes.TRANSFORM) {\n                    const cachedTransforms = tweenTarget[transformsSymbol];\n                    if (isUnd(originalInlinedValue) || originalInlinedValue === emptyString) {\n                        delete cachedTransforms[tweenProperty];\n                    } else {\n                        cachedTransforms[tweenProperty] = originalInlinedValue;\n                    }\n                    if (tween._renderTransforms) {\n                        if (!Object.keys(cachedTransforms).length) {\n                            targetStyle.removeProperty(\"transform\");\n                        } else {\n                            let str = emptyString;\n                            for(let key in cachedTransforms){\n                                str += transformsFragmentStrings[key] + cachedTransforms[key] + \") \";\n                            }\n                            targetStyle.transform = str;\n                        }\n                    }\n                } else {\n                    if (isUnd(originalInlinedValue) || originalInlinedValue === emptyString) {\n                        targetStyle.removeProperty(tweenProperty);\n                    } else {\n                        targetStyle[tweenProperty] = originalInlinedValue;\n                    }\n                }\n                if (animation._tail === tween) {\n                    animation.targets.forEach((t)=>{\n                        if (t.getAttribute && t.getAttribute(\"style\") === emptyString) {\n                            t.removeAttribute(\"style\");\n                        }\n                    });\n                }\n            }\n        });\n    }\n    return renderable;\n};\n// Defines decomposed values target objects only once and mutate their properties later to avoid GC\n// TODO: Maybe move the objects creation to values.js and use the decompose function to create the base object\nconst fromTargetObject = createDecomposedValueTargetObject();\nconst toTargetObject = createDecomposedValueTargetObject();\nconst toFunctionStore = {\n    func: null\n};\nconst keyframesTargetArray = [\n    null\n];\nconst fastSetValuesArray = [\n    null,\n    null\n];\n/** @type {TweenKeyValue} */ const keyObjectTarget = {\n    to: null\n};\nlet tweenId = 0;\nlet keyframes;\n/** @type {TweenParamsOptions & TweenValues} */ let key;\n/**\n * @param {DurationKeyframes | PercentageKeyframes} keyframes\n * @param {AnimationParams} parameters\n * @return {AnimationParams}\n */ const generateKeyframes = (keyframes, parameters)=>{\n    /** @type {AnimationParams} */ const properties = {};\n    if (isArr(keyframes)) {\n        const propertyNames = [].concat(.../** @type {DurationKeyframes} */ keyframes.map((key)=>Object.keys(key))).filter(isKey);\n        for(let i = 0, l = propertyNames.length; i < l; i++){\n            const propName = propertyNames[i];\n            const propArray = /** @type {DurationKeyframes} */ keyframes.map((key)=>{\n                /** @type {TweenKeyValue} */ const newKey = {};\n                for(let p in key){\n                    const keyValue = /** @type {TweenPropValue} */ key[p];\n                    if (isKey(p)) {\n                        if (p === propName) {\n                            newKey.to = keyValue;\n                        }\n                    } else {\n                        newKey[p] = keyValue;\n                    }\n                }\n                return newKey;\n            });\n            properties[propName] = /** @type {ArraySyntaxValue} */ propArray;\n        }\n    } else {\n        const totalDuration = /** @type {Number} */ setValue(parameters.duration, globals.defaults.duration);\n        const keys = Object.keys(keyframes).map((key)=>{\n            return {\n                o: parseFloat(key) / 100,\n                p: keyframes[key]\n            };\n        }).sort((a, b)=>a.o - b.o);\n        keys.forEach((key)=>{\n            const offset = key.o;\n            const prop = key.p;\n            for(let name in prop){\n                if (isKey(name)) {\n                    let propArray = /** @type {Array} */ properties[name];\n                    if (!propArray) propArray = properties[name] = [];\n                    const duration = offset * totalDuration;\n                    let length = propArray.length;\n                    let prevKey = propArray[length - 1];\n                    const keyObj = {\n                        to: prop[name]\n                    };\n                    let durProgress = 0;\n                    for(let i = 0; i < length; i++){\n                        durProgress += propArray[i].duration;\n                    }\n                    if (length === 1) {\n                        keyObj.from = prevKey.to;\n                    }\n                    if (prop.ease) {\n                        keyObj.ease = prop.ease;\n                    }\n                    keyObj.duration = duration - (length ? durProgress : 0);\n                    propArray.push(keyObj);\n                }\n            }\n            return key;\n        });\n        for(let name in properties){\n            const propArray = /** @type {Array} */ properties[name];\n            let prevEase;\n            // let durProgress = 0\n            for(let i = 0, l = propArray.length; i < l; i++){\n                const prop = propArray[i];\n                // Emulate WAPPI easing parameter position\n                const currentEase = prop.ease;\n                prop.ease = prevEase ? prevEase : undefined;\n                prevEase = currentEase;\n            // durProgress += prop.duration;\n            // if (i === l - 1 && durProgress !== totalDuration) {\n            //   propArray.push({ from: prop.to, ease: prop.ease, duration: totalDuration - durProgress })\n            // }\n            }\n            if (!propArray[0].duration) {\n                propArray.shift();\n            }\n        }\n    }\n    return properties;\n};\nclass JSAnimation extends Timer {\n    /**\n   * @param  {Number} newDuration\n   * @return {this}\n   */ stretch(newDuration) {\n        const currentDuration = this.duration;\n        if (currentDuration === normalizeTime(newDuration)) return this;\n        const timeScale = newDuration / currentDuration;\n        // NOTE: Find a better way to handle the stretch of an animation after stretch = 0\n        forEachChildren(this, (/** @type {Tween} */ tween)=>{\n            // Rounding is necessary here to minimize floating point errors\n            tween._updateDuration = normalizeTime(tween._updateDuration * timeScale);\n            tween._changeDuration = normalizeTime(tween._changeDuration * timeScale);\n            tween._currentTime *= timeScale;\n            tween._startTime *= timeScale;\n            tween._absoluteStartTime *= timeScale;\n        });\n        return super.stretch(newDuration);\n    }\n    /**\n   * @return {this}\n   */ refresh() {\n        forEachChildren(this, (/** @type {Tween} */ tween)=>{\n            const ogValue = getOriginalAnimatableValue(tween.target, tween.property, tween._tweenType);\n            decomposeRawValue(ogValue, decomposedOriginalValue);\n            tween._fromNumbers = cloneArray(decomposedOriginalValue.d);\n            tween._fromNumber = decomposedOriginalValue.n;\n            if (tween._func) {\n                decomposeRawValue(tween._func(), toTargetObject);\n                tween._toNumbers = cloneArray(toTargetObject.d);\n                tween._strings = cloneArray(toTargetObject.s);\n                tween._toNumber = toTargetObject.n;\n            }\n        });\n        return this;\n    }\n    /**\n   * Cancel the animation and revert all the values affected by this animation to their original state\n   * @return {this}\n   */ revert() {\n        super.revert();\n        return cleanInlineStyles(this);\n    }\n    /**\n   * @param  {Callback<this>} [callback]\n   * @return {Promise}\n   */ then(callback) {\n        return super.then(callback);\n    }\n    /**\n   * @param {TargetsParam} targets\n   * @param {AnimationParams} parameters\n   * @param {Timeline} [parent]\n   * @param {Number} [parentPosition]\n   * @param {Boolean} [fastSet=false]\n   * @param {Number} [index=0]\n   * @param {Number} [length=0]\n   */ constructor(targets, parameters, parent, parentPosition, fastSet = false, index = 0, length = 0){\n        super(/** @type {TimerParams&AnimationParams} */ parameters, parent, parentPosition);\n        const parsedTargets = registerTargets(targets);\n        const targetsLength = parsedTargets.length;\n        // If the parameters object contains a \"keyframes\" property, convert all the keyframes values to regular properties\n        const kfParams = /** @type {AnimationParams} */ parameters.keyframes;\n        const params = /** @type {AnimationParams} */ kfParams ? mergeObjects(generateKeyframes(/** @type {DurationKeyframes} */ kfParams, parameters), parameters) : parameters;\n        const { delay, duration, ease, playbackEase, modifier, composition, onRender } = params;\n        const animDefaults = parent ? parent.defaults : globals.defaults;\n        const animaPlaybackEase = setValue(playbackEase, animDefaults.playbackEase);\n        const animEase = animaPlaybackEase ? parseEasings(animaPlaybackEase) : null;\n        const hasSpring = !isUnd(ease) && !isUnd(/** @type {Spring} */ ease.ease);\n        const tEasing = hasSpring ? /** @type {Spring} */ ease.ease : setValue(ease, animEase ? \"linear\" : animDefaults.ease);\n        const tDuration = hasSpring ? /** @type {Spring} */ ease.duration : setValue(duration, animDefaults.duration);\n        const tDelay = setValue(delay, animDefaults.delay);\n        const tModifier = modifier || animDefaults.modifier;\n        // If no composition is defined and the targets length is high (>= 1000) set the composition to 'none' (0) for faster tween creation\n        const tComposition = isUnd(composition) && targetsLength >= K ? compositionTypes.none : !isUnd(composition) ? composition : animDefaults.composition;\n        // TODO: Do not create an empty object until we know the animation will generate inline styles\n        const animInlineStyles = {};\n        // const absoluteOffsetTime = this._offset;\n        const absoluteOffsetTime = this._offset + (parent ? parent._offset : 0);\n        let iterationDuration = NaN;\n        let iterationDelay = NaN;\n        let animationAnimationLength = 0;\n        let shouldTriggerRender = 0;\n        for(let targetIndex = 0; targetIndex < targetsLength; targetIndex++){\n            const target = parsedTargets[targetIndex];\n            const ti = index || targetIndex;\n            const tl = length || targetsLength;\n            let lastTransformGroupIndex = NaN;\n            let lastTransformGroupLength = NaN;\n            for(let p in params){\n                if (isKey(p)) {\n                    const tweenType = getTweenType(target, p);\n                    const propName = sanitizePropertyName(p, target, tweenType);\n                    let propValue = params[p];\n                    const isPropValueArray = isArr(propValue);\n                    if (fastSet && !isPropValueArray) {\n                        fastSetValuesArray[0] = propValue;\n                        fastSetValuesArray[1] = propValue;\n                        propValue = fastSetValuesArray;\n                    }\n                    // TODO: Allow nested keyframes inside ObjectValue value (prop: { to: [.5, 1, .75, 2, 3] })\n                    // Normalize property values to valid keyframe syntax:\n                    // [x, y] to [{to: [x, y]}] or {to: x} to [{to: x}] or keep keys syntax [{}, {}, {}...]\n                    // const keyframes = isArr(propValue) ? propValue.length === 2 && !isObj(propValue[0]) ? [{ to: propValue }] : propValue : [propValue];\n                    if (isPropValueArray) {\n                        const arrayLength = /** @type {Array} */ propValue.length;\n                        const isNotObjectValue = !isObj(propValue[0]);\n                        // Convert [x, y] to [{to: [x, y]}]\n                        if (arrayLength === 2 && isNotObjectValue) {\n                            keyObjectTarget.to = /** @type {unknown} */ propValue;\n                            keyframesTargetArray[0] = keyObjectTarget;\n                            keyframes = keyframesTargetArray;\n                        // Convert [x, y, z] to [[x, y], z]\n                        } else if (arrayLength > 2 && isNotObjectValue) {\n                            keyframes = [];\n                            /** @type {Array.<Number>} */ propValue.forEach((v, i)=>{\n                                if (!i) {\n                                    fastSetValuesArray[0] = v;\n                                } else if (i === 1) {\n                                    fastSetValuesArray[1] = v;\n                                    keyframes.push(fastSetValuesArray);\n                                } else {\n                                    keyframes.push(v);\n                                }\n                            });\n                        } else {\n                            keyframes = /** @type {Array.<TweenKeyValue>} */ propValue;\n                        }\n                    } else {\n                        keyframesTargetArray[0] = propValue;\n                        keyframes = keyframesTargetArray;\n                    }\n                    let siblings = null;\n                    let prevTween = null;\n                    let firstTweenChangeStartTime = NaN;\n                    let lastTweenChangeEndTime = 0;\n                    let tweenIndex = 0;\n                    for(let l = keyframes.length; tweenIndex < l; tweenIndex++){\n                        const keyframe = keyframes[tweenIndex];\n                        if (isObj(keyframe)) {\n                            key = keyframe;\n                        } else {\n                            keyObjectTarget.to = /** @type {TweenParamValue} */ keyframe;\n                            key = keyObjectTarget;\n                        }\n                        toFunctionStore.func = null;\n                        const computedToValue = getFunctionValue(key.to, target, ti, tl, toFunctionStore);\n                        let tweenToValue;\n                        // Allows function based values to return an object syntax value ({to: v})\n                        if (isObj(computedToValue) && !isUnd(computedToValue.to)) {\n                            key = computedToValue;\n                            tweenToValue = computedToValue.to;\n                        } else {\n                            tweenToValue = computedToValue;\n                        }\n                        const tweenFromValue = getFunctionValue(key.from, target, ti, tl);\n                        const keyEasing = key.ease;\n                        const hasSpring = !isUnd(keyEasing) && !isUnd(/** @type {Spring} */ keyEasing.ease);\n                        // Easing are treated differently and don't accept function based value to prevent having to pass a function wrapper that returns an other function all the time\n                        const tweenEasing = hasSpring ? /** @type {Spring} */ keyEasing.ease : keyEasing || tEasing;\n                        // Calculate default individual keyframe duration by dividing the tl of keyframes\n                        const tweenDuration = hasSpring ? /** @type {Spring} */ keyEasing.duration : getFunctionValue(setValue(key.duration, l > 1 ? getFunctionValue(tDuration, target, ti, tl) / l : tDuration), target, ti, tl);\n                        // Default delay value should only be applied to the first tween\n                        const tweenDelay = getFunctionValue(setValue(key.delay, !tweenIndex ? tDelay : 0), target, ti, tl);\n                        const computedComposition = getFunctionValue(setValue(key.composition, tComposition), target, ti, tl);\n                        const tweenComposition = isNum(computedComposition) ? computedComposition : compositionTypes[computedComposition];\n                        // Modifiers are treated differently and don't accept function based value to prevent having to pass a function wrapper\n                        const tweenModifier = key.modifier || tModifier;\n                        const hasFromvalue = !isUnd(tweenFromValue);\n                        const hasToValue = !isUnd(tweenToValue);\n                        const isFromToArray = isArr(tweenToValue);\n                        const isFromToValue = isFromToArray || hasFromvalue && hasToValue;\n                        const tweenStartTime = prevTween ? lastTweenChangeEndTime + tweenDelay : tweenDelay;\n                        const absoluteStartTime = absoluteOffsetTime + tweenStartTime;\n                        // Force a onRender callback if the animation contains at least one from value and autoplay is set to false\n                        if (!shouldTriggerRender && (hasFromvalue || isFromToArray)) shouldTriggerRender = 1;\n                        let prevSibling = prevTween;\n                        if (tweenComposition !== compositionTypes.none) {\n                            if (!siblings) siblings = getTweenSiblings(target, propName);\n                            let nextSibling = siblings._head;\n                            // Iterate trough all the next siblings until we find a sibling with an equal or inferior start time\n                            while(nextSibling && !nextSibling._isOverridden && nextSibling._absoluteStartTime <= absoluteStartTime){\n                                prevSibling = nextSibling;\n                                nextSibling = nextSibling._nextRep;\n                                // Overrides all the next siblings if the next sibling starts at the same time of after as the new tween start time\n                                if (nextSibling && nextSibling._absoluteStartTime >= absoluteStartTime) {\n                                    while(nextSibling){\n                                        overrideTween(nextSibling);\n                                        // This will ends both the current while loop and the upper one once all the next sibllings have been overriden\n                                        nextSibling = nextSibling._nextRep;\n                                    }\n                                }\n                            }\n                        }\n                        // Decompose values\n                        if (isFromToValue) {\n                            decomposeRawValue(isFromToArray ? getFunctionValue(tweenToValue[0], target, ti, tl) : tweenFromValue, fromTargetObject);\n                            decomposeRawValue(isFromToArray ? getFunctionValue(tweenToValue[1], target, ti, tl, toFunctionStore) : tweenToValue, toTargetObject);\n                            if (fromTargetObject.t === valueTypes.NUMBER) {\n                                if (prevSibling) {\n                                    if (prevSibling._valueType === valueTypes.UNIT) {\n                                        fromTargetObject.t = valueTypes.UNIT;\n                                        fromTargetObject.u = prevSibling._unit;\n                                    }\n                                } else {\n                                    decomposeRawValue(getOriginalAnimatableValue(target, propName, tweenType, animInlineStyles), decomposedOriginalValue);\n                                    if (decomposedOriginalValue.t === valueTypes.UNIT) {\n                                        fromTargetObject.t = valueTypes.UNIT;\n                                        fromTargetObject.u = decomposedOriginalValue.u;\n                                    }\n                                }\n                            }\n                        } else {\n                            if (hasToValue) {\n                                decomposeRawValue(tweenToValue, toTargetObject);\n                            } else {\n                                if (prevTween) {\n                                    decomposeTweenValue(prevTween, toTargetObject);\n                                } else {\n                                    // No need to get and parse the original value if the tween is part of a timeline and has a previous sibling part of the same timeline\n                                    decomposeRawValue(parent && prevSibling && prevSibling.parent.parent === parent ? prevSibling._value : getOriginalAnimatableValue(target, propName, tweenType, animInlineStyles), toTargetObject);\n                                }\n                            }\n                            if (hasFromvalue) {\n                                decomposeRawValue(tweenFromValue, fromTargetObject);\n                            } else {\n                                if (prevTween) {\n                                    decomposeTweenValue(prevTween, fromTargetObject);\n                                } else {\n                                    decomposeRawValue(parent && prevSibling && prevSibling.parent.parent === parent ? prevSibling._value : // No need to get and parse the original value if the tween is part of a timeline and has a previous sibling part of the same timeline\n                                    getOriginalAnimatableValue(target, propName, tweenType, animInlineStyles), fromTargetObject);\n                                }\n                            }\n                        }\n                        // Apply operators\n                        if (fromTargetObject.o) {\n                            fromTargetObject.n = getRelativeValue(!prevSibling ? decomposeRawValue(getOriginalAnimatableValue(target, propName, tweenType, animInlineStyles), decomposedOriginalValue).n : prevSibling._toNumber, fromTargetObject.n, fromTargetObject.o);\n                        }\n                        if (toTargetObject.o) {\n                            toTargetObject.n = getRelativeValue(fromTargetObject.n, toTargetObject.n, toTargetObject.o);\n                        }\n                        // Values omogenisation in cases of type difference between \"from\" and \"to\"\n                        if (fromTargetObject.t !== toTargetObject.t) {\n                            if (fromTargetObject.t === valueTypes.COMPLEX || toTargetObject.t === valueTypes.COMPLEX) {\n                                const complexValue = fromTargetObject.t === valueTypes.COMPLEX ? fromTargetObject : toTargetObject;\n                                const notComplexValue = fromTargetObject.t === valueTypes.COMPLEX ? toTargetObject : fromTargetObject;\n                                notComplexValue.t = valueTypes.COMPLEX;\n                                notComplexValue.s = cloneArray(complexValue.s);\n                                notComplexValue.d = complexValue.d.map(()=>notComplexValue.n);\n                            } else if (fromTargetObject.t === valueTypes.UNIT || toTargetObject.t === valueTypes.UNIT) {\n                                const unitValue = fromTargetObject.t === valueTypes.UNIT ? fromTargetObject : toTargetObject;\n                                const notUnitValue = fromTargetObject.t === valueTypes.UNIT ? toTargetObject : fromTargetObject;\n                                notUnitValue.t = valueTypes.UNIT;\n                                notUnitValue.u = unitValue.u;\n                            } else if (fromTargetObject.t === valueTypes.COLOR || toTargetObject.t === valueTypes.COLOR) {\n                                const colorValue = fromTargetObject.t === valueTypes.COLOR ? fromTargetObject : toTargetObject;\n                                const notColorValue = fromTargetObject.t === valueTypes.COLOR ? toTargetObject : fromTargetObject;\n                                notColorValue.t = valueTypes.COLOR;\n                                notColorValue.s = colorValue.s;\n                                notColorValue.d = [\n                                    0,\n                                    0,\n                                    0,\n                                    1\n                                ];\n                            }\n                        }\n                        // Unit conversion\n                        if (fromTargetObject.u !== toTargetObject.u) {\n                            let valueToConvert = toTargetObject.u ? fromTargetObject : toTargetObject;\n                            valueToConvert = convertValueUnit(/** @type {DOMTarget} */ target, valueToConvert, toTargetObject.u ? toTargetObject.u : fromTargetObject.u, false);\n                        // TODO:\n                        // convertValueUnit(target, to.u ? from : to, to.u ? to.u : from.u);\n                        }\n                        // Fill in non existing complex values\n                        if (toTargetObject.d && fromTargetObject.d && toTargetObject.d.length !== fromTargetObject.d.length) {\n                            const longestValue = fromTargetObject.d.length > toTargetObject.d.length ? fromTargetObject : toTargetObject;\n                            const shortestValue = longestValue === fromTargetObject ? toTargetObject : fromTargetObject;\n                            // TODO: Check if n should be used instead of 0 for default complex values\n                            shortestValue.d = longestValue.d.map((_, i)=>isUnd(shortestValue.d[i]) ? 0 : shortestValue.d[i]);\n                            shortestValue.s = cloneArray(longestValue.s);\n                        }\n                        // Tween factory\n                        // Rounding is necessary here to minimize floating point errors\n                        const tweenUpdateDuration = round(+tweenDuration || minValue, 12);\n                        /** @type {Tween} */ const tween = {\n                            parent: this,\n                            id: tweenId++,\n                            property: propName,\n                            target: target,\n                            _value: null,\n                            _func: toFunctionStore.func,\n                            _ease: parseEasings(tweenEasing),\n                            _fromNumbers: cloneArray(fromTargetObject.d),\n                            _toNumbers: cloneArray(toTargetObject.d),\n                            _strings: cloneArray(toTargetObject.s),\n                            _fromNumber: fromTargetObject.n,\n                            _toNumber: toTargetObject.n,\n                            _numbers: cloneArray(fromTargetObject.d),\n                            _number: fromTargetObject.n,\n                            _unit: toTargetObject.u,\n                            _modifier: tweenModifier,\n                            _currentTime: 0,\n                            _startTime: tweenStartTime,\n                            _delay: +tweenDelay,\n                            _updateDuration: tweenUpdateDuration,\n                            _changeDuration: tweenUpdateDuration,\n                            _absoluteStartTime: absoluteStartTime,\n                            // NOTE: Investigate bit packing to stores ENUM / BOOL\n                            _tweenType: tweenType,\n                            _valueType: toTargetObject.t,\n                            _composition: tweenComposition,\n                            _isOverlapped: 0,\n                            _isOverridden: 0,\n                            _renderTransforms: 0,\n                            _prevRep: null,\n                            _nextRep: null,\n                            _prevAdd: null,\n                            _nextAdd: null,\n                            _prev: null,\n                            _next: null\n                        };\n                        if (tweenComposition !== compositionTypes.none) {\n                            composeTween(tween, siblings);\n                        }\n                        if (isNaN(firstTweenChangeStartTime)) {\n                            firstTweenChangeStartTime = tween._startTime;\n                        }\n                        // Rounding is necessary here to minimize floating point errors\n                        lastTweenChangeEndTime = round(tweenStartTime + tweenUpdateDuration, 12);\n                        prevTween = tween;\n                        animationAnimationLength++;\n                        addChild(this, tween);\n                    }\n                    // Update animation timings with the added tweens properties\n                    if (isNaN(iterationDelay) || firstTweenChangeStartTime < iterationDelay) {\n                        iterationDelay = firstTweenChangeStartTime;\n                    }\n                    if (isNaN(iterationDuration) || lastTweenChangeEndTime > iterationDuration) {\n                        iterationDuration = lastTweenChangeEndTime;\n                    }\n                    // TODO: Find a way to inline tween._renderTransforms = 1 here\n                    if (tweenType === tweenTypes.TRANSFORM) {\n                        lastTransformGroupIndex = animationAnimationLength - tweenIndex;\n                        lastTransformGroupLength = animationAnimationLength;\n                    }\n                }\n            }\n            // Set _renderTransforms to last transform property to correctly render the transforms list\n            if (!isNaN(lastTransformGroupIndex)) {\n                let i = 0;\n                forEachChildren(this, (/** @type {Tween} */ tween)=>{\n                    if (i >= lastTransformGroupIndex && i < lastTransformGroupLength) {\n                        tween._renderTransforms = 1;\n                        if (tween._composition === compositionTypes.blend) {\n                            forEachChildren(additive.animation, (/** @type {Tween} */ additiveTween)=>{\n                                if (additiveTween.id === tween.id) {\n                                    additiveTween._renderTransforms = 1;\n                                }\n                            });\n                        }\n                    }\n                    i++;\n                });\n            }\n        }\n        if (!targetsLength) {\n            console.warn(\"No target found. Make sure the element you're trying to animate is accessible before creating your animation.\");\n        }\n        if (iterationDelay) {\n            forEachChildren(this, (/** @type {Tween} */ tween)=>{\n                // If (startTime - delay) equals 0, this means the tween is at the begining of the animation so we need to trim the delay too\n                if (!(tween._startTime - tween._delay)) {\n                    tween._delay -= iterationDelay;\n                }\n                tween._startTime -= iterationDelay;\n            });\n            iterationDuration -= iterationDelay;\n        } else {\n            iterationDelay = 0;\n        }\n        // Prevents iterationDuration to be NaN if no valid animatable props have been provided\n        // Prevents _iterationCount to be NaN if no valid animatable props have been provided\n        if (!iterationDuration) {\n            iterationDuration = minValue;\n            this.iterationCount = 0;\n        }\n        /** @type {TargetsArray} */ this.targets = parsedTargets;\n        /** @type {Number} */ this.duration = iterationDuration === minValue ? minValue : clampInfinity((iterationDuration + this._loopDelay) * this.iterationCount - this._loopDelay) || minValue;\n        /** @type {Callback<this>} */ this.onRender = onRender || animDefaults.onRender;\n        /** @type {EasingFunction} */ this._ease = animEase;\n        /** @type {Number} */ this._delay = iterationDelay;\n        // NOTE: I'm keeping delay values separated from offsets in timelines because delays can override previous tweens and it could be confusing to debug a timeline with overridden tweens and no associated visible delays.\n        // this._delay = parent ? 0 : iterationDelay;\n        // this._offset += parent ? iterationDelay : 0;\n        /** @type {Number} */ this.iterationDuration = iterationDuration;\n        /** @type {{}} */ this._inlineStyles = animInlineStyles;\n        if (!this._autoplay && shouldTriggerRender) this.onRender(this);\n    }\n}\n/**\n * @param {TargetsParam} targets\n * @param {AnimationParams} parameters\n * @return {JSAnimation}\n */ const animate = (targets, parameters)=>new JSAnimation(targets, parameters, null, 0, false).init();\n/**\n * Converts an easing function into a valid CSS linear() timing function string\n * @param {EasingFunction} fn\n * @param {number} [samples=100]\n * @returns {string} CSS linear() timing function\n */ const easingToLinear = function(fn) {\n    let samples = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 100;\n    const points = [];\n    for(let i = 0; i <= samples; i++)points.push(fn(i / samples));\n    return \"linear(\".concat(points.join(\", \"), \")\");\n};\nconst WAAPIEasesLookups = {\n    in: \"ease-in\",\n    out: \"ease-out\",\n    inOut: \"ease-in-out\"\n};\nconst WAAPIeases = /*#__PURE__*/ (()=>{\n    const list = {};\n    for(let type in easeTypes)list[type] = (a)=>easeTypes[type](easeInPower(a));\n    return /** @type {Record<String, EasingFunction>} */ list;\n})();\n/**\n * @param  {EasingParam} ease\n * @return {String}\n */ const parseWAAPIEasing = (ease)=>{\n    let parsedEase = WAAPIEasesLookups[ease];\n    if (parsedEase) return parsedEase;\n    parsedEase = \"linear\";\n    if (isStr(ease)) {\n        if (stringStartsWith(ease, \"linear\") || stringStartsWith(ease, \"cubic-\") || stringStartsWith(ease, \"steps\") || stringStartsWith(ease, \"ease\")) {\n            parsedEase = ease;\n        } else if (stringStartsWith(ease, \"cubicB\")) {\n            parsedEase = toLowerCase(ease);\n        } else {\n            const parsed = parseEaseString(ease, WAAPIeases, WAAPIEasesLookups);\n            if (isFnc(parsed)) parsedEase = parsed === none ? \"linear\" : easingToLinear(parsed);\n        }\n        WAAPIEasesLookups[ease] = parsedEase;\n    } else if (isFnc(ease)) {\n        const easing = easingToLinear(ease);\n        if (easing) parsedEase = easing;\n    } else if (/** @type {Spring} */ ease.ease) {\n        parsedEase = easingToLinear(/** @type {Spring} */ ease.ease);\n    }\n    return parsedEase;\n};\n/**\n * @typedef {String|Number|Array<String>|Array<Number>} WAAPITweenValue\n */ /**\n * @callback WAAPIFunctionvalue\n * @param {DOMTarget} target - The animated target\n * @param {Number} index - The target index\n * @param {Number} length - The total number of animated targets\n * @return {WAAPITweenValue}\n */ /**\n * @typedef {WAAPITweenValue|WAAPIFunctionvalue|Array<String|Number|WAAPIFunctionvalue>} WAAPIKeyframeValue\n */ /**\n * @typedef {(animation: WAAPIAnimation) => void} WAAPICallback\n */ /**\n * @typedef {Object} WAAPITweenOptions\n * @property {WAAPIKeyframeValue} [to]\n * @property {WAAPIKeyframeValue} [from]\n * @property {Number|WAAPIFunctionvalue} [duration]\n * @property {Number|WAAPIFunctionvalue} [delay]\n * @property {EasingParam} [ease]\n * @property {CompositeOperation} [composition]\n */ /**\n * @typedef {Object} WAAPIAnimationOptions\n * @property {Number|Boolean} [loop]\n * @property {Boolean} [Reversed]\n * @property {Boolean} [Alternate]\n * @property {Boolean|ScrollObserver} [autoplay]\n * @property {Number} [playbackRate]\n * @property {Number|WAAPIFunctionvalue} [duration]\n * @property {Number|WAAPIFunctionvalue} [delay]\n * @property {EasingParam} [ease]\n * @property {CompositeOperation} [composition]\n * @property {WAAPICallback} [onComplete]\n */ /**\n * @typedef {Record<String, WAAPIKeyframeValue | WAAPIAnimationOptions | Boolean | ScrollObserver | WAAPICallback | EasingParam | WAAPITweenOptions> & WAAPIAnimationOptions} WAAPIAnimationParams\n */ const transformsShorthands = [\n    \"x\",\n    \"y\",\n    \"z\"\n];\nconst commonDefaultPXProperties = [\n    \"perspective\",\n    \"width\",\n    \"height\",\n    \"margin\",\n    \"padding\",\n    \"top\",\n    \"right\",\n    \"bottom\",\n    \"left\",\n    \"borderWidth\",\n    \"fontSize\",\n    \"borderRadius\",\n    ...transformsShorthands\n];\nconst validIndividualTransforms = [\n    ...transformsShorthands,\n    ...validTransforms.filter((t)=>[\n            \"X\",\n            \"Y\",\n            \"Z\"\n        ].some((axis)=>t.endsWith(axis)))\n];\n// Setting it to true in case CSS.registerProperty is not supported will automatically skip the registration and fallback to no animation\nlet transformsPropertiesRegistered = isBrowser && (isUnd(CSS) || !Object.hasOwnProperty.call(CSS, \"registerProperty\"));\nconst registerTransformsProperties = ()=>{\n    if (transformsPropertiesRegistered) return;\n    validTransforms.forEach((t)=>{\n        const isSkew = stringStartsWith(t, \"skew\");\n        const isScale = stringStartsWith(t, \"scale\");\n        const isRotate = stringStartsWith(t, \"rotate\");\n        const isTranslate = stringStartsWith(t, \"translate\");\n        const isAngle = isRotate || isSkew;\n        const syntax = isAngle ? \"<angle>\" : isScale ? \"<number>\" : isTranslate ? \"<length-percentage>\" : \"*\";\n        try {\n            CSS.registerProperty({\n                name: \"--\" + t,\n                syntax,\n                inherits: false,\n                initialValue: isTranslate ? \"0px\" : isAngle ? \"0deg\" : isScale ? \"1\" : \"0\"\n            });\n        } catch (e) {}\n    });\n    transformsPropertiesRegistered = true;\n};\nconst WAAPIAnimationsLookups = {\n    _head: null,\n    _tail: null\n};\n/**\n * @param {DOMTarget} $el\n * @param {String} [property]\n * @param {WAAPIAnimation} [parent]\n */ const removeWAAPIAnimation = ($el, property, parent)=>{\n    let nextLookup = WAAPIAnimationsLookups._head;\n    while(nextLookup){\n        const next = nextLookup._next;\n        const matchTarget = nextLookup.$el === $el;\n        const matchProperty = !property || nextLookup.property === property;\n        const matchParent = !parent || nextLookup.parent === parent;\n        if (matchTarget && matchProperty && matchParent) {\n            const anim = nextLookup.animation;\n            try {\n                anim.commitStyles();\n            } catch (e) {}\n            anim.cancel();\n            removeChild(WAAPIAnimationsLookups, nextLookup);\n            const lookupParent = nextLookup.parent;\n            if (lookupParent) {\n                lookupParent._completed++;\n                if (lookupParent.animations.length === lookupParent._completed) {\n                    lookupParent.completed = true;\n                    if (!lookupParent.muteCallbacks) {\n                        lookupParent.paused = true;\n                        lookupParent.onComplete(lookupParent);\n                        lookupParent._resolve(lookupParent);\n                    }\n                }\n            }\n        }\n        nextLookup = next;\n    }\n};\n/**\n * @param {WAAPIAnimation} parent\n * @param {DOMTarget} $el\n * @param {String} property\n * @param {PropertyIndexedKeyframes} keyframes\n * @param {KeyframeAnimationOptions} params\n * @retun {Animation}\n */ const addWAAPIAnimation = (parent, $el, property, keyframes, params)=>{\n    const animation = $el.animate(keyframes, params);\n    const animTotalDuration = params.delay + +params.duration * params.iterations;\n    animation.playbackRate = parent._speed;\n    if (parent.paused) animation.pause();\n    if (parent.duration < animTotalDuration) {\n        parent.duration = animTotalDuration;\n        parent.controlAnimation = animation;\n    }\n    parent.animations.push(animation);\n    removeWAAPIAnimation($el, property);\n    addChild(WAAPIAnimationsLookups, {\n        parent,\n        animation,\n        $el,\n        property,\n        _next: null,\n        _prev: null\n    });\n    const handleRemove = ()=>{\n        removeWAAPIAnimation($el, property, parent);\n    };\n    animation.onremove = handleRemove;\n    animation.onfinish = handleRemove;\n    return animation;\n};\n/**\n * @param  {String} propName\n * @param  {WAAPIKeyframeValue} value\n * @param  {DOMTarget} $el\n * @param  {Number} i\n * @param  {Number} targetsLength\n * @return {String}\n */ const normalizeTweenValue = (propName, value, $el, i, targetsLength)=>{\n    let v = getFunctionValue(/** @type {any} */ value, $el, i, targetsLength);\n    if (!isNum(v)) return v;\n    if (commonDefaultPXProperties.includes(propName) || stringStartsWith(propName, \"translate\")) return \"\".concat(v, \"px\");\n    if (stringStartsWith(propName, \"rotate\") || stringStartsWith(propName, \"skew\")) return \"\".concat(v, \"deg\");\n    return \"\".concat(v);\n};\n/**\n * @param  {DOMTarget} $el\n * @param  {String} propName\n * @param  {WAAPIKeyframeValue} from\n * @param  {WAAPIKeyframeValue} to\n * @param  {Number} i\n * @param  {Number} targetsLength\n * @return {WAAPITweenValue}\n */ const parseIndividualTweenValue = ($el, propName, from, to, i, targetsLength)=>{\n    /** @type {WAAPITweenValue} */ let tweenValue = \"0\";\n    const computedTo = !isUnd(to) ? normalizeTweenValue(propName, to, $el, i, targetsLength) : getComputedStyle($el)[propName];\n    if (!isUnd(from)) {\n        const computedFrom = normalizeTweenValue(propName, from, $el, i, targetsLength);\n        tweenValue = [\n            computedFrom,\n            computedTo\n        ];\n    } else {\n        tweenValue = isArr(to) ? to.map((/** @type {any} */ v)=>normalizeTweenValue(propName, v, $el, i, targetsLength)) : computedTo;\n    }\n    return tweenValue;\n};\nclass WAAPIAnimation {\n    /**\n   * @callback forEachCallback\n   * @param {globalThis.Animation} animation\n   */ /**\n   * @param  {forEachCallback|String} callback\n   * @return {this}\n   */ forEach(callback) {\n        const cb = isStr(callback) ? (a)=>a[callback]() : callback;\n        this.animations.forEach(cb);\n        return this;\n    }\n    get speed() {\n        return this._speed;\n    }\n    /** @param {Number} speed */ set speed(speed) {\n        this._speed = +speed;\n        this.forEach((anim)=>anim.playbackRate = speed);\n    }\n    get currentTime() {\n        const controlAnimation = this.controlAnimation;\n        const timeScale = globals.timeScale;\n        return this.completed ? this.duration : controlAnimation ? +controlAnimation.currentTime * (timeScale === 1 ? 1 : timeScale) : 0;\n    }\n    /** @param {Number} time */ set currentTime(time) {\n        const t = time * (globals.timeScale === 1 ? 1 : K);\n        this.forEach((anim)=>{\n            // Make sure the animation playState is not 'paused' in order to properly trigger an onfinish callback.\n            // The \"paused\" play state supersedes the \"finished\" play state; if the animation is both paused and finished, the \"paused\" state is the one that will be reported.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Animation/finish_event\n            if (t >= this.duration) anim.play();\n            anim.currentTime = t;\n        });\n    }\n    get progress() {\n        return this.currentTime / this.duration;\n    }\n    /** @param {Number} progress */ set progress(progress) {\n        this.forEach((anim)=>anim.currentTime = progress * this.duration || 0);\n    }\n    resume() {\n        if (!this.paused) return this;\n        this.paused = false;\n        // TODO: Store the current time, and seek back to the last position\n        return this.forEach(\"play\");\n    }\n    pause() {\n        if (this.paused) return this;\n        this.paused = true;\n        return this.forEach(\"pause\");\n    }\n    alternate() {\n        this.reversed = !this.reversed;\n        this.forEach(\"reverse\");\n        if (this.paused) this.forEach(\"pause\");\n        return this;\n    }\n    play() {\n        if (this.reversed) this.alternate();\n        return this.resume();\n    }\n    reverse() {\n        if (!this.reversed) this.alternate();\n        return this.resume();\n    }\n    /**\n  * @param {Number} time\n  * @param {Boolean} muteCallbacks\n  */ seek(time) {\n        let muteCallbacks = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        if (muteCallbacks) this.muteCallbacks = true;\n        if (time < this.duration) this.completed = false;\n        this.currentTime = time;\n        this.muteCallbacks = false;\n        if (this.paused) this.pause();\n        return this;\n    }\n    restart() {\n        this.completed = false;\n        return this.seek(0, true).resume();\n    }\n    commitStyles() {\n        return this.forEach(\"commitStyles\");\n    }\n    complete() {\n        return this.seek(this.duration);\n    }\n    cancel() {\n        this.forEach(\"cancel\");\n        return this.pause();\n    }\n    revert() {\n        this.cancel();\n        this.targets.forEach(($el, i)=>$el.setAttribute(\"style\", this._inlineStyles[i]));\n        return this;\n    }\n    /**\n   * @param  {WAAPICallback} [callback]\n   * @return {Promise}\n   */ then() {\n        let callback = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : noop;\n        const then = this.then;\n        const onResolve = ()=>{\n            this.then = null;\n            callback(this);\n            this.then = then;\n            this._resolve = noop;\n        };\n        return new Promise((r)=>{\n            this._resolve = ()=>r(onResolve());\n            if (this.completed) this._resolve();\n            return this;\n        });\n    }\n    /**\n * @param {DOMTargetsParam} targets\n * @param {WAAPIAnimationParams} params\n */ constructor(targets, params){\n        if (globals.scope) globals.scope.revertibles.push(this);\n        registerTransformsProperties();\n        const parsedTargets = registerTargets(targets);\n        const targetsLength = parsedTargets.length;\n        if (!targetsLength) {\n            console.warn(\"No target found. Make sure the element you're trying to animate is accessible before creating your animation.\");\n        }\n        const ease = setValue(params.ease, parseWAAPIEasing(globals.defaults.ease));\n        const spring = /** @type {Spring} */ ease.ease && ease;\n        const autoplay = setValue(params.autoplay, globals.defaults.autoplay);\n        const scroll = autoplay && /** @type {ScrollObserver} */ autoplay.link ? autoplay : false;\n        const alternate = params.alternate && /** @type {Boolean} */ params.alternate === true;\n        const reversed = params.reversed && /** @type {Boolean} */ params.reversed === true;\n        const loop = setValue(params.loop, globals.defaults.loop);\n        const iterations = /** @type {Number} */ loop === true || loop === Infinity ? Infinity : isNum(loop) ? loop + 1 : 1;\n        /** @type {PlaybackDirection} */ const direction = alternate ? reversed ? \"alternate-reverse\" : \"alternate\" : reversed ? \"reverse\" : \"normal\";\n        /** @type {FillMode} */ const fill = \"forwards\";\n        /** @type {String} */ const easing = parseWAAPIEasing(ease);\n        const timeScale = globals.timeScale === 1 ? 1 : K;\n        /** @type {DOMTargetsArray}] */ this.targets = parsedTargets;\n        /** @type {Array<globalThis.Animation>}] */ this.animations = [];\n        /** @type {globalThis.Animation}] */ this.controlAnimation = null;\n        /** @type {Callback<this>} */ this.onComplete = params.onComplete || noop;\n        /** @type {Number} */ this.duration = 0;\n        /** @type {Boolean} */ this.muteCallbacks = false;\n        /** @type {Boolean} */ this.completed = false;\n        /** @type {Boolean} */ this.paused = !autoplay || scroll !== false;\n        /** @type {Boolean} */ this.reversed = reversed;\n        /** @type {Boolean|ScrollObserver} */ this.autoplay = autoplay;\n        /** @type {Number} */ this._speed = setValue(params.playbackRate, globals.defaults.playbackRate);\n        /** @type {Function} */ this._resolve = noop; // Used by .then()\n        /** @type {Number} */ this._completed = 0;\n        /** @type {Array<Object>}] */ this._inlineStyles = parsedTargets.map(($el)=>$el.getAttribute(\"style\"));\n        parsedTargets.forEach(($el, i)=>{\n            const cachedTransforms = $el[transformsSymbol];\n            const hasIndividualTransforms = validIndividualTransforms.some((t)=>params.hasOwnProperty(t));\n            /** @type {Number} */ const duration = (spring ? /** @type {Spring} */ spring.duration : getFunctionValue(setValue(params.duration, globals.defaults.duration), $el, i, targetsLength)) * timeScale;\n            /** @type {Number} */ const delay = getFunctionValue(setValue(params.delay, globals.defaults.delay), $el, i, targetsLength) * timeScale;\n            /** @type {CompositeOperation} */ const composite = /** @type {CompositeOperation} */ setValue(params.composition, \"replace\");\n            for(let name in params){\n                if (!isKey(name)) continue;\n                /** @type {PropertyIndexedKeyframes} */ const keyframes = {};\n                /** @type {KeyframeAnimationOptions} */ const tweenParams = {\n                    iterations,\n                    direction,\n                    fill,\n                    easing,\n                    duration,\n                    delay,\n                    composite\n                };\n                const propertyValue = params[name];\n                const individualTransformProperty = hasIndividualTransforms ? validTransforms.includes(name) ? name : shortTransforms.get(name) : false;\n                let parsedPropertyValue;\n                if (isObj(propertyValue)) {\n                    const tweenOptions = /** @type {WAAPITweenOptions} */ propertyValue;\n                    const tweenOptionsEase = setValue(tweenOptions.ease, ease);\n                    const tweenOptionsSpring = /** @type {Spring} */ tweenOptionsEase.ease && tweenOptionsEase;\n                    const to = /** @type {WAAPITweenOptions} */ tweenOptions.to;\n                    const from = /** @type {WAAPITweenOptions} */ tweenOptions.from;\n                    /** @type {Number} */ tweenParams.duration = (tweenOptionsSpring ? /** @type {Spring} */ tweenOptionsSpring.duration : getFunctionValue(setValue(tweenOptions.duration, duration), $el, i, targetsLength)) * timeScale;\n                    /** @type {Number} */ tweenParams.delay = getFunctionValue(setValue(tweenOptions.delay, delay), $el, i, targetsLength) * timeScale;\n                    /** @type {CompositeOperation} */ tweenParams.composite = /** @type {CompositeOperation} */ setValue(tweenOptions.composition, composite);\n                    /** @type {String} */ tweenParams.easing = parseWAAPIEasing(tweenOptionsEase);\n                    parsedPropertyValue = parseIndividualTweenValue($el, name, from, to, i, targetsLength);\n                    if (individualTransformProperty) {\n                        keyframes[\"--\".concat(individualTransformProperty)] = parsedPropertyValue;\n                        cachedTransforms[individualTransformProperty] = parsedPropertyValue;\n                    } else {\n                        keyframes[name] = parseIndividualTweenValue($el, name, from, to, i, targetsLength);\n                    }\n                    addWAAPIAnimation(this, $el, name, keyframes, tweenParams);\n                    if (!isUnd(from)) {\n                        if (!individualTransformProperty) {\n                            $el.style[name] = keyframes[name][0];\n                        } else {\n                            const key = \"--\".concat(individualTransformProperty);\n                            $el.style.setProperty(key, keyframes[key][0]);\n                        }\n                    }\n                } else {\n                    parsedPropertyValue = isArr(propertyValue) ? propertyValue.map((/** @type {any} */ v)=>normalizeTweenValue(name, v, $el, i, targetsLength)) : normalizeTweenValue(name, /** @type {any} */ propertyValue, $el, i, targetsLength);\n                    if (individualTransformProperty) {\n                        keyframes[\"--\".concat(individualTransformProperty)] = parsedPropertyValue;\n                        cachedTransforms[individualTransformProperty] = parsedPropertyValue;\n                    } else {\n                        keyframes[name] = parsedPropertyValue;\n                    }\n                    addWAAPIAnimation(this, $el, name, keyframes, tweenParams);\n                }\n            }\n            if (hasIndividualTransforms) {\n                let transforms = emptyString;\n                for(let t in cachedTransforms){\n                    transforms += \"\".concat(transformsFragmentStrings[t], \"var(--\").concat(t, \")) \");\n                }\n                $el.style.transform = transforms;\n            }\n        });\n        if (scroll) {\n            /** @type {ScrollObserver} */ this.autoplay.link(this);\n        }\n    }\n}\nconst waapi = {\n    /**\n * @param {DOMTargetsParam} targets\n * @param {WAAPIAnimationParams} params\n * @return {WAAPIAnimation}\n */ animate: (targets, params)=>new WAAPIAnimation(targets, params),\n    convertEase: easingToLinear\n};\n/**\n * @param  {Callback<Timer>} [callback]\n * @return {Timer}\n */ const sync = function() {\n    let callback = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : noop;\n    return new Timer({\n        duration: 1 * globals.timeScale,\n        onComplete: callback\n    }, null, 0).resume();\n};\n/**\n * @overload\n * @param  {DOMTargetSelector} targetSelector\n * @param  {String}            propName\n * @return {String}\n *\n * @overload\n * @param  {JSTargetsParam} targetSelector\n * @param  {String}         propName\n * @return {Number|String}\n *\n * @overload\n * @param  {DOMTargetsParam} targetSelector\n * @param  {String}          propName\n * @param  {String}          unit\n * @return {String}\n *\n * @overload\n * @param  {TargetsParam} targetSelector\n * @param  {String}       propName\n * @param  {Boolean}      unit\n * @return {Number}\n *\n * @param  {TargetsParam}   targetSelector\n * @param  {String}         propName\n * @param  {String|Boolean} [unit]\n */ function getTargetValue(targetSelector, propName, unit) {\n    const targets = registerTargets(targetSelector);\n    if (!targets.length) return;\n    const [target] = targets;\n    const tweenType = getTweenType(target, propName);\n    const normalizePropName = sanitizePropertyName(propName, target, tweenType);\n    let originalValue = getOriginalAnimatableValue(target, normalizePropName);\n    if (isUnd(unit)) {\n        return originalValue;\n    } else {\n        decomposeRawValue(originalValue, decomposedOriginalValue);\n        if (decomposedOriginalValue.t === valueTypes.NUMBER || decomposedOriginalValue.t === valueTypes.UNIT) {\n            if (unit === false) {\n                return decomposedOriginalValue.n;\n            } else {\n                const convertedValue = convertValueUnit(/** @type {DOMTarget} */ target, decomposedOriginalValue, /** @type {String} */ unit, false);\n                return \"\".concat(round(convertedValue.n, globals.precision)).concat(convertedValue.u);\n            }\n        }\n    }\n}\n/**\n * @param  {TargetsParam}    targets\n * @param  {AnimationParams} parameters\n * @return {JSAnimation}\n */ const setTargetValues = (targets, parameters)=>{\n    if (isUnd(parameters)) return;\n    parameters.duration = minValue;\n    // Do not overrides currently active tweens by default\n    parameters.composition = setValue(parameters.composition, compositionTypes.none);\n    // Skip init() and force rendering by playing the animation\n    return new JSAnimation(targets, parameters, null, 0, true).resume();\n};\n/**\n * @param  {TargetsArray} targetsArray\n * @param  {JSAnimation}    animation\n * @param  {String}       [propertyName]\n * @return {Boolean}\n */ const removeTargetsFromAnimation = (targetsArray, animation, propertyName)=>{\n    let tweensMatchesTargets = false;\n    forEachChildren(animation, (/**@type {Tween} */ tween)=>{\n        const tweenTarget = tween.target;\n        if (targetsArray.includes(tweenTarget)) {\n            const tweenName = tween.property;\n            const tweenType = tween._tweenType;\n            const normalizePropName = sanitizePropertyName(propertyName, tweenTarget, tweenType);\n            if (!normalizePropName || normalizePropName && normalizePropName === tweenName) {\n                // Make sure to flag the previous CSS transform tween to renderTransform\n                if (tween.parent._tail === tween && tween._tweenType === tweenTypes.TRANSFORM && tween._prev && tween._prev._tweenType === tweenTypes.TRANSFORM) {\n                    tween._prev._renderTransforms = 1;\n                }\n                // Removes the tween from the selected animation\n                removeChild(animation, tween);\n                // Detach the tween from its siblings to make sure blended tweens are correctlly removed\n                removeTweenSliblings(tween);\n                tweensMatchesTargets = true;\n            }\n        }\n    }, true);\n    return tweensMatchesTargets;\n};\n/**\n * @param  {TargetsParam} targets\n * @param  {Renderable|WAAPIAnimation} [renderable]\n * @param  {String}                    [propertyName]\n * @return {TargetsArray}\n */ const remove = (targets, renderable, propertyName)=>{\n    const targetsArray = parseTargets(targets);\n    const parent = /** @type {Renderable|typeof engine} **/ renderable ? renderable : engine;\n    const waapiAnimation = renderable && /** @type {WAAPIAnimation} */ renderable.controlAnimation && /** @type {WAAPIAnimation} */ renderable;\n    for(let i = 0, l = targetsArray.length; i < l; i++){\n        const $el = /** @type {DOMTarget}  */ targetsArray[i];\n        removeWAAPIAnimation($el, propertyName, waapiAnimation);\n    }\n    let removeMatches;\n    if (parent._hasChildren) {\n        let iterationDuration = 0;\n        forEachChildren(parent, (/** @type {Renderable} */ child)=>{\n            if (!child._hasChildren) {\n                removeMatches = removeTargetsFromAnimation(targetsArray, /** @type {JSAnimation} */ child, propertyName);\n                // Remove the child from its parent if no tweens and no children left after the removal\n                if (removeMatches && !child._head) {\n                    child.cancel();\n                    removeChild(parent, child);\n                } else {\n                    // Calculate the new iterationDuration value to handle onComplete with last child in render()\n                    const childTLOffset = child._offset + child._delay;\n                    const childDur = childTLOffset + child.duration;\n                    if (childDur > iterationDuration) {\n                        iterationDuration = childDur;\n                    }\n                }\n            }\n            // Make sure to also remove engine's children targets\n            // NOTE: Avoid recursion?\n            if (child._head) {\n                remove(targets, child, propertyName);\n            } else {\n                child._hasChildren = false;\n            }\n        }, true);\n        // Update iterationDuration value to handle onComplete with last child in render()\n        if (!isUnd(/** @type {Renderable} */ parent.iterationDuration)) {\n            /** @type {Renderable} */ parent.iterationDuration = iterationDuration;\n        }\n    } else {\n        removeMatches = removeTargetsFromAnimation(targetsArray, /** @type {JSAnimation} */ parent, propertyName);\n    }\n    if (removeMatches && !parent._head) {\n        parent._hasChildren = false;\n        // Cancel the parent if there are no tweens and no children left after the removal\n        // We have to check if the .cancel() method exist to handle cases where the parent is the engine itself\n        if (/** @type {Renderable} */ parent.cancel) /** @type {Renderable} */ parent.cancel();\n    }\n    return targetsArray;\n};\n/**\n * @param  {Number} min\n * @param  {Number} max\n * @param  {Number} [decimalLength]\n * @return {Number}\n */ const random = (min, max, decimalLength)=>{\n    const m = 10 ** (decimalLength || 0);\n    return floor((Math.random() * (max - min + 1 / m) + min) * m) / m;\n};\n/**\n * @param  {String|Array} items\n * @return {any}\n */ const randomPick = (items)=>items[random(0, items.length - 1)];\n/**\n * Adapted from https://bost.ocks.org/mike/shuffle/\n * @param  {Array} items\n * @return {Array}\n */ const shuffle = (items)=>{\n    let m = items.length, t, i;\n    while(m){\n        i = random(0, --m);\n        t = items[m];\n        items[m] = items[i];\n        items[i] = t;\n    }\n    return items;\n};\n/**\n * @param  {Number|String} v\n * @param  {Number} decimalLength\n * @return {String}\n */ const roundPad = (v, decimalLength)=>(+v).toFixed(decimalLength);\n/**\n * @param  {Number} v\n * @param  {Number} totalLength\n * @param  {String} padString\n * @return {String}\n */ const padStart = (v, totalLength, padString)=>\"\".concat(v).padStart(totalLength, padString);\n/**\n * @param  {Number} v\n * @param  {Number} totalLength\n * @param  {String} padString\n * @return {String}\n */ const padEnd = (v, totalLength, padString)=>\"\".concat(v).padEnd(totalLength, padString);\n/**\n * @param  {Number} v\n * @param  {Number} min\n * @param  {Number} max\n * @return {Number}\n */ const wrap = (v, min, max)=>((v - min) % (max - min) + (max - min)) % (max - min) + min;\n/**\n * @param  {Number} value\n * @param  {Number} inLow\n * @param  {Number} inHigh\n * @param  {Number} outLow\n * @param  {Number} outHigh\n * @return {Number}\n */ const mapRange = (value, inLow, inHigh, outLow, outHigh)=>outLow + (value - inLow) / (inHigh - inLow) * (outHigh - outLow);\n/**\n * @param  {Number} degrees\n * @return {Number}\n */ const degToRad = (degrees)=>degrees * PI / 180;\n/**\n * @param  {Number} radians\n * @return {Number}\n */ const radToDeg = (radians)=>radians * 180 / PI;\n/**\n * https://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n * @param  {Number} start\n * @param  {Number} end\n * @param  {Number} amount\n * @param  {Renderable|Boolean} [renderable]\n * @return {Number}\n */ const lerp = (start, end, amount, renderable)=>{\n    let dt = K / globals.defaults.frameRate;\n    if (renderable !== false) {\n        const ticker = /** @type Renderable */ renderable || engine._hasChildren && engine;\n        if (ticker && ticker.deltaTime) {\n            dt = ticker.deltaTime;\n        }\n    }\n    const t = 1 - Math.exp(-amount * dt * .1);\n    return !amount ? start : amount === 1 ? end : (1 - t) * start + t * end;\n};\n// Chain-able utilities\n/**\n * @callback UtilityFunction\n * @param {...*} args\n * @return {Number|String}\n *\n * @param {UtilityFunction} fn\n * @param {Number} [last=0]\n * @return {function(...(Number|String)): function(Number|String): (Number|String)}\n */ const curry = function(fn) {\n    let last = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return last ? (v)=>fn(...args, v) : (v)=>fn(v, ...args);\n    };\n};\n/**\n * @param {Function} fn\n * @return {function(...(Number|String))}\n */ const chain = (fn)=>{\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        const result = fn(...args);\n        return new Proxy(noop, {\n            apply: (_, __, param)=>{\n                let [v] = param;\n                return result(v);\n            },\n            get: (_, prop)=>chain(/**@param {...Number|String} nextArgs */ function() {\n                    for(var _len = arguments.length, nextArgs = new Array(_len), _key = 0; _key < _len; _key++){\n                        nextArgs[_key] = arguments[_key];\n                    }\n                    const nextResult = utils[prop](...nextArgs);\n                    return (/**@type {Number|String} */ v)=>nextResult(result(v));\n                })\n        });\n    };\n};\n/**\n * @param {UtilityFunction} fn\n * @param {Number} [right]\n * @return {function(...(Number|String)): UtilityFunction}\n */ const makeChainable = function(fn) {\n    let right = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return (args.length < fn.length ? chain(curry(fn, right)) : fn)(...args);\n    };\n};\n/**\n * @callback ChainedUtilsResult\n * @param {Number} value\n * @return {Number}\n *\n * @typedef {Object} ChainableUtils\n * @property {ChainedClamp} clamp\n * @property {ChainedRound} round\n * @property {ChainedSnap} snap\n * @property {ChainedWrap} wrap\n * @property {ChainedInterpolate} interpolate\n * @property {ChainedMapRange} mapRange\n * @property {ChainedRoundPad} roundPad\n * @property {ChainedPadStart} padStart\n * @property {ChainedPadEnd} padEnd\n * @property {ChainedDegToRad} degToRad\n * @property {ChainedRadToDeg} radToDeg\n *\n * @typedef {ChainableUtils & ChainedUtilsResult} ChainableUtil\n *\n * @callback ChainedClamp\n * @param {Number} min\n * @param {Number} max\n * @return {ChainableUtil}\n *\n * @callback ChainedRound\n * @param {Number} decimalLength\n * @return {ChainableUtil}\n *\n * @callback ChainedSnap\n * @param {Number} increment\n * @return {ChainableUtil}\n *\n * @callback ChainedWrap\n * @param {Number} min\n * @param {Number} max\n * @return {ChainableUtil}\n *\n * @callback ChainedInterpolate\n * @param {Number} start\n * @param {Number} end\n * @return {ChainableUtil}\n *\n * @callback ChainedMapRange\n * @param {Number} inLow\n * @param {Number} inHigh\n * @param {Number} outLow\n * @param {Number} outHigh\n * @return {ChainableUtil}\n *\n * @callback ChainedRoundPad\n * @param {Number} decimalLength\n * @return {ChainableUtil}\n *\n * @callback ChainedPadStart\n * @param {Number} totalLength\n * @param {String} padString\n * @return {ChainableUtil}\n *\n * @callback ChainedPadEnd\n * @param {Number} totalLength\n * @param {String} padString\n * @return {ChainableUtil}\n *\n * @callback ChainedDegToRad\n * @return {ChainableUtil}\n *\n * @callback ChainedRadToDeg\n * @return {ChainableUtil}\n */ const utils = {\n    $: registerTargets,\n    get: getTargetValue,\n    set: setTargetValues,\n    remove,\n    cleanInlineStyles,\n    random,\n    randomPick,\n    shuffle,\n    lerp,\n    sync,\n    clamp: /** @type {typeof clamp & ChainedClamp} */ makeChainable(clamp),\n    round: /** @type {typeof round & ChainedRound} */ makeChainable(round),\n    snap: /** @type {typeof snap & ChainedSnap} */ makeChainable(snap),\n    wrap: /** @type {typeof wrap & ChainedWrap} */ makeChainable(wrap),\n    interpolate: /** @type {typeof interpolate & ChainedInterpolate} */ makeChainable(interpolate, 1),\n    mapRange: /** @type {typeof mapRange & ChainedMapRange} */ makeChainable(mapRange),\n    roundPad: /** @type {typeof roundPad & ChainedRoundPad} */ makeChainable(roundPad),\n    padStart: /** @type {typeof padStart & ChainedPadStart} */ makeChainable(padStart),\n    padEnd: /** @type {typeof padEnd & ChainedPadEnd} */ makeChainable(padEnd),\n    degToRad: /** @type {typeof degToRad & ChainedDegToRad} */ makeChainable(degToRad),\n    radToDeg: /** @type {typeof radToDeg & ChainedRadToDeg} */ makeChainable(radToDeg)\n};\n/**\n * @typedef {Number|String|Function} TimePosition\n */ /**\n * Timeline's children offsets positions parser\n * @param  {Timeline} timeline\n * @param  {String} timePosition\n * @return {Number}\n */ const getPrevChildOffset = (timeline, timePosition)=>{\n    if (stringStartsWith(timePosition, \"<\")) {\n        const goToPrevAnimationOffset = timePosition[1] === \"<\";\n        const prevAnimation = /** @type {Tickable} */ timeline._tail;\n        const prevOffset = prevAnimation ? prevAnimation._offset + prevAnimation._delay : 0;\n        return goToPrevAnimationOffset ? prevOffset : prevOffset + prevAnimation.duration;\n    }\n};\n/**\n * @param  {Timeline} timeline\n * @param  {TimePosition} [timePosition]\n * @return {Number}\n */ const parseTimelinePosition = (timeline, timePosition)=>{\n    let tlDuration = timeline.iterationDuration;\n    if (tlDuration === minValue) tlDuration = 0;\n    if (isUnd(timePosition)) return tlDuration;\n    if (isNum(+timePosition)) return +timePosition;\n    const timePosStr = /** @type {String} */ timePosition;\n    const tlLabels = timeline ? timeline.labels : null;\n    const hasLabels = !isNil(tlLabels);\n    const prevOffset = getPrevChildOffset(timeline, timePosStr);\n    const hasSibling = !isUnd(prevOffset);\n    const matchedRelativeOperator = relativeValuesExecRgx.exec(timePosStr);\n    if (matchedRelativeOperator) {\n        const fullOperator = matchedRelativeOperator[0];\n        const split = timePosStr.split(fullOperator);\n        const labelOffset = hasLabels && split[0] ? tlLabels[split[0]] : tlDuration;\n        const parsedOffset = hasSibling ? prevOffset : hasLabels ? labelOffset : tlDuration;\n        const parsedNumericalOffset = +split[1];\n        return getRelativeValue(parsedOffset, parsedNumericalOffset, fullOperator[0]);\n    } else {\n        return hasSibling ? prevOffset : hasLabels ? !isUnd(tlLabels[timePosStr]) ? tlLabels[timePosStr] : tlDuration : tlDuration;\n    }\n};\n/**\n * @param {Timeline} tl\n * @return {Number}\n */ function getTimelineTotalDuration(tl) {\n    return clampInfinity((tl.iterationDuration + tl._loopDelay) * tl.iterationCount - tl._loopDelay) || minValue;\n}\n/**\n * @overload\n * @param  {TimerParams} childParams\n * @param  {Timeline} tl\n * @param  {Number} timePosition\n * @return {Timeline}\n *\n * @overload\n * @param  {AnimationParams} childParams\n * @param  {Timeline} tl\n * @param  {Number} timePosition\n * @param  {TargetsParam} targets\n * @param  {Number} [index]\n * @param  {Number} [length]\n * @return {Timeline}\n *\n * @param  {TimerParams|AnimationParams} childParams\n * @param  {Timeline} tl\n * @param  {Number} timePosition\n * @param  {TargetsParam} [targets]\n * @param  {Number} [index]\n * @param  {Number} [length]\n */ function addTlChild(childParams, tl, timePosition, targets, index, length) {\n    const isSetter = isNum(childParams.duration) && /** @type {Number} */ childParams.duration <= minValue;\n    // Offset the tl position with -minValue for 0 duration animations or .set() calls in order to align their end value with the defined position\n    const adjustedPosition = isSetter ? timePosition - minValue : timePosition;\n    tick(tl, adjustedPosition, 1, 1, tickModes.AUTO);\n    const tlChild = targets ? new JSAnimation(targets, /** @type {AnimationParams} */ childParams, tl, adjustedPosition, false, index, length) : new Timer(/** @type {TimerParams} */ childParams, tl, adjustedPosition);\n    tlChild.init(1);\n    // TODO: Might be better to insert at a position relative to startTime?\n    addChild(tl, tlChild);\n    forEachChildren(tl, (/** @type {Renderable} */ child)=>{\n        const childTLOffset = child._offset + child._delay;\n        const childDur = childTLOffset + child.duration;\n        if (childDur > tl.iterationDuration) tl.iterationDuration = childDur;\n    });\n    tl.duration = getTimelineTotalDuration(tl);\n    return tl;\n}\nclass Timeline extends Timer {\n    /**\n   * @overload\n   * @param {TargetsParam} a1\n   * @param {AnimationParams} a2\n   * @param {TimePosition} [a3]\n   * @return {this}\n   *\n   * @overload\n   * @param {TimerParams} a1\n   * @param {TimePosition} [a2]\n   * @return {this}\n   *\n   * @param {TargetsParam|TimerParams} a1\n   * @param {AnimationParams|TimePosition} a2\n   * @param {TimePosition} [a3]\n   */ add(a1, a2, a3) {\n        const isAnim = isObj(a2);\n        const isTimer = isObj(a1);\n        if (isAnim || isTimer) {\n            this._hasChildren = true;\n            if (isAnim) {\n                const childParams = /** @type {AnimationParams} */ a2;\n                // Check for function for children stagger positions\n                if (isFnc(a3)) {\n                    const staggeredPosition = /** @type {Function} */ a3;\n                    const parsedTargetsArray = parseTargets(/** @type {TargetsParam} */ a1);\n                    // Store initial duration before adding new children that will change the duration\n                    const tlDuration = this.duration;\n                    // Store initial _iterationDuration before adding new children that will change the duration\n                    const tlIterationDuration = this.iterationDuration;\n                    // Store the original id in order to add specific indexes to the new animations ids\n                    const id = childParams.id;\n                    let i = 0;\n                    const parsedLength = parsedTargetsArray.length;\n                    parsedTargetsArray.forEach((/** @type {Target} */ target)=>{\n                        // Create a new parameter object for each staggered children\n                        const staggeredChildParams = {\n                            ...childParams\n                        };\n                        // Reset the duration of the timeline iteration before each stagger to prevent wrong start value calculation\n                        this.duration = tlDuration;\n                        this.iterationDuration = tlIterationDuration;\n                        if (!isUnd(id)) staggeredChildParams.id = id + \"-\" + i;\n                        addTlChild(staggeredChildParams, this, staggeredPosition(target, i, parsedLength, this), target, i, parsedLength);\n                        i++;\n                    });\n                } else {\n                    addTlChild(childParams, this, parseTimelinePosition(this, a3), /** @type {TargetsParam} */ a1);\n                }\n            } else {\n                // It's a Timer\n                addTlChild(/** @type TimerParams */ a1, this, parseTimelinePosition(this, /** @type TimePosition */ a2));\n            }\n            return this.init(1); // 1 = internalRender\n        }\n    }\n    /**\n   * @overload\n   * @param {Tickable} [synced]\n   * @param {TimePosition} [position]\n   * @return {this}\n   *\n   * @overload\n   * @param {globalThis.Animation} [synced]\n   * @param {TimePosition} [position]\n   * @return {this}\n   *\n   * @overload\n   * @param {WAAPIAnimation} [synced]\n   * @param {TimePosition} [position]\n   * @return {this}\n   *\n   * @param {Tickable|WAAPIAnimation|globalThis.Animation} [synced]\n   * @param {TimePosition} [position]\n   */ sync(synced, position) {\n        if (isUnd(synced) || synced && isUnd(synced.pause)) return this;\n        synced.pause();\n        const duration = +(/** @type {globalThis.Animation} */ synced.effect ? /** @type {globalThis.Animation} */ synced.effect.getTiming().duration : /** @type {Tickable} */ synced.duration);\n        return this.add(synced, {\n            currentTime: [\n                0,\n                duration\n            ],\n            duration,\n            ease: \"linear\"\n        }, position);\n    }\n    /**\n   * @param  {TargetsParam} targets\n   * @param  {AnimationParams} parameters\n   * @param  {TimePosition} [position]\n   * @return {this}\n   */ set(targets, parameters, position) {\n        if (isUnd(parameters)) return this;\n        parameters.duration = minValue;\n        parameters.composition = compositionTypes.replace;\n        return this.add(targets, parameters, position);\n    }\n    /**\n   * @param {Callback<Timer>} callback\n   * @param {TimePosition} [position]\n   * @return {this}\n   */ call(callback, position) {\n        if (isUnd(callback) || callback && !isFnc(callback)) return this;\n        return this.add({\n            duration: 0,\n            onComplete: ()=>callback(this)\n        }, position);\n    }\n    /**\n   * @param {String} labelName\n   * @param {TimePosition} [position]\n   * @return {this}\n   *\n   */ label(labelName, position) {\n        if (isUnd(labelName) || labelName && !isStr(labelName)) return this;\n        this.labels[labelName] = parseTimelinePosition(this, /** @type TimePosition */ position);\n        return this;\n    }\n    /**\n   * @param  {TargetsParam} targets\n   * @param  {String} [propertyName]\n   * @return {this}\n   */ remove(targets, propertyName) {\n        remove(targets, this, propertyName);\n        return this;\n    }\n    /**\n   * @param  {Number} newDuration\n   * @return {this}\n   */ stretch(newDuration) {\n        const currentDuration = this.duration;\n        if (currentDuration === normalizeTime(newDuration)) return this;\n        const timeScale = newDuration / currentDuration;\n        const labels = this.labels;\n        forEachChildren(this, (/** @type {JSAnimation} */ child)=>child.stretch(child.duration * timeScale));\n        for(let labelName in labels)labels[labelName] *= timeScale;\n        return super.stretch(newDuration);\n    }\n    /**\n   * @return {this}\n   */ refresh() {\n        forEachChildren(this, (/** @type {JSAnimation} */ child)=>{\n            if (child.refresh) child.refresh();\n        });\n        return this;\n    }\n    /**\n   * @return {this}\n   */ revert() {\n        super.revert();\n        forEachChildren(this, (/** @type {JSAnimation} */ child)=>child.revert, true);\n        return cleanInlineStyles(this);\n    }\n    /**\n   * @param  {Callback<this>} [callback]\n   * @return {Promise}\n   */ then(callback) {\n        return super.then(callback);\n    }\n    /**\n   * @param {TimelineParams} [parameters]\n   */ constructor(parameters = {}){\n        super(/** @type {TimerParams&TimelineParams} */ parameters, null, 0);\n        /** @type {Number} */ this.duration = 0; // TL duration starts at 0 and grows when adding children\n        /** @type {Record<String, Number>} */ this.labels = {};\n        const defaultsParams = parameters.defaults;\n        const globalDefaults = globals.defaults;\n        /** @type {DefaultsParams} */ this.defaults = defaultsParams ? mergeObjects(defaultsParams, globalDefaults) : globalDefaults;\n        /** @type {Callback<this>} */ this.onRender = parameters.onRender || globalDefaults.onRender;\n        const tlPlaybackEase = setValue(parameters.playbackEase, globalDefaults.playbackEase);\n        this._ease = tlPlaybackEase ? parseEasings(tlPlaybackEase) : null;\n        /** @type {Number} */ this.iterationDuration = 0;\n    }\n}\n/**\n * @param {TimelineParams} [parameters]\n * @return {Timeline}\n */ const createTimeline = (parameters)=>new Timeline(parameters).init();\nclass Animatable {\n    revert() {\n        for(let propName in this.animations){\n            this[propName] = noop;\n            this.animations[propName].revert();\n        }\n        this.animations = {};\n        this.targets.length = 0;\n        return this;\n    }\n    /**\n   * @param {TargetsParam} targets\n   * @param {AnimatableParams} parameters\n   */ constructor(targets, parameters){\n        if (globals.scope) globals.scope.revertibles.push(this);\n        /** @type {AnimationParams} */ const globalParams = {};\n        const properties = {};\n        this.targets = [];\n        this.animations = {};\n        if (isUnd(targets) || isUnd(parameters)) return;\n        for(let propName in parameters){\n            const paramValue = parameters[propName];\n            if (isKey(propName)) {\n                properties[propName] = paramValue;\n            } else {\n                globalParams[propName] = paramValue;\n            }\n        }\n        for(let propName in properties){\n            const propValue = properties[propName];\n            const isObjValue = isObj(propValue);\n            /** @type {TweenParamsOptions} */ let propParams = {};\n            let to = \"+=0\";\n            if (isObjValue) {\n                const unit = propValue.unit;\n                if (isStr(unit)) to += unit;\n            } else {\n                propParams.duration = propValue;\n            }\n            propParams[propName] = isObjValue ? mergeObjects({\n                to\n            }, propValue) : to;\n            const animParams = mergeObjects(globalParams, propParams);\n            animParams.composition = compositionTypes.replace;\n            animParams.autoplay = false;\n            const animation = this.animations[propName] = new JSAnimation(targets, animParams, null, 0, false).init();\n            if (!this.targets.length) this.targets.push(...animation.targets);\n            /** @type {AnimatableProperty} */ this[propName] = (to, duration, ease)=>{\n                const tween = /** @type {Tween} */ animation._head;\n                if (isUnd(to) && tween) {\n                    const numbers = tween._numbers;\n                    if (numbers && numbers.length) {\n                        return numbers;\n                    } else {\n                        return tween._modifier(tween._number);\n                    }\n                } else {\n                    forEachChildren(animation, (/** @type {Tween} */ tween)=>{\n                        if (isArr(to)) {\n                            for(let i = 0, l = /** @type {Array} */ to.length; i < l; i++){\n                                if (!isUnd(tween._numbers[i])) {\n                                    tween._fromNumbers[i] = /** @type {Number} */ tween._modifier(tween._numbers[i]);\n                                    tween._toNumbers[i] = to[i];\n                                }\n                            }\n                        } else {\n                            tween._fromNumber = /** @type {Number} */ tween._modifier(tween._number);\n                            tween._toNumber = /** @type {Number} */ to;\n                        }\n                        if (!isUnd(ease)) tween._ease = parseEasings(ease);\n                        tween._currentTime = 0;\n                    });\n                    if (!isUnd(duration)) animation.stretch(duration);\n                    animation.reset(1).resume();\n                    return this;\n                }\n            };\n        }\n    }\n}\n/**\n * @param {TargetsParam} targets\n * @param {AnimatableParams} parameters\n * @return {AnimatableObject}\n */ const createAnimatable = (targets, parameters)=>/** @type {AnimatableObject} */ new Animatable(targets, parameters);\n/*\n * Spring ease solver adapted from https://webkit.org/demos/spring/spring.js\n * Webkit Copyright © 2016 Apple Inc\n */ /**\n * @typedef {Object} SpringParams\n * @property {Number} [mass=1] - Mass, default 1\n * @property {Number} [stiffness=100] - Stiffness, default 100\n * @property {Number} [damping=10] - Damping, default 10\n * @property {Number} [velocity=0] - Initial velocity, default 0\n */ class Spring {\n    /** @type {EasingFunction} */ solve(time) {\n        const { zeta, w0, wd, b } = this;\n        let t = time;\n        if (zeta < 1) {\n            t = exp(-t * zeta * w0) * (1 * cos(wd * t) + b * sin(wd * t));\n        } else {\n            t = (1 + b * t) * exp(-t * w0);\n        }\n        return 1 - t;\n    }\n    compute() {\n        const { maxRestSteps, maxIterations, restThreshold, timeStep, m, d, s, v } = this;\n        const w0 = this.w0 = clamp(sqrt(s / m), minValue, K);\n        const zeta = this.zeta = d / (2 * sqrt(s * m));\n        const wd = this.wd = zeta < 1 ? w0 * sqrt(1 - zeta * zeta) : 0;\n        this.b = zeta < 1 ? (zeta * w0 + -v) / wd : -v + w0;\n        let solverTime = 0;\n        let restSteps = 0;\n        let iterations = 0;\n        while(restSteps < maxRestSteps && iterations < maxIterations){\n            if (abs(1 - this.solve(solverTime)) < restThreshold) {\n                restSteps++;\n            } else {\n                restSteps = 0;\n            }\n            this.solverDuration = solverTime;\n            solverTime += timeStep;\n            iterations++;\n        }\n        this.duration = round(this.solverDuration * K, 0) * globals.timeScale;\n    }\n    get mass() {\n        return this.m;\n    }\n    set mass(v) {\n        this.m = clamp(setValue(v, 1), 0, K);\n        this.compute();\n    }\n    get stiffness() {\n        return this.s;\n    }\n    set stiffness(v) {\n        this.s = clamp(setValue(v, 100), 1, K);\n        this.compute();\n    }\n    get damping() {\n        return this.d;\n    }\n    set damping(v) {\n        this.d = clamp(setValue(v, 10), .1, K);\n        this.compute();\n    }\n    get velocity() {\n        return this.v;\n    }\n    set velocity(v) {\n        this.v = clamp(setValue(v, 0), -1e3, K);\n        this.compute();\n    }\n    /**\n   * @param {SpringParams} [parameters]\n   */ constructor(parameters = {}){\n        this.timeStep = .02; // Interval fed to the solver to calculate duration\n        this.restThreshold = .0005; // Values below this threshold are considered resting position\n        this.restDuration = 200; // Duration in ms used to check if the spring is resting after reaching restThreshold\n        this.maxDuration = 60000; // The maximum allowed spring duration in ms (default 1 min)\n        this.maxRestSteps = this.restDuration / this.timeStep / K; // How many steps allowed after reaching restThreshold before stopping the duration calculation\n        this.maxIterations = this.maxDuration / this.timeStep / K; // Calculate the maximum iterations allowed based on maxDuration\n        this.m = clamp(setValue(parameters.mass, 1), 0, K);\n        this.s = clamp(setValue(parameters.stiffness, 100), 1, K);\n        this.d = clamp(setValue(parameters.damping, 10), .1, K);\n        this.v = clamp(setValue(parameters.velocity, 0), -1e3, K);\n        this.w0 = 0;\n        this.zeta = 0;\n        this.wd = 0;\n        this.b = 0;\n        this.solverDuration = 0;\n        this.duration = 0;\n        this.compute();\n        /** @type {EasingFunction} */ this.ease = (t)=>t === 0 || t === 1 ? t : this.solve(t * this.solverDuration);\n    }\n}\n/**\n * @param {SpringParams} [parameters]\n * @returns {Spring}\n */ const createSpring = (parameters)=>new Spring(parameters);\n/**\n * @param {Event} e\n */ const preventDefault = (e)=>{\n    if (e.cancelable) e.preventDefault();\n};\nclass DOMProxy {\n    get x() {\n        return this.el.x || 0;\n    }\n    set x(v) {\n        this.el.x = v;\n    }\n    get y() {\n        return this.el.y || 0;\n    }\n    set y(v) {\n        this.el.y = v;\n    }\n    get width() {\n        return this.el.width || 0;\n    }\n    set width(v) {\n        this.el.width = v;\n    }\n    get height() {\n        return this.el.height || 0;\n    }\n    set height(v) {\n        this.el.height = v;\n    }\n    getBoundingClientRect() {\n        return {\n            top: this.y,\n            right: this.x,\n            bottom: this.y + this.height,\n            left: this.x + this.width\n        };\n    }\n    /** @param {Object} el */ constructor(el){\n        this.el = el;\n        this.zIndex = 0;\n        this.parentElement = null;\n        this.classList = {\n            add: noop,\n            remove: noop\n        };\n    }\n}\nclass Transforms {\n    /**\n   * @param {Number} x\n   * @param {Number} y\n   * @return {DOMPoint}\n   */ normalizePoint(x, y) {\n        this.point.x = x;\n        this.point.y = y;\n        return this.point.matrixTransform(this.inversedMatrix);\n    }\n    /**\n   * @callback TraverseParentsCallback\n   * @param {DOMTarget} $el\n   * @param {Number} i\n   */ /**\n   * @param {TraverseParentsCallback} cb\n   */ traverseUp(cb) {\n        let $el = /** @type {DOMTarget|Document} */ this.$el.parentElement, i = 0;\n        while($el && $el !== doc){\n            cb(/** @type {DOMTarget} */ $el, i);\n            $el = /** @type {DOMTarget} */ $el.parentElement;\n            i++;\n        }\n    }\n    getMatrix() {\n        const matrix = new DOMMatrix();\n        this.traverseUp(($el)=>{\n            const transformValue = getComputedStyle($el).transform;\n            if (transformValue) {\n                const elMatrix = new DOMMatrix(transformValue);\n                matrix.preMultiplySelf(elMatrix);\n            }\n        });\n        return matrix;\n    }\n    remove() {\n        this.traverseUp(($el, i)=>{\n            this.inlineTransforms[i] = $el.style.transform;\n            $el.style.transform = \"none\";\n        });\n    }\n    revert() {\n        this.traverseUp(($el, i)=>{\n            const ct = this.inlineTransforms[i];\n            if (ct === \"\") {\n                $el.style.removeProperty(\"transform\");\n            } else {\n                $el.style.transform = ct;\n            }\n        });\n    }\n    /**\n   * @param {DOMTarget|DOMProxy} $el\n   */ constructor($el){\n        this.$el = $el;\n        this.inlineTransforms = [];\n        this.point = new DOMPoint();\n        this.inversedMatrix = this.getMatrix().inverse();\n    }\n}\n/**\n * @template {Array<Number>|DOMTargetSelector|String|Number|Boolean|Function|DraggableCursorParams} T\n * @param {T | ((draggable: Draggable) => T)} value\n * @param {Draggable} draggable\n * @return {T}\n */ const parseDraggableFunctionParameter = (value, draggable)=>value && isFnc(value) ? /** @type {Function} */ value(draggable) : value;\nlet zIndex = 0;\nclass Draggable {\n    /**\n   * @param  {Number} dx\n   * @param  {Number} dy\n   * @return {Number}\n   */ computeVelocity(dx, dy) {\n        const prevTime = this.velocityTime;\n        const curTime = now();\n        const elapsed = curTime - prevTime;\n        if (elapsed < 17) return this.velocity;\n        this.velocityTime = curTime;\n        const velocityStack = this.velocityStack;\n        const vMul = this.velocityMultiplier;\n        const minV = this.minVelocity;\n        const maxV = this.maxVelocity;\n        const vi = this.velocityStackIndex;\n        velocityStack[vi] = round(clamp(sqrt(dx * dx + dy * dy) / elapsed * vMul, minV, maxV), 5);\n        const velocity = max(velocityStack[0], velocityStack[1], velocityStack[2]);\n        this.velocity = velocity;\n        this.velocityStackIndex = (vi + 1) % 3;\n        return velocity;\n    }\n    /**\n   * @param {Number}  x\n   * @param {Boolean} [muteUpdateCallback]\n   * @return {this}\n   */ setX(x) {\n        let muteUpdateCallback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        if (this.disabled[0]) return;\n        const v = round(x, 5);\n        this.overshootXTicker.pause();\n        this.manual = true;\n        this.updated = !muteUpdateCallback;\n        this.destX = v;\n        this.snapped[0] = snap(v, this.snapX);\n        this.animate[this.xProp](v, 0);\n        this.manual = false;\n        return this;\n    }\n    /**\n   * @param {Number}  y\n   * @param {Boolean} [muteUpdateCallback]\n   * @return {this}\n   */ setY(y) {\n        let muteUpdateCallback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        if (this.disabled[1]) return;\n        const v = round(y, 5);\n        this.overshootYTicker.pause();\n        this.manual = true;\n        this.updated = !muteUpdateCallback;\n        this.destY = v;\n        this.snapped[1] = snap(v, this.snapY);\n        this.animate[this.yProp](v, 0);\n        this.manual = false;\n        return this;\n    }\n    get x() {\n        return round(/** @type {Number} */ this.animate[this.xProp](), globals.precision);\n    }\n    set x(x) {\n        this.setX(x, false);\n    }\n    get y() {\n        return round(/** @type {Number} */ this.animate[this.yProp](), globals.precision);\n    }\n    set y(y) {\n        this.setY(y, false);\n    }\n    get progressX() {\n        return mapRange(this.x, this.containerBounds[3], this.containerBounds[1], 0, 1);\n    }\n    set progressX(x) {\n        this.setX(mapRange(x, 0, 1, this.containerBounds[3], this.containerBounds[1]), false);\n    }\n    get progressY() {\n        return mapRange(this.y, this.containerBounds[0], this.containerBounds[2], 0, 1);\n    }\n    set progressY(y) {\n        this.setY(mapRange(y, 0, 1, this.containerBounds[0], this.containerBounds[2]), false);\n    }\n    updateScrollCoords() {\n        const sx = round(this.useWin ? win.scrollX : this.$container.scrollLeft, 0);\n        const sy = round(this.useWin ? win.scrollY : this.$container.scrollTop, 0);\n        const [cpt, cpr, cpb, cpl] = this.containerPadding;\n        const threshold = this.scrollThreshold;\n        this.scroll.x = sx;\n        this.scroll.y = sy;\n        this.scrollBounds[0] = sy - this.targetBounds[0] + cpt - threshold;\n        this.scrollBounds[1] = sx - this.targetBounds[1] - cpr + threshold;\n        this.scrollBounds[2] = sy - this.targetBounds[2] - cpb + threshold;\n        this.scrollBounds[3] = sx - this.targetBounds[3] + cpl - threshold;\n    }\n    updateBoundingValues() {\n        const $container = this.$container;\n        const cx = this.x;\n        const cy = this.y;\n        const cx2 = this.coords[2];\n        const cy2 = this.coords[3];\n        // Prevents interfering with the scroll area in cases the target is outside of the container\n        // Make sure the temp coords are also adjuset to prevents wrong delta calculation on updates\n        this.coords[2] = 0;\n        this.coords[3] = 0;\n        this.setX(0, true);\n        this.setY(0, true);\n        this.transforms.remove();\n        const iw = this.window[0] = win.innerWidth;\n        const ih = this.window[1] = win.innerHeight;\n        const uw = this.useWin;\n        const sw = $container.scrollWidth;\n        const sh = $container.scrollHeight;\n        const fx = this.fixed;\n        const transformContainerRect = $container.getBoundingClientRect();\n        const [cpt, cpr, cpb, cpl] = this.containerPadding;\n        this.dragArea[0] = uw ? 0 : transformContainerRect.left;\n        this.dragArea[1] = uw ? 0 : transformContainerRect.top;\n        this.scrollView[0] = uw ? clamp(sw, iw, sw) : sw;\n        this.scrollView[1] = uw ? clamp(sh, ih, sh) : sh;\n        this.updateScrollCoords();\n        const { width, height, left, top, right, bottom } = $container.getBoundingClientRect();\n        this.dragArea[2] = round(uw ? clamp(width, iw, iw) : width, 0);\n        this.dragArea[3] = round(uw ? clamp(height, ih, ih) : height, 0);\n        const containerOverflow = getTargetValue($container, \"overflow\");\n        const visibleOverflow = containerOverflow === \"visible\";\n        const hiddenOverflow = containerOverflow === \"hidden\";\n        this.canScroll = fx ? false : this.contained && ($container === doc.body && visibleOverflow || !hiddenOverflow && !visibleOverflow) && (sw > this.dragArea[2] + cpl - cpr || sh > this.dragArea[3] + cpt - cpb) && (!this.containerArray || this.containerArray && !isArr(this.containerArray));\n        if (this.contained) {\n            const sx = this.scroll.x;\n            const sy = this.scroll.y;\n            const canScroll = this.canScroll;\n            const targetRect = this.$target.getBoundingClientRect();\n            const hiddenLeft = canScroll ? uw ? 0 : $container.scrollLeft : 0;\n            const hiddenTop = canScroll ? uw ? 0 : $container.scrollTop : 0;\n            const hiddenRight = canScroll ? this.scrollView[0] - hiddenLeft - width : 0;\n            const hiddenBottom = canScroll ? this.scrollView[1] - hiddenTop - height : 0;\n            this.targetBounds[0] = round(targetRect.top + sy - (uw ? 0 : top), 0);\n            this.targetBounds[1] = round(targetRect.right + sx - (uw ? iw : right), 0);\n            this.targetBounds[2] = round(targetRect.bottom + sy - (uw ? ih : bottom), 0);\n            this.targetBounds[3] = round(targetRect.left + sx - (uw ? 0 : left), 0);\n            if (this.containerArray) {\n                this.containerBounds[0] = this.containerArray[0] + cpt;\n                this.containerBounds[1] = this.containerArray[1] - cpr;\n                this.containerBounds[2] = this.containerArray[2] - cpb;\n                this.containerBounds[3] = this.containerArray[3] + cpl;\n            } else {\n                this.containerBounds[0] = -round(targetRect.top - (fx ? clamp(top, 0, ih) : top) + hiddenTop - cpt, 0);\n                this.containerBounds[1] = -round(targetRect.right - (fx ? clamp(right, 0, iw) : right) - hiddenRight + cpr, 0);\n                this.containerBounds[2] = -round(targetRect.bottom - (fx ? clamp(bottom, 0, ih) : bottom) - hiddenBottom + cpb, 0);\n                this.containerBounds[3] = -round(targetRect.left - (fx ? clamp(left, 0, iw) : left) + hiddenLeft - cpl, 0);\n            }\n        }\n        this.transforms.revert();\n        // Restore coordinates\n        this.coords[2] = cx2;\n        this.coords[3] = cy2;\n        this.setX(cx, true);\n        this.setY(cy, true);\n    }\n    /**\n   * Returns 0 if not OB, 1 if x is OB, 2 if y is OB, 3 if both x and y are OB\n   *\n   * @param  {Array} bounds\n   * @param  {Number} x\n   * @param  {Number} y\n   * @return {Number}\n   */ isOutOfBounds(bounds, x, y) {\n        if (!this.contained) return 0;\n        const [bt, br, bb, bl] = bounds;\n        const [dx, dy] = this.disabled;\n        const obx = !dx && x < bl || !dx && x > br;\n        const oby = !dy && y < bt || !dy && y > bb;\n        return obx && !oby ? 1 : !obx && oby ? 2 : obx && oby ? 3 : 0;\n    }\n    refresh() {\n        const params = this.parameters;\n        const paramX = params.x;\n        const paramY = params.y;\n        const container = parseDraggableFunctionParameter(params.container, this);\n        const cp = parseDraggableFunctionParameter(params.containerPadding, this) || 0;\n        const containerPadding = /** @type {[Number, Number, Number, Number]} */ isArr(cp) ? cp : [\n            cp,\n            cp,\n            cp,\n            cp\n        ];\n        const cx = this.x;\n        const cy = this.y;\n        const parsedCursorStyles = parseDraggableFunctionParameter(params.cursor, this);\n        const cursorStyles = {\n            onHover: \"grab\",\n            onGrab: \"grabbing\"\n        };\n        if (parsedCursorStyles) {\n            const { onHover, onGrab } = /** @type {DraggableCursorParams} */ parsedCursorStyles;\n            if (onHover) cursorStyles.onHover = onHover;\n            if (onGrab) cursorStyles.onGrab = onGrab;\n        }\n        this.containerArray = isArr(container) ? container : null;\n        this.$container = /** @type {HTMLElement} */ container && !this.containerArray ? parseTargets(/** @type {DOMTarget} */ container)[0] : doc.body;\n        this.useWin = this.$container === doc.body;\n        /** @type {Window | HTMLElement} */ this.$scrollContainer = this.useWin ? win : this.$container;\n        this.isFinePointer = matchMedia(\"(pointer:fine)\").matches;\n        this.containerPadding = setValue(containerPadding, [\n            0,\n            0,\n            0,\n            0\n        ]);\n        this.containerFriction = clamp(setValue(parseDraggableFunctionParameter(params.containerFriction, this), .8), 0, 1);\n        this.releaseContainerFriction = clamp(setValue(parseDraggableFunctionParameter(params.releaseContainerFriction, this), this.containerFriction), 0, 1);\n        this.snapX = parseDraggableFunctionParameter(isObj(paramX) && !isUnd(paramX.snap) ? paramX.snap : params.snap, this);\n        this.snapY = parseDraggableFunctionParameter(isObj(paramY) && !isUnd(paramY.snap) ? paramY.snap : params.snap, this);\n        this.scrollSpeed = setValue(parseDraggableFunctionParameter(params.scrollSpeed, this), 1.5);\n        this.scrollThreshold = setValue(parseDraggableFunctionParameter(params.scrollThreshold, this), 20);\n        this.dragSpeed = setValue(parseDraggableFunctionParameter(params.dragSpeed, this), 1);\n        this.minVelocity = setValue(parseDraggableFunctionParameter(params.minVelocity, this), 0);\n        this.maxVelocity = setValue(parseDraggableFunctionParameter(params.maxVelocity, this), 50);\n        this.velocityMultiplier = setValue(parseDraggableFunctionParameter(params.velocityMultiplier, this), 1);\n        this.cursor = parsedCursorStyles === false ? false : cursorStyles;\n        this.updateBoundingValues();\n        // const ob = this.isOutOfBounds(this.containerBounds, this.x, this.y);\n        // if (ob === 1 || ob === 3) this.progressX = px;\n        // if (ob === 2 || ob === 3) this.progressY = py;\n        // if (this.initialized && this.contained) {\n        //   if (this.progressX !== px) this.progressX = px;\n        //   if (this.progressY !== py) this.progressY = py;\n        // }\n        const [bt, br, bb, bl] = this.containerBounds;\n        this.setX(clamp(cx, bl, br), true);\n        this.setY(clamp(cy, bt, bb), true);\n    }\n    update() {\n        this.updateScrollCoords();\n        if (this.canScroll) {\n            const [cpt, cpr, cpb, cpl] = this.containerPadding;\n            const [sw, sh] = this.scrollView;\n            const daw = this.dragArea[2];\n            const dah = this.dragArea[3];\n            const csx = this.scroll.x;\n            const csy = this.scroll.y;\n            const nsw = this.$container.scrollWidth;\n            const nsh = this.$container.scrollHeight;\n            const csw = this.useWin ? clamp(nsw, this.window[0], nsw) : nsw;\n            const csh = this.useWin ? clamp(nsh, this.window[1], nsh) : nsh;\n            const swd = sw - csw;\n            const shd = sh - csh;\n            // Handle cases where the scrollarea dimensions changes during drag\n            if (this.dragged && swd > 0) {\n                this.coords[0] -= swd;\n                this.scrollView[0] = csw;\n            }\n            if (this.dragged && shd > 0) {\n                this.coords[1] -= shd;\n                this.scrollView[1] = csh;\n            }\n            // Handle autoscroll when target is at the edges of the scroll bounds\n            const s = this.scrollSpeed * 10;\n            const threshold = this.scrollThreshold;\n            const [x, y] = this.coords;\n            const [st, sr, sb, sl] = this.scrollBounds;\n            const t = round(clamp((y - st + cpt) / threshold, -1, 0) * s, 0);\n            const r = round(clamp((x - sr - cpr) / threshold, 0, 1) * s, 0);\n            const b = round(clamp((y - sb - cpb) / threshold, 0, 1) * s, 0);\n            const l = round(clamp((x - sl + cpl) / threshold, -1, 0) * s, 0);\n            if (t || b || l || r) {\n                const [nx, ny] = this.disabled;\n                let scrollX = csx;\n                let scrollY = csy;\n                if (!nx) {\n                    scrollX = round(clamp(csx + (l || r), 0, sw - daw), 0);\n                    this.coords[0] -= csx - scrollX;\n                }\n                if (!ny) {\n                    scrollY = round(clamp(csy + (t || b), 0, sh - dah), 0);\n                    this.coords[1] -= csy - scrollY;\n                }\n                // Note: Safari mobile requires to use different scroll methods depending if using the window or not\n                if (this.useWin) {\n                    this.$scrollContainer.scrollBy(-(csx - scrollX), -(csy - scrollY));\n                } else {\n                    this.$scrollContainer.scrollTo(scrollX, scrollY);\n                }\n            }\n        }\n        const [ct, cr, cb, cl] = this.containerBounds;\n        const [px1, py1, px2, py2, px3, py3] = this.pointer;\n        this.coords[0] += (px1 - px3) * this.dragSpeed;\n        this.coords[1] += (py1 - py3) * this.dragSpeed;\n        this.pointer[4] = px1;\n        this.pointer[5] = py1;\n        const [cx, cy] = this.coords;\n        const [sx, sy] = this.snapped;\n        const cf = (1 - this.containerFriction) * this.dragSpeed;\n        this.setX(cx > cr ? cr + (cx - cr) * cf : cx < cl ? cl + (cx - cl) * cf : cx, false);\n        this.setY(cy > cb ? cb + (cy - cb) * cf : cy < ct ? ct + (cy - ct) * cf : cy, false);\n        this.computeVelocity(px1 - px3, py1 - py3);\n        this.angle = atan2(py1 - py2, px1 - px2);\n        const [nsx, nsy] = this.snapped;\n        if (nsx !== sx && this.snapX || nsy !== sy && this.snapY) {\n            this.onSnap(this);\n        }\n    }\n    stop() {\n        this.updateTicker.pause();\n        this.overshootXTicker.pause();\n        this.overshootYTicker.pause();\n        // Pauses the in bounds onRelease animations\n        for(let prop in this.animate.animations)this.animate.animations[prop].pause();\n        remove(this, null, \"x\");\n        remove(this, null, \"y\");\n        remove(this, null, \"progressX\");\n        remove(this, null, \"progressY\");\n        remove(this.scroll); // Removes any active animations on the container scroll\n        remove(this.overshootCoords); // Removes active overshoot animations\n        return this;\n    }\n    /**\n   * @param {Number} [duration]\n   * @param {Number} [gap]\n   * @param {EasingParam} [ease]\n   * @return {this}\n   */ scrollInView(duration) {\n        let gap = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, ease = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : eases.inOutQuad;\n        this.updateScrollCoords();\n        const x = this.destX;\n        const y = this.destY;\n        const scroll = this.scroll;\n        const scrollBounds = this.scrollBounds;\n        const canScroll = this.canScroll;\n        if (!this.containerArray && this.isOutOfBounds(scrollBounds, x, y)) {\n            const [st, sr, sb, sl] = scrollBounds;\n            const t = round(clamp(y - st, -1e12, 0), 0);\n            const r = round(clamp(x - sr, 0, maxValue), 0);\n            const b = round(clamp(y - sb, 0, maxValue), 0);\n            const l = round(clamp(x - sl, -1e12, 0), 0);\n            new JSAnimation(scroll, {\n                x: round(scroll.x + (l ? l - gap : r ? r + gap : 0), 0),\n                y: round(scroll.y + (t ? t - gap : b ? b + gap : 0), 0),\n                duration: isUnd(duration) ? 350 * globals.timeScale : duration,\n                ease,\n                onUpdate: ()=>{\n                    this.canScroll = false;\n                    this.$scrollContainer.scrollTo(scroll.x, scroll.y);\n                }\n            }).init().then(()=>{\n                this.canScroll = canScroll;\n            });\n        }\n        return this;\n    }\n    handleHover() {\n        if (this.isFinePointer && this.cursor && !this.cursorStyles) {\n            this.cursorStyles = setTargetValues(this.$trigger, {\n                cursor: /** @type {DraggableCursorParams} */ this.cursor.onHover\n            });\n        }\n    }\n    /**\n   * @param  {Number} [duration]\n   * @param  {Number} [gap]\n   * @param  {EasingParam} [ease]\n   * @return {this}\n   */ animateInView(duration) {\n        let gap = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, ease = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : eases.inOutQuad;\n        this.stop();\n        this.updateBoundingValues();\n        const x = this.x;\n        const y = this.y;\n        const [cpt, cpr, cpb, cpl] = this.containerPadding;\n        const bt = this.scroll.y - this.targetBounds[0] + cpt + gap;\n        const br = this.scroll.x - this.targetBounds[1] - cpr - gap;\n        const bb = this.scroll.y - this.targetBounds[2] - cpb - gap;\n        const bl = this.scroll.x - this.targetBounds[3] + cpl + gap;\n        const ob = this.isOutOfBounds([\n            bt,\n            br,\n            bb,\n            bl\n        ], x, y);\n        if (ob) {\n            const [disabledX, disabledY] = this.disabled;\n            const destX = clamp(snap(x, this.snapX), bl, br);\n            const destY = clamp(snap(y, this.snapY), bt, bb);\n            const dur = isUnd(duration) ? 350 * globals.timeScale : duration;\n            if (!disabledX && (ob === 1 || ob === 3)) this.animate[this.xProp](destX, dur, ease);\n            if (!disabledY && (ob === 2 || ob === 3)) this.animate[this.yProp](destY, dur, ease);\n        }\n        return this;\n    }\n    /**\n   * @param {MouseEvent|TouchEvent} e\n   */ handleDown(e) {\n        const $eTarget = /** @type {HTMLElement} */ e.target;\n        if (this.grabbed || /** @type {HTMLInputElement}  */ $eTarget.type === \"range\") return;\n        e.stopPropagation();\n        this.grabbed = true;\n        this.released = false;\n        this.stop();\n        this.updateBoundingValues();\n        const touches = /** @type {TouchEvent} */ e.changedTouches;\n        const eventX = touches ? touches[0].clientX : /** @type {MouseEvent} */ e.clientX;\n        const eventY = touches ? touches[0].clientY : /** @type {MouseEvent} */ e.clientY;\n        const { x, y } = this.transforms.normalizePoint(eventX, eventY);\n        const [ct, cr, cb, cl] = this.containerBounds;\n        const cf = (1 - this.containerFriction) * this.dragSpeed;\n        const cx = this.x;\n        const cy = this.y;\n        this.coords[0] = this.coords[2] = !cf ? cx : cx > cr ? cr + (cx - cr) / cf : cx < cl ? cl + (cx - cl) / cf : cx;\n        this.coords[1] = this.coords[3] = !cf ? cy : cy > cb ? cb + (cy - cb) / cf : cy < ct ? ct + (cy - ct) / cf : cy;\n        this.pointer[0] = x;\n        this.pointer[1] = y;\n        this.pointer[2] = x;\n        this.pointer[3] = y;\n        this.pointer[4] = x;\n        this.pointer[5] = y;\n        this.pointer[6] = x;\n        this.pointer[7] = y;\n        this.deltaX = 0;\n        this.deltaY = 0;\n        this.velocity = 0;\n        this.velocityStack[0] = 0;\n        this.velocityStack[1] = 0;\n        this.velocityStack[2] = 0;\n        this.velocityStackIndex = 0;\n        this.angle = 0;\n        if (this.targetStyles) {\n            this.targetStyles.revert();\n            this.targetStyles = null;\n        }\n        const z = /** @type {Number} */ getTargetValue(this.$target, \"zIndex\", false);\n        zIndex = (z > zIndex ? z : zIndex) + 1;\n        this.targetStyles = setTargetValues(this.$target, {\n            zIndex\n        });\n        if (this.triggerStyles) {\n            this.triggerStyles.revert();\n            this.triggerStyles = null;\n        }\n        if (this.cursorStyles) {\n            this.cursorStyles.revert();\n            this.cursorStyles = null;\n        }\n        if (this.isFinePointer && this.cursor) {\n            this.bodyStyles = setTargetValues(doc.body, {\n                cursor: /** @type {DraggableCursorParams} */ this.cursor.onGrab\n            });\n        }\n        this.scrollInView(100, 0, eases.out(3));\n        this.onGrab(this);\n        doc.addEventListener(\"touchmove\", this);\n        doc.addEventListener(\"touchend\", this);\n        doc.addEventListener(\"touchcancel\", this);\n        doc.addEventListener(\"mousemove\", this);\n        doc.addEventListener(\"mouseup\", this);\n        doc.addEventListener(\"selectstart\", this);\n    }\n    /**\n   * @param {MouseEvent|TouchEvent} e\n   */ handleMove(e) {\n        if (!this.grabbed) return;\n        const touches = /** @type {TouchEvent} */ e.changedTouches;\n        const eventX = touches ? touches[0].clientX : /** @type {MouseEvent} */ e.clientX;\n        const eventY = touches ? touches[0].clientY : /** @type {MouseEvent} */ e.clientY;\n        const { x, y } = this.transforms.normalizePoint(eventX, eventY);\n        const movedX = x - this.pointer[6];\n        const movedY = y - this.pointer[7];\n        let $parent = /** @type {HTMLElement} */ e.target;\n        let isAtTop = false;\n        let isAtBottom = false;\n        let canTouchScroll = false;\n        while(touches && $parent && $parent !== this.$trigger){\n            const overflowY = getTargetValue($parent, \"overflow-y\");\n            if (overflowY !== \"hidden\" && overflowY !== \"visible\") {\n                const { scrollTop, scrollHeight, clientHeight } = $parent;\n                if (scrollHeight > clientHeight) {\n                    canTouchScroll = true;\n                    isAtTop = scrollTop <= 3;\n                    isAtBottom = scrollTop >= scrollHeight - clientHeight - 3;\n                    break;\n                }\n            }\n            $parent = /** @type {HTMLElement} */ $parent.parentNode;\n        }\n        if (canTouchScroll && (!isAtTop && !isAtBottom || isAtTop && movedY < 0 || isAtBottom && movedY > 0)) {\n            this.pointer[0] = x;\n            this.pointer[1] = y;\n            this.pointer[2] = x;\n            this.pointer[3] = y;\n            this.pointer[4] = x;\n            this.pointer[5] = y;\n            this.pointer[6] = x;\n            this.pointer[7] = y;\n        } else {\n            preventDefault(e);\n            // Needed to prevents click on handleUp\n            if (!this.triggerStyles) this.triggerStyles = setTargetValues(this.$trigger, {\n                pointerEvents: \"none\"\n            });\n            // Needed to prevent page scroll while dragging on touch devvice\n            this.$trigger.addEventListener(\"touchstart\", preventDefault, {\n                passive: false\n            });\n            this.$trigger.addEventListener(\"touchmove\", preventDefault, {\n                passive: false\n            });\n            this.$trigger.addEventListener(\"touchend\", preventDefault);\n            if (!this.disabled[0] && abs(movedX) > 3 || !this.disabled[1] && abs(movedY) > 3) {\n                this.updateTicker.resume();\n                this.pointer[2] = this.pointer[0];\n                this.pointer[3] = this.pointer[1];\n                this.pointer[0] = x;\n                this.pointer[1] = y;\n                this.dragged = true;\n                this.released = false;\n                this.onDrag(this);\n            }\n        }\n    }\n    handleUp() {\n        if (!this.grabbed) return;\n        this.updateTicker.pause();\n        if (this.triggerStyles) {\n            this.triggerStyles.revert();\n            this.triggerStyles = null;\n        }\n        if (this.bodyStyles) {\n            this.bodyStyles.revert();\n            this.bodyStyles = null;\n        }\n        const [disabledX, disabledY] = this.disabled;\n        const [px1, py1, px2, py2, px3, py3] = this.pointer;\n        const [ct, cr, cb, cl] = this.containerBounds;\n        const [sx, sy] = this.snapped;\n        const springX = this.releaseXSpring;\n        const springY = this.releaseYSpring;\n        const releaseEase = this.releaseEase;\n        const hasReleaseSpring = this.hasReleaseSpring;\n        const overshootCoords = this.overshootCoords;\n        const cx = this.x;\n        const cy = this.y;\n        const pv = this.computeVelocity(px1 - px3, py1 - py3);\n        const pa = this.angle = atan2(py1 - py2, px1 - px2);\n        const ds = pv * 150;\n        const cf = (1 - this.releaseContainerFriction) * this.dragSpeed;\n        const nx = cx + cos(pa) * ds;\n        const ny = cy + sin(pa) * ds;\n        const bx = nx > cr ? cr + (nx - cr) * cf : nx < cl ? cl + (nx - cl) * cf : nx;\n        const by = ny > cb ? cb + (ny - cb) * cf : ny < ct ? ct + (ny - ct) * cf : ny;\n        const dx = this.destX = clamp(round(snap(bx, this.snapX), 5), cl, cr);\n        const dy = this.destY = clamp(round(snap(by, this.snapY), 5), ct, cb);\n        const ob = this.isOutOfBounds(this.containerBounds, nx, ny);\n        let durationX = 0;\n        let durationY = 0;\n        let easeX = releaseEase;\n        let easeY = releaseEase;\n        let longestReleaseDuration = 0;\n        overshootCoords.x = cx;\n        overshootCoords.y = cy;\n        if (!disabledX) {\n            const directionX = dx === cr ? cx > cr ? -1 : 1 : cx < cl ? -1 : 1;\n            const distanceX = round(cx - dx, 0);\n            springX.velocity = disabledY && hasReleaseSpring ? distanceX ? ds * directionX / abs(distanceX) : 0 : pv;\n            const { ease, duration, restDuration } = springX;\n            durationX = cx === dx ? 0 : hasReleaseSpring ? duration : duration - restDuration * globals.timeScale;\n            if (hasReleaseSpring) easeX = ease;\n            if (durationX > longestReleaseDuration) longestReleaseDuration = durationX;\n        }\n        if (!disabledY) {\n            const directionY = dy === cb ? cy > cb ? -1 : 1 : cy < ct ? -1 : 1;\n            const distanceY = round(cy - dy, 0);\n            springY.velocity = disabledX && hasReleaseSpring ? distanceY ? ds * directionY / abs(distanceY) : 0 : pv;\n            const { ease, duration, restDuration } = springY;\n            durationY = cy === dy ? 0 : hasReleaseSpring ? duration : duration - restDuration * globals.timeScale;\n            if (hasReleaseSpring) easeY = ease;\n            if (durationY > longestReleaseDuration) longestReleaseDuration = durationY;\n        }\n        if (!hasReleaseSpring && ob && cf && (durationX || durationY)) {\n            const composition = compositionTypes.blend;\n            new JSAnimation(overshootCoords, {\n                x: {\n                    to: bx,\n                    duration: durationX * .65\n                },\n                y: {\n                    to: by,\n                    duration: durationY * .65\n                },\n                ease: releaseEase,\n                composition\n            }).init();\n            new JSAnimation(overshootCoords, {\n                x: {\n                    to: dx,\n                    duration: durationX\n                },\n                y: {\n                    to: dy,\n                    duration: durationY\n                },\n                ease: releaseEase,\n                composition\n            }).init();\n            this.overshootXTicker.stretch(durationX).restart();\n            this.overshootYTicker.stretch(durationY).restart();\n        } else {\n            if (!disabledX) this.animate[this.xProp](dx, durationX, easeX);\n            if (!disabledY) this.animate[this.yProp](dy, durationY, easeY);\n        }\n        this.scrollInView(longestReleaseDuration, this.scrollThreshold, releaseEase);\n        let hasSnapped = false;\n        if (dx !== sx) {\n            this.snapped[0] = dx;\n            if (this.snapX) hasSnapped = true;\n        }\n        if (dy !== sy && this.snapY) {\n            this.snapped[1] = dy;\n            if (this.snapY) hasSnapped = true;\n        }\n        if (hasSnapped) this.onSnap(this);\n        this.grabbed = false;\n        this.dragged = false;\n        this.updated = true;\n        this.released = true;\n        // It's important to trigger the callback after the release animations to be able to cancel them\n        this.onRelease(this);\n        this.$trigger.removeEventListener(\"touchstart\", preventDefault);\n        this.$trigger.removeEventListener(\"touchmove\", preventDefault);\n        this.$trigger.removeEventListener(\"touchend\", preventDefault);\n        doc.removeEventListener(\"touchmove\", this);\n        doc.removeEventListener(\"touchend\", this);\n        doc.removeEventListener(\"touchcancel\", this);\n        doc.removeEventListener(\"mousemove\", this);\n        doc.removeEventListener(\"mouseup\", this);\n        doc.removeEventListener(\"selectstart\", this);\n    }\n    reset() {\n        this.stop();\n        this.resizeTicker.pause();\n        this.grabbed = false;\n        this.dragged = false;\n        this.updated = false;\n        this.released = false;\n        this.canScroll = false;\n        this.setX(0, true);\n        this.setY(0, true);\n        this.coords[0] = 0;\n        this.coords[1] = 0;\n        this.pointer[0] = 0;\n        this.pointer[1] = 0;\n        this.pointer[2] = 0;\n        this.pointer[3] = 0;\n        this.pointer[4] = 0;\n        this.pointer[5] = 0;\n        this.pointer[6] = 0;\n        this.pointer[7] = 0;\n        this.velocity = 0;\n        this.velocityStack[0] = 0;\n        this.velocityStack[1] = 0;\n        this.velocityStack[2] = 0;\n        this.velocityStackIndex = 0;\n        this.angle = 0;\n        return this;\n    }\n    enable() {\n        if (!this.enabled) {\n            this.enabled = true;\n            this.$target.classList.remove(\"is-disabled\");\n            this.touchActionStyles = setTargetValues(this.$trigger, {\n                touchAction: this.disabled[0] ? \"pan-x\" : this.disabled[1] ? \"pan-y\" : \"none\"\n            });\n            this.$trigger.addEventListener(\"touchstart\", this, {\n                passive: true\n            });\n            this.$trigger.addEventListener(\"mousedown\", this, {\n                passive: true\n            });\n            this.$trigger.addEventListener(\"mouseenter\", this);\n        }\n        return this;\n    }\n    disable() {\n        this.enabled = false;\n        this.grabbed = false;\n        this.dragged = false;\n        this.updated = false;\n        this.released = false;\n        this.canScroll = false;\n        this.touchActionStyles.revert();\n        if (this.cursorStyles) {\n            this.cursorStyles.revert();\n            this.cursorStyles = null;\n        }\n        if (this.triggerStyles) {\n            this.triggerStyles.revert();\n            this.triggerStyles = null;\n        }\n        if (this.bodyStyles) {\n            this.bodyStyles.revert();\n            this.bodyStyles = null;\n        }\n        if (this.targetStyles) {\n            this.targetStyles.revert();\n            this.targetStyles = null;\n        }\n        this.stop();\n        this.$target.classList.add(\"is-disabled\");\n        this.$trigger.removeEventListener(\"touchstart\", this);\n        this.$trigger.removeEventListener(\"mousedown\", this);\n        this.$trigger.removeEventListener(\"mouseenter\", this);\n        doc.removeEventListener(\"touchmove\", this);\n        doc.removeEventListener(\"touchend\", this);\n        doc.removeEventListener(\"touchcancel\", this);\n        doc.removeEventListener(\"mousemove\", this);\n        doc.removeEventListener(\"mouseup\", this);\n        doc.removeEventListener(\"selectstart\", this);\n        return this;\n    }\n    revert() {\n        this.reset();\n        this.disable();\n        this.$target.classList.remove(\"is-disabled\");\n        this.updateTicker.revert();\n        this.overshootXTicker.revert();\n        this.overshootYTicker.revert();\n        this.resizeTicker.revert();\n        this.animate.revert();\n        return this;\n    }\n    /**\n   * @param {Event} e\n   */ handleEvent(e) {\n        switch(e.type){\n            case \"mousedown\":\n                this.handleDown(/** @type {MouseEvent} */ e);\n                break;\n            case \"touchstart\":\n                this.handleDown(/** @type {TouchEvent} */ e);\n                break;\n            case \"mousemove\":\n                this.handleMove(/** @type {MouseEvent} */ e);\n                break;\n            case \"touchmove\":\n                this.handleMove(/** @type {TouchEvent} */ e);\n                break;\n            case \"mouseup\":\n                this.handleUp();\n                break;\n            case \"touchend\":\n                this.handleUp();\n                break;\n            case \"touchcancel\":\n                this.handleUp();\n                break;\n            case \"mouseenter\":\n                this.handleHover();\n                break;\n            case \"selectstart\":\n                preventDefault(e);\n                break;\n        }\n    }\n    /**\n   * @param {TargetsParam} target\n   * @param {DraggableParams} [parameters]\n   */ constructor(target, parameters = {}){\n        if (!target) return;\n        if (globals.scope) globals.scope.revertibles.push(this);\n        const paramX = parameters.x;\n        const paramY = parameters.y;\n        const trigger = parameters.trigger;\n        const modifier = parameters.modifier;\n        const ease = parameters.releaseEase;\n        const customEase = ease && parseEasings(ease);\n        const hasSpring = !isUnd(ease) && !isUnd(/** @type {Spring} */ ease.ease);\n        const xProp = /** @type {String} */ isObj(paramX) && !isUnd(/** @type {Object} */ paramX.mapTo) ? /** @type {Object} */ paramX.mapTo : \"translateX\";\n        const yProp = /** @type {String} */ isObj(paramY) && !isUnd(/** @type {Object} */ paramY.mapTo) ? /** @type {Object} */ paramY.mapTo : \"translateY\";\n        const container = parseDraggableFunctionParameter(parameters.container, this);\n        this.containerArray = isArr(container) ? container : null;\n        this.$container = /** @type {HTMLElement} */ container && !this.containerArray ? parseTargets(/** @type {DOMTarget} */ container)[0] : doc.body;\n        this.useWin = this.$container === doc.body;\n        /** @type {Window | HTMLElement} */ this.$scrollContainer = this.useWin ? win : this.$container;\n        this.$target = /** @type {HTMLElement} */ isObj(target) ? new DOMProxy(target) : parseTargets(target)[0];\n        this.$trigger = /** @type {HTMLElement} */ parseTargets(trigger ? trigger : target)[0];\n        this.fixed = getTargetValue(this.$target, \"position\") === \"fixed\";\n        // Refreshable parameters\n        this.isFinePointer = true;\n        /** @type {[Number, Number, Number, Number]} */ this.containerPadding = [\n            0,\n            0,\n            0,\n            0\n        ];\n        /** @type {Number} */ this.containerFriction = 0;\n        /** @type {Number} */ this.releaseContainerFriction = 0;\n        /** @type {Number|Array<Number>} */ this.snapX = 0;\n        /** @type {Number|Array<Number>} */ this.snapY = 0;\n        /** @type {Number} */ this.scrollSpeed = 0;\n        /** @type {Number} */ this.scrollThreshold = 0;\n        /** @type {Number} */ this.dragSpeed = 0;\n        /** @type {Number} */ this.maxVelocity = 0;\n        /** @type {Number} */ this.minVelocity = 0;\n        /** @type {Number} */ this.velocityMultiplier = 0;\n        /** @type {Boolean|DraggableCursorParams} */ this.cursor = false;\n        /** @type {Spring} */ this.releaseXSpring = hasSpring ? /** @type {Spring} */ ease : createSpring({\n            mass: setValue(parameters.releaseMass, 1),\n            stiffness: setValue(parameters.releaseStiffness, 80),\n            damping: setValue(parameters.releaseDamping, 20)\n        });\n        /** @type {Spring} */ this.releaseYSpring = hasSpring ? /** @type {Spring} */ ease : createSpring({\n            mass: setValue(parameters.releaseMass, 1),\n            stiffness: setValue(parameters.releaseStiffness, 80),\n            damping: setValue(parameters.releaseDamping, 20)\n        });\n        /** @type {EasingFunction} */ this.releaseEase = customEase || eases.outQuint;\n        /** @type {Boolean} */ this.hasReleaseSpring = hasSpring;\n        /** @type {Callback<this>} */ this.onGrab = parameters.onGrab || noop;\n        /** @type {Callback<this>} */ this.onDrag = parameters.onDrag || noop;\n        /** @type {Callback<this>} */ this.onRelease = parameters.onRelease || noop;\n        /** @type {Callback<this>} */ this.onUpdate = parameters.onUpdate || noop;\n        /** @type {Callback<this>} */ this.onSettle = parameters.onSettle || noop;\n        /** @type {Callback<this>} */ this.onSnap = parameters.onSnap || noop;\n        /** @type {Callback<this>} */ this.onResize = parameters.onResize || noop;\n        /** @type {Callback<this>} */ this.onAfterResize = parameters.onAfterResize || noop;\n        /** @type {[Number, Number]} */ this.disabled = [\n            0,\n            0\n        ];\n        /** @type {AnimatableParams} */ const animatableParams = {};\n        if (modifier) animatableParams.modifier = modifier;\n        if (isUnd(paramX) || paramX === true) {\n            animatableParams[xProp] = 0;\n        } else if (isObj(paramX)) {\n            const paramXObject = /** @type {DraggableAxisParam} */ paramX;\n            const animatableXParams = {};\n            if (paramXObject.modifier) animatableXParams.modifier = paramXObject.modifier;\n            if (paramXObject.composition) animatableXParams.composition = paramXObject.composition;\n            animatableParams[xProp] = animatableXParams;\n        } else if (paramX === false) {\n            animatableParams[xProp] = 0;\n            this.disabled[0] = 1;\n        }\n        if (isUnd(paramY) || paramY === true) {\n            animatableParams[yProp] = 0;\n        } else if (isObj(paramY)) {\n            const paramYObject = /** @type {DraggableAxisParam} */ paramY;\n            const animatableYParams = {};\n            if (paramYObject.modifier) animatableYParams.modifier = paramYObject.modifier;\n            if (paramYObject.composition) animatableYParams.composition = paramYObject.composition;\n            animatableParams[yProp] = animatableYParams;\n        } else if (paramY === false) {\n            animatableParams[yProp] = 0;\n            this.disabled[1] = 1;\n        }\n        /** @type {AnimatableObject} */ this.animate = /** @type {AnimatableObject} */ new Animatable(this.$target, animatableParams);\n        // Internal props\n        this.xProp = xProp;\n        this.yProp = yProp;\n        this.destX = 0;\n        this.destY = 0;\n        this.deltaX = 0;\n        this.deltaY = 0;\n        this.scroll = {\n            x: 0,\n            y: 0\n        };\n        /** @type {[Number, Number, Number, Number]} */ this.coords = [\n            this.x,\n            this.y,\n            0,\n            0\n        ]; // x, y, temp x, temp y\n        /** @type {[Number, Number]} */ this.snapped = [\n            0,\n            0\n        ]; // x, y\n        /** @type {[Number, Number, Number, Number, Number, Number, Number, Number]} */ this.pointer = [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ]; // x1, y1, x2, y2, temp x1, temp y1, temp x2, temp y2\n        /** @type {[Number, Number]} */ this.scrollView = [\n            0,\n            0\n        ]; // w, h\n        /** @type {[Number, Number, Number, Number]} */ this.dragArea = [\n            0,\n            0,\n            0,\n            0\n        ]; // x, y, w, h\n        /** @type {[Number, Number, Number, Number]} */ this.containerBounds = [\n            -1e12,\n            maxValue,\n            maxValue,\n            -1e12\n        ]; // t, r, b, l\n        /** @type {[Number, Number, Number, Number]} */ this.scrollBounds = [\n            0,\n            0,\n            0,\n            0\n        ]; // t, r, b, l\n        /** @type {[Number, Number, Number, Number]} */ this.targetBounds = [\n            0,\n            0,\n            0,\n            0\n        ]; // t, r, b, l\n        /** @type {[Number, Number]} */ this.window = [\n            0,\n            0\n        ]; // w, h\n        /** @type {[Number, Number, Number]} */ this.velocityStack = [\n            0,\n            0,\n            0\n        ];\n        /** @type {Number} */ this.velocityStackIndex = 0;\n        /** @type {Number} */ this.velocityTime = now();\n        /** @type {Number} */ this.velocity = 0;\n        /** @type {Number} */ this.angle = 0;\n        /** @type {JSAnimation} */ this.cursorStyles = null;\n        /** @type {JSAnimation} */ this.triggerStyles = null;\n        /** @type {JSAnimation} */ this.bodyStyles = null;\n        /** @type {JSAnimation} */ this.targetStyles = null;\n        /** @type {JSAnimation} */ this.touchActionStyles = null;\n        this.transforms = new Transforms(this.$target);\n        this.overshootCoords = {\n            x: 0,\n            y: 0\n        };\n        this.overshootXTicker = new Timer({\n            autoplay: false\n        }, null, 0).init();\n        this.overshootYTicker = new Timer({\n            autoplay: false\n        }, null, 0).init();\n        this.updateTicker = new Timer({\n            autoplay: false\n        }, null, 0).init();\n        this.overshootXTicker.onUpdate = ()=>{\n            if (this.disabled[0]) return;\n            this.updated = true;\n            this.manual = true;\n            this.animate[this.xProp](this.overshootCoords.x, 0);\n        };\n        this.overshootXTicker.onComplete = ()=>{\n            if (this.disabled[0]) return;\n            this.manual = false;\n            this.animate[this.xProp](this.overshootCoords.x, 0);\n        };\n        this.overshootYTicker.onUpdate = ()=>{\n            if (this.disabled[1]) return;\n            this.updated = true;\n            this.manual = true;\n            this.animate[this.yProp](this.overshootCoords.y, 0);\n        };\n        this.overshootYTicker.onComplete = ()=>{\n            if (this.disabled[1]) return;\n            this.manual = false;\n            this.animate[this.yProp](this.overshootCoords.y, 0);\n        };\n        this.updateTicker.onUpdate = ()=>this.update();\n        this.contained = !isUnd(container);\n        this.manual = false;\n        this.grabbed = false;\n        this.dragged = false;\n        this.updated = false;\n        this.released = false;\n        this.canScroll = false;\n        this.enabled = false;\n        this.initialized = false;\n        this.activeProp = this.disabled[1] ? xProp : yProp;\n        this.animate.animations[this.activeProp].onRender = ()=>{\n            const hasUpdated = this.updated;\n            const hasMoved = this.grabbed && hasUpdated;\n            const hasReleased = !hasMoved && this.released;\n            const x = this.x;\n            const y = this.y;\n            const dx = x - this.coords[2];\n            const dy = y - this.coords[3];\n            this.deltaX = dx;\n            this.deltaY = dy;\n            this.coords[2] = x;\n            this.coords[3] = y;\n            if (hasUpdated) {\n                this.onUpdate(this);\n            }\n            if (!hasReleased) {\n                this.updated = false;\n            } else {\n                this.computeVelocity(dx, dy);\n                this.angle = atan2(dy, dx);\n            }\n        };\n        this.animate.animations[this.activeProp].onComplete = ()=>{\n            if (!this.grabbed && this.released) {\n                // Set eleased to false before calling onSettle to avoid recursion\n                this.released = false;\n            }\n            if (!this.manual) {\n                this.deltaX = 0;\n                this.deltaY = 0;\n                this.velocity = 0;\n                this.velocityStack[0] = 0;\n                this.velocityStack[1] = 0;\n                this.velocityStack[2] = 0;\n                this.velocityStackIndex = 0;\n                this.onSettle(this);\n            }\n        };\n        this.resizeTicker = new Timer({\n            autoplay: false,\n            duration: 150 * globals.timeScale,\n            onComplete: ()=>{\n                this.onResize(this);\n                this.refresh();\n                this.onAfterResize(this);\n            }\n        }).init();\n        this.parameters = parameters;\n        this.resizeObserver = new ResizeObserver(()=>{\n            if (this.initialized) {\n                this.resizeTicker.restart();\n            } else {\n                this.initialized = true;\n            }\n        });\n        this.enable();\n        this.refresh();\n        this.resizeObserver.observe(this.$container);\n        if (!isObj(target)) this.resizeObserver.observe(this.$target);\n    }\n}\n/**\n * @param {TargetsParam} target\n * @param {DraggableParams} [parameters]\n * @return {Draggable}\n */ const createDraggable = (target, parameters)=>new Draggable(target, parameters);\n/**\n * @typedef {Object} ReactRef\n * @property {HTMLElement|SVGElement|null} [current]\n */ /**\n * @typedef {Object} AngularRef\n * @property {HTMLElement|SVGElement} [nativeElement]\n */ /**\n * @typedef {Object} ScopeParams\n * @property {DOMTargetSelector|ReactRef|AngularRef} [root]\n * @property {DefaultsParams} [defaults]\n * @property {Record<String, String>} [mediaQueries]\n */ /**\n * @callback ScopeCleanup\n * @param {Scope} [scope]\n */ /**\n * @callback ScopeConstructor\n * @param {Scope} [scope]\n * @return {ScopeCleanup|void}\n */ /**\n * @callback ScopeMethod\n * @param {...*} args\n * @return {ScopeCleanup|void}\n */ class Scope {\n    /**\n   * @callback ScoppedCallback\n   * @param {this} scope\n   * @return {any}\n   *\n   * @param {ScoppedCallback} cb\n   * @return {this}\n   */ execute(cb) {\n        let activeScope = globals.scope;\n        let activeRoot = globals.root;\n        let activeDefaults = globals.defaults;\n        globals.scope = this;\n        globals.root = this.root;\n        globals.defaults = this.defaults;\n        const mqs = this.mediaQueryLists;\n        for(let mq in mqs)this.matches[mq] = mqs[mq].matches;\n        const returned = cb(this);\n        globals.scope = activeScope;\n        globals.root = activeRoot;\n        globals.defaults = activeDefaults;\n        return returned;\n    }\n    /**\n   * @return {this}\n   */ refresh() {\n        this.execute(()=>{\n            let i = this.revertibles.length;\n            let y = this.revertConstructors.length;\n            while(i--)this.revertibles[i].revert();\n            while(y--)this.revertConstructors[y](this);\n            this.revertibles.length = 0;\n            this.revertConstructors.length = 0;\n            this.constructors.forEach((constructor)=>{\n                const revertConstructor = constructor(this);\n                if (revertConstructor) {\n                    this.revertConstructors.push(revertConstructor);\n                }\n            });\n        });\n        return this;\n    }\n    /**\n   * @callback contructorCallback\n   * @param {this} self\n   *\n   * @overload\n   * @param {String} a1\n   * @param {ScopeMethod} a2\n   * @return {this}\n   *\n   * @overload\n   * @param {contructorCallback} a1\n   * @return {this}\n   *\n   * @param {String|contructorCallback} a1\n   * @param {ScopeMethod} [a2]\n   */ add(a1, a2) {\n        if (isFnc(a1)) {\n            const constructor = /** @type {contructorCallback} */ a1;\n            this.constructors.push(constructor);\n            this.execute(()=>{\n                const revertConstructor = constructor(this);\n                if (revertConstructor) {\n                    this.revertConstructors.push(revertConstructor);\n                }\n            });\n        } else {\n            var _this = this;\n            this.methods[/** @type {String} */ a1] = function() {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                return _this.execute(()=>a2(...args));\n            };\n        }\n        return this;\n    }\n    /**\n   * @param {Event} e\n   */ handleEvent(e) {\n        switch(e.type){\n            case \"change\":\n                this.refresh();\n                break;\n        }\n    }\n    revert() {\n        const revertibles = this.revertibles;\n        const revertConstructors = this.revertConstructors;\n        const mqs = this.mediaQueryLists;\n        let i = revertibles.length;\n        let y = revertConstructors.length;\n        while(i--)revertibles[i].revert();\n        while(y--)revertConstructors[y](this);\n        for(let mq in mqs)mqs[mq].removeEventListener(\"change\", this);\n        revertibles.length = 0;\n        revertConstructors.length = 0;\n        this.constructors.length = 0;\n        this.matches = {};\n        this.methods = {};\n        this.mediaQueryLists = {};\n        this.data = {};\n    }\n    /** @param {ScopeParams} [parameters] */ constructor(parameters = {}){\n        if (globals.scope) globals.scope.revertibles.push(this);\n        const rootParam = parameters.root;\n        /** @type {Document|DOMTarget} */ let root = doc;\n        if (rootParam) {\n            root = /** @type {ReactRef} */ rootParam.current || /** @type {AngularRef} */ rootParam.nativeElement || parseTargets(/** @type {DOMTargetSelector} */ rootParam)[0] || doc;\n        }\n        const scopeDefaults = parameters.defaults;\n        const globalDefault = globals.defaults;\n        const mediaQueries = parameters.mediaQueries;\n        /** @type {DefaultsParams} */ this.defaults = scopeDefaults ? mergeObjects(scopeDefaults, globalDefault) : globalDefault;\n        /** @type {Document|DOMTarget} */ this.root = root;\n        /** @type {Array<ScopeConstructor>} */ this.constructors = [];\n        /** @type {Array<Function>} */ this.revertConstructors = [];\n        /** @type {Array<Revertible>} */ this.revertibles = [];\n        /** @type {Record<String, Function>} */ this.methods = {};\n        /** @type {Record<String, Boolean>} */ this.matches = {};\n        /** @type {Record<String, MediaQueryList>} */ this.mediaQueryLists = {};\n        /** @type {Record<String, any>} */ this.data = {};\n        if (mediaQueries) {\n            for(let mq in mediaQueries){\n                const _mq = win.matchMedia(mediaQueries[mq]);\n                this.mediaQueryLists[mq] = _mq;\n                _mq.addEventListener(\"change\", this);\n            }\n        }\n    }\n}\n/**\n * @param {ScopeParams} [params]\n * @return {Scope}\n */ const createScope = (params)=>new Scope(params);\n/**\n * @typedef {String|Number} ScrollThresholdValue\n */ /**\n * @return {Number}\n */ const getMaxViewHeight = ()=>{\n    const $el = document.createElement(\"div\");\n    doc.body.appendChild($el);\n    $el.style.height = \"100lvh\";\n    const height = $el.offsetHeight;\n    doc.body.removeChild($el);\n    return height;\n};\n/**\n * @template {ScrollThresholdValue|String|Number|Boolean|Function|Object} T\n * @param {T | ((observer: ScrollObserver) => T)} value\n * @param {ScrollObserver} scroller\n * @return {T}\n */ const parseScrollObserverFunctionParameter = (value, scroller)=>value && isFnc(value) ? /** @type {Function} */ value(scroller) : value;\nconst scrollContainers = new Map();\nclass ScrollContainer {\n    updateScrollCoords() {\n        const useWin = this.useWin;\n        const $el = this.element;\n        this.scrollX = round(useWin ? win.scrollX : $el.scrollLeft, 0);\n        this.scrollY = round(useWin ? win.scrollY : $el.scrollTop, 0);\n    }\n    updateWindowBounds() {\n        this.winWidth = win.innerWidth;\n        this.winHeight = getMaxViewHeight();\n    }\n    updateBounds() {\n        const style = getComputedStyle(this.element);\n        const $el = this.element;\n        this.scrollWidth = $el.scrollWidth + parseFloat(style.marginLeft) + parseFloat(style.marginRight);\n        this.scrollHeight = $el.scrollHeight + parseFloat(style.marginTop) + parseFloat(style.marginBottom);\n        this.updateWindowBounds();\n        let width, height;\n        if (this.useWin) {\n            width = this.winWidth;\n            height = this.winHeight;\n        } else {\n            const elRect = $el.getBoundingClientRect();\n            width = elRect.width;\n            height = elRect.height;\n            this.top = elRect.top;\n            this.left = elRect.left;\n        }\n        this.width = width;\n        this.height = height;\n    }\n    refreshScrollObservers() {\n        forEachChildren(this, (/** @type {ScrollObserver} */ child)=>{\n            if (child._debug) {\n                child.removeDebug();\n            }\n        });\n        this.updateBounds();\n        forEachChildren(this, (/** @type {ScrollObserver} */ child)=>{\n            child.refresh();\n            if (child._debug) {\n                child.debug();\n            }\n        });\n    }\n    refresh() {\n        this.updateWindowBounds();\n        this.updateBounds();\n        this.refreshScrollObservers();\n        this.handleScroll();\n    }\n    handleScroll() {\n        this.updateScrollCoords();\n        this.wakeTicker.restart();\n    }\n    /**\n   * @param {Event} e\n   */ handleEvent(e) {\n        switch(e.type){\n            case \"scroll\":\n                this.handleScroll();\n                break;\n        }\n    }\n    revert() {\n        this.scrollTicker.cancel();\n        this.dataTimer.cancel();\n        this.resizeTicker.cancel();\n        this.wakeTicker.cancel();\n        this.resizeObserver.unobserve(this.element);\n        (this.useWin ? win : this.element).removeEventListener(\"scroll\", this);\n        scrollContainers.delete(this.element);\n    }\n    /**\n   * @param {HTMLElement} $el\n   */ constructor($el){\n        /** @type {HTMLElement} */ this.element = $el;\n        /** @type {Boolean} */ this.useWin = this.element === doc.body;\n        /** @type {Number} */ this.winWidth = 0;\n        /** @type {Number} */ this.winHeight = 0;\n        /** @type {Number} */ this.width = 0;\n        /** @type {Number} */ this.height = 0;\n        /** @type {Number} */ this.left = 0;\n        /** @type {Number} */ this.top = 0;\n        /** @type {Number} */ this.zIndex = 0;\n        /** @type {Number} */ this.scrollX = 0;\n        /** @type {Number} */ this.scrollY = 0;\n        /** @type {Number} */ this.prevScrollX = 0;\n        /** @type {Number} */ this.prevScrollY = 0;\n        /** @type {Number} */ this.scrollWidth = 0;\n        /** @type {Number} */ this.scrollHeight = 0;\n        /** @type {Number} */ this.velocity = 0;\n        /** @type {Boolean} */ this.backwardX = false;\n        /** @type {Boolean} */ this.backwardY = false;\n        /** @type {Timer} */ this.scrollTicker = new Timer({\n            autoplay: false,\n            onBegin: ()=>this.dataTimer.resume(),\n            onUpdate: ()=>{\n                const backwards = this.backwardX || this.backwardY;\n                forEachChildren(this, (/** @type {ScrollObserver} */ child)=>child.handleScroll(), backwards);\n            },\n            onComplete: ()=>this.dataTimer.pause()\n        }).init();\n        /** @type {Timer} */ this.dataTimer = new Timer({\n            autoplay: false,\n            frameRate: 30,\n            onUpdate: (self)=>{\n                const dt = self.deltaTime;\n                const px = this.prevScrollX;\n                const py = this.prevScrollY;\n                const nx = this.scrollX;\n                const ny = this.scrollY;\n                const dx = px - nx;\n                const dy = py - ny;\n                this.prevScrollX = nx;\n                this.prevScrollY = ny;\n                if (dx) this.backwardX = px > nx;\n                if (dy) this.backwardY = py > ny;\n                this.velocity = round(dt > 0 ? Math.sqrt(dx * dx + dy * dy) / dt : 0, 5);\n            }\n        }).init();\n        /** @type {Timer} */ this.resizeTicker = new Timer({\n            autoplay: false,\n            duration: 250 * globals.timeScale,\n            onComplete: ()=>{\n                this.updateWindowBounds();\n                this.refreshScrollObservers();\n                this.handleScroll();\n            }\n        }).init();\n        /** @type {Timer} */ this.wakeTicker = new Timer({\n            autoplay: false,\n            duration: 500 * globals.timeScale,\n            onBegin: ()=>{\n                this.scrollTicker.resume();\n            },\n            onComplete: ()=>{\n                this.scrollTicker.pause();\n            }\n        }).init();\n        /** @type {ScrollObserver} */ this._head = null;\n        /** @type {ScrollObserver} */ this._tail = null;\n        this.updateScrollCoords();\n        this.updateWindowBounds();\n        this.updateBounds();\n        this.refreshScrollObservers();\n        this.handleScroll();\n        this.resizeObserver = new ResizeObserver(()=>this.resizeTicker.restart());\n        this.resizeObserver.observe(this.element);\n        (this.useWin ? win : this.element).addEventListener(\"scroll\", this, false);\n    }\n}\n/**\n * @param {TargetsParam} target\n * @return {ScrollContainer}\n */ const registerAndGetScrollContainer = (target)=>{\n    const $el = /** @type {HTMLElement} */ target ? parseTargets(target)[0] || doc.body : doc.body;\n    let scrollContainer = scrollContainers.get($el);\n    if (!scrollContainer) {\n        scrollContainer = new ScrollContainer($el);\n        scrollContainers.set($el, scrollContainer);\n    }\n    return scrollContainer;\n};\n/**\n * @param {HTMLElement} $el\n * @param {Number|string} v\n * @param {Number} size\n * @param {Number} [under]\n * @param {Number} [over]\n * @return {Number}\n */ const convertValueToPx = ($el, v, size, under, over)=>{\n    const clampMin = v === \"min\";\n    const clampMax = v === \"max\";\n    const value = v === \"top\" || v === \"left\" || v === \"start\" || clampMin ? 0 : v === \"bottom\" || v === \"right\" || v === \"end\" || clampMax ? \"100%\" : v === \"center\" ? \"50%\" : v;\n    const { n, u } = decomposeRawValue(value, decomposedOriginalValue);\n    let px = n;\n    if (u === \"%\") {\n        px = n / 100 * size;\n    } else if (u) {\n        px = convertValueUnit($el, decomposedOriginalValue, \"px\", true).n;\n    }\n    if (clampMax && under < 0) px += under;\n    if (clampMin && over > 0) px += over;\n    return px;\n};\n/**\n * @param {HTMLElement} $el\n * @param {ScrollThresholdValue} v\n * @param {Number} size\n * @param {Number} [under]\n * @param {Number} [over]\n * @return {Number}\n */ const parseBoundValue = ($el, v, size, under, over)=>{\n    /** @type {Number} */ let value;\n    if (isStr(v)) {\n        const matchedOperator = relativeValuesExecRgx.exec(/** @type {String} */ v);\n        if (matchedOperator) {\n            const splitter = matchedOperator[0];\n            const operator = splitter[0];\n            const splitted = /** @type {String} */ v.split(splitter);\n            const clampMin = splitted[0] === \"min\";\n            const clampMax = splitted[0] === \"max\";\n            const valueAPx = convertValueToPx($el, splitted[0], size, under, over);\n            const valueBPx = convertValueToPx($el, splitted[1], size, under, over);\n            if (clampMin) {\n                const min = getRelativeValue(convertValueToPx($el, \"min\", size), valueBPx, operator);\n                value = min < valueAPx ? valueAPx : min;\n            } else if (clampMax) {\n                const max = getRelativeValue(convertValueToPx($el, \"max\", size), valueBPx, operator);\n                value = max > valueAPx ? valueAPx : max;\n            } else {\n                value = getRelativeValue(valueAPx, valueBPx, operator);\n            }\n        } else {\n            value = convertValueToPx($el, v, size, under, over);\n        }\n    } else {\n        value = /** @type {Number} */ v;\n    }\n    return round(value, 0);\n};\n/**\n * @param {JSAnimation} linked\n * @return {HTMLElement}\n */ const getAnimationDomTarget = (linked)=>{\n    let $linkedTarget;\n    const linkedTargets = linked.targets;\n    for(let i = 0, l = linkedTargets.length; i < l; i++){\n        const target = linkedTargets[i];\n        if (target[isDomSymbol]) {\n            $linkedTarget = /** @type {HTMLElement} */ target;\n            break;\n        }\n    }\n    return $linkedTarget;\n};\nlet scrollerIndex = 0;\nconst debugColors = [\n    \"#FF4B4B\",\n    \"#FF971B\",\n    \"#FFC730\",\n    \"#F9F640\",\n    \"#7AFF5A\",\n    \"#18FF74\",\n    \"#17E09B\",\n    \"#3CFFEC\",\n    \"#05DBE9\",\n    \"#33B3F1\",\n    \"#638CF9\",\n    \"#C563FE\",\n    \"#FF4FCF\",\n    \"#F93F8A\"\n];\n/**\n * @typedef {Object} ScrollThresholdParam\n * @property {ScrollThresholdValue} [target]\n * @property {ScrollThresholdValue} [container]\n */ /**\n * @callback ScrollObserverAxisCallback\n * @param {ScrollObserver} self\n * @return {'x'|'y'}\n */ /**\n * @callback ScrollThresholdCallback\n * @param {ScrollObserver} self\n * @return {ScrollThresholdValue|ScrollThresholdParam}\n */ /**\n * @typedef {Object} ScrollObserverParams\n * @property {Number|String} [id]\n * @property {Boolean|Number|String|EasingParam} [sync]\n * @property {TargetsParam} [container]\n * @property {TargetsParam} [target]\n * @property {'x'|'y'|ScrollObserverAxisCallback|((observer: ScrollObserver) => 'x'|'y'|ScrollObserverAxisCallback)} [axis]\n * @property {ScrollThresholdValue|ScrollThresholdParam|ScrollThresholdCallback|((observer: ScrollObserver) => ScrollThresholdValue|ScrollThresholdParam|ScrollThresholdCallback)} [enter]\n * @property {ScrollThresholdValue|ScrollThresholdParam|ScrollThresholdCallback|((observer: ScrollObserver) => ScrollThresholdValue|ScrollThresholdParam|ScrollThresholdCallback)} [leave]\n * @property {Boolean|((observer: ScrollObserver) => Boolean)} [repeat]\n * @property {Boolean} [debug]\n * @property {Callback<ScrollObserver>} [onEnter]\n * @property {Callback<ScrollObserver>} [onLeave]\n * @property {Callback<ScrollObserver>} [onEnterForward]\n * @property {Callback<ScrollObserver>} [onLeaveForward]\n * @property {Callback<ScrollObserver>} [onEnterBackward]\n * @property {Callback<ScrollObserver>} [onLeaveBackward]\n * @property {Callback<ScrollObserver>} [onUpdate]\n * @property {Callback<ScrollObserver>} [onSyncComplete]\n */ class ScrollObserver {\n    /**\n   * @param {Tickable|WAAPIAnimation} linked\n   */ link(linked) {\n        if (linked) {\n            // Make sure to pause the linked object in case it's added later\n            linked.pause();\n            this.linked = linked;\n            // Try to use a target of the linked object if no target parameters specified\n            if (!this._params.target) {\n                /** @type {HTMLElement} */ let $linkedTarget;\n                if (!isUnd(/** @type {JSAnimation} */ linked.targets)) {\n                    $linkedTarget = getAnimationDomTarget(/** @type {JSAnimation} */ linked);\n                } else {\n                    forEachChildren(/** @type {Timeline} */ linked, (/** @type {JSAnimation} */ child)=>{\n                        if (child.targets && !$linkedTarget) {\n                            $linkedTarget = getAnimationDomTarget(/** @type {JSAnimation} */ child);\n                        }\n                    });\n                }\n                // Fallback to body if no target found\n                this.target = $linkedTarget || doc.body;\n                this.refresh();\n            }\n        }\n        return this;\n    }\n    get velocity() {\n        return this.container.velocity;\n    }\n    get backward() {\n        return this.horizontal ? this.container.backwardX : this.container.backwardY;\n    }\n    get scroll() {\n        return this.horizontal ? this.container.scrollX : this.container.scrollY;\n    }\n    get progress() {\n        const p = (this.scroll - this.offsetStart) / this.distance;\n        return p === Infinity || isNaN(p) ? 0 : round(clamp(p, 0, 1), 6);\n    }\n    refresh() {\n        this.reverted = false;\n        const params = this._params;\n        this.repeat = setValue(parseScrollObserverFunctionParameter(params.repeat, this), true);\n        this.horizontal = setValue(parseScrollObserverFunctionParameter(params.axis, this), \"y\") === \"x\";\n        this.enter = setValue(parseScrollObserverFunctionParameter(params.enter, this), \"end start\");\n        this.leave = setValue(parseScrollObserverFunctionParameter(params.leave, this), \"start end\");\n        this.updateBounds();\n        this.handleScroll();\n        return this;\n    }\n    removeDebug() {\n        if (this.$debug) {\n            this.$debug.parentNode.removeChild(this.$debug);\n            this.$debug = null;\n        }\n        if (this.debugStyles) {\n            this.debugStyles.revert();\n            this.$debug = null;\n        }\n        return this;\n    }\n    debug() {\n        this.removeDebug();\n        const container = this.container;\n        const isHori = this.horizontal;\n        const $existingDebug = container.element.querySelector(\":scope > .animejs-onscroll-debug\");\n        const $debug = doc.createElement(\"div\");\n        const $thresholds = doc.createElement(\"div\");\n        const $triggers = doc.createElement(\"div\");\n        const color = debugColors[this.index % debugColors.length];\n        const useWin = container.useWin;\n        const containerWidth = useWin ? container.winWidth : container.width;\n        const containerHeight = useWin ? container.winHeight : container.height;\n        const scrollWidth = container.scrollWidth;\n        const scrollHeight = container.scrollHeight;\n        const size = this.container.width > 360 ? 320 : 260;\n        const offLeft = isHori ? 0 : 10;\n        const offTop = isHori ? 10 : 0;\n        const half = isHori ? 24 : size / 2;\n        const labelHeight = isHori ? half : 15;\n        const labelWidth = isHori ? 60 : half;\n        const labelSize = isHori ? labelWidth : labelHeight;\n        const repeat = isHori ? \"repeat-x\" : \"repeat-y\";\n        /**\n     * @param {Number} v\n     * @return {String}\n     */ const gradientOffset = (v)=>isHori ? \"0px \" + v + \"px\" : v + \"px\" + \" 2px\";\n        /**\n     * @param {String} c\n     * @return {String}\n     */ const lineCSS = (c)=>\"linear-gradient(\".concat(isHori ? 90 : 0, \"deg, \").concat(c, \" 2px, transparent 1px)\");\n        /**\n     * @param {String} p\n     * @param {Number} l\n     * @param {Number} t\n     * @param {Number} w\n     * @param {Number} h\n     * @return {String}\n     */ const baseCSS = (p, l, t, w, h)=>\"position:\".concat(p, \";left:\").concat(l, \"px;top:\").concat(t, \"px;width:\").concat(w, \"px;height:\").concat(h, \"px;\");\n        $debug.style.cssText = \"\".concat(baseCSS(\"absolute\", offLeft, offTop, isHori ? scrollWidth : size, isHori ? size : scrollHeight), \"\\n      pointer-events: none;\\n      z-index: \").concat(this.container.zIndex++, \";\\n      display: flex;\\n      flex-direction: \").concat(isHori ? \"column\" : \"row\", \";\\n      filter: drop-shadow(0px 1px 0px rgba(0,0,0,.75));\\n    \");\n        $thresholds.style.cssText = \"\".concat(baseCSS(\"sticky\", 0, 0, isHori ? containerWidth : half, isHori ? half : containerHeight));\n        if (!$existingDebug) {\n            $thresholds.style.cssText += \"background:\\n        \".concat(lineCSS(\"#FFFF\")).concat(gradientOffset(half - 10), \" / \").concat(isHori ? \"100px 100px\" : \"100px 100px\", \" \").concat(repeat, \",\\n        \").concat(lineCSS(\"#FFF8\")).concat(gradientOffset(half - 10), \" / \").concat(isHori ? \"10px 10px\" : \"10px 10px\", \" \").concat(repeat, \";\\n      \");\n        }\n        $triggers.style.cssText = \"\".concat(baseCSS(\"relative\", 0, 0, isHori ? scrollWidth : half, isHori ? half : scrollHeight));\n        if (!$existingDebug) {\n            $triggers.style.cssText += \"background:\\n        \".concat(lineCSS(\"#FFFF\")).concat(gradientOffset(0), \" / \").concat(isHori ? \"100px 10px\" : \"10px 100px\", \" \").concat(repeat, \",\\n        \").concat(lineCSS(\"#FFF8\")).concat(gradientOffset(0), \" / \").concat(isHori ? \"10px 0px\" : \"0px 10px\", \" \").concat(repeat, \";\\n      \");\n        }\n        const labels = [\n            \" enter: \",\n            \" leave: \"\n        ];\n        this.coords.forEach((v, i)=>{\n            const isView = i > 1;\n            const value = (isView ? 0 : this.offset) + v;\n            const isTail = i % 2;\n            const isFirst = value < labelSize;\n            const isOver = value > (isView ? isHori ? containerWidth : containerHeight : isHori ? scrollWidth : scrollHeight) - labelSize;\n            const isFlip = (isView ? isTail && !isFirst : !isTail && !isFirst) || isOver;\n            const $label = doc.createElement(\"div\");\n            const $text = doc.createElement(\"div\");\n            const dirProp = isHori ? isFlip ? \"right\" : \"left\" : isFlip ? \"bottom\" : \"top\";\n            const flipOffset = isFlip ? (isHori ? labelWidth : labelHeight) + (!isView ? isHori ? -1 : -2 : isHori ? -1 : isOver ? 0 : -2) : !isView ? isHori ? 1 : 0 : isHori ? 1 : 0;\n            // $text.innerHTML = `${!isView ? '' : labels[isTail] + ' '}${this.id}: ${this.thresholds[i]} ${isView ? '' : labels[isTail]}`;\n            $text.innerHTML = \"\".concat(this.id).concat(labels[isTail]).concat(this.thresholds[i]);\n            $label.style.cssText = \"\".concat(baseCSS(\"absolute\", 0, 0, labelWidth, labelHeight), \"\\n        display: flex;\\n        flex-direction: \").concat(isHori ? \"column\" : \"row\", \";\\n        justify-content: flex-\").concat(isView ? \"start\" : \"end\", \";\\n        align-items: flex-\").concat(isFlip ? \"end\" : \"start\", \";\\n        border-\").concat(dirProp, \": 2px \").concat(isTail ? \"solid\" : \"solid\", \" \").concat(color, \";\\n      \");\n            $text.style.cssText = \"\\n        overflow: hidden;\\n        max-width: \".concat(size / 2 - 10, \"px;\\n        height: \").concat(labelHeight, \";\\n        margin-\").concat(isHori ? isFlip ? \"right\" : \"left\" : isFlip ? \"bottom\" : \"top\", \": -2px;\\n        padding: 1px;\\n        font-family: ui-monospace, monospace;\\n        font-size: 10px;\\n        letter-spacing: -.025em;\\n        line-height: 9px;\\n        font-weight: 600;\\n        text-align: \").concat(isHori && isFlip || !isHori && !isView ? \"right\" : \"left\", \";\\n        white-space: pre;\\n        text-overflow: ellipsis;\\n        color: \").concat(isTail ? color : \"rgba(0,0,0,.75)\", \";\\n        background-color: \").concat(isTail ? \"rgba(0,0,0,.65)\" : color, \";\\n        border: 2px solid \").concat(isTail ? color : \"transparent\", \";\\n        border-\").concat(isHori ? isFlip ? \"top-left\" : \"top-right\" : isFlip ? \"top-left\" : \"bottom-left\", \"-radius: 5px;\\n        border-\").concat(isHori ? isFlip ? \"bottom-left\" : \"bottom-right\" : isFlip ? \"top-right\" : \"bottom-right\", \"-radius: 5px;\\n      \");\n            $label.appendChild($text);\n            let position = value - flipOffset + (isHori ? 1 : 0);\n            $label.style[isHori ? \"left\" : \"top\"] = \"\".concat(position, \"px\");\n            // $label.style[isHori ? 'left' : 'top'] = value - flipOffset + (!isFlip && isFirst && !isView ? 1 : isFlip ? 0 : -2) + 'px';\n            (isView ? $thresholds : $triggers).appendChild($label);\n        });\n        $debug.appendChild($thresholds);\n        $debug.appendChild($triggers);\n        container.element.appendChild($debug);\n        if (!$existingDebug) $debug.classList.add(\"animejs-onscroll-debug\");\n        this.$debug = $debug;\n        const containerPosition = getTargetValue(container.element, \"position\");\n        if (containerPosition === \"static\") {\n            this.debugStyles = setTargetValues(container.element, {\n                position: \"relative \"\n            });\n        }\n    }\n    updateBounds() {\n        if (this._debug) {\n            this.removeDebug();\n        }\n        let stickys;\n        const $target = this.target;\n        const container = this.container;\n        const isHori = this.horizontal;\n        const linked = this.linked;\n        let linkedTime;\n        let $el = $target;\n        let offsetX = 0;\n        let offsetY = 0;\n        /** @type {Element} */ let $offsetParent = $el;\n        if (linked) {\n            linkedTime = linked.currentTime;\n            linked.seek(0, true);\n        }\n        const isContainerStatic = getTargetValue(container.element, \"position\") === \"static\" ? setTargetValues(container.element, {\n            position: \"relative \"\n        }) : false;\n        while($el && $el !== container.element && $el !== doc.body){\n            const isSticky = getTargetValue($el, \"position\") === \"sticky\" ? setTargetValues($el, {\n                position: \"static\"\n            }) : false;\n            if ($el === $offsetParent) {\n                offsetX += $el.offsetLeft || 0;\n                offsetY += $el.offsetTop || 0;\n                $offsetParent = $el.offsetParent;\n            }\n            $el = /** @type {HTMLElement} */ $el.parentElement;\n            if (isSticky) {\n                if (!stickys) stickys = [];\n                stickys.push(isSticky);\n            }\n        }\n        if (isContainerStatic) isContainerStatic.revert();\n        const offset = isHori ? offsetX : offsetY;\n        const targetSize = isHori ? $target.offsetWidth : $target.offsetHeight;\n        const containerSize = isHori ? container.width : container.height;\n        const scrollSize = isHori ? container.scrollWidth : container.scrollHeight;\n        const maxScroll = scrollSize - containerSize;\n        const enter = this.enter;\n        const leave = this.leave;\n        /** @type {ScrollThresholdValue} */ let enterTarget = \"start\";\n        /** @type {ScrollThresholdValue} */ let leaveTarget = \"end\";\n        /** @type {ScrollThresholdValue} */ let enterContainer = \"end\";\n        /** @type {ScrollThresholdValue} */ let leaveContainer = \"start\";\n        if (isStr(enter)) {\n            const splitted = /** @type {String} */ enter.split(\" \");\n            enterContainer = splitted[0];\n            enterTarget = splitted.length > 1 ? splitted[1] : enterTarget;\n        } else if (isObj(enter)) {\n            const e = /** @type {ScrollThresholdParam} */ enter;\n            if (!isUnd(e.container)) enterContainer = e.container;\n            if (!isUnd(e.target)) enterTarget = e.target;\n        } else if (isNum(enter)) {\n            enterContainer = /** @type {Number} */ enter;\n        }\n        if (isStr(leave)) {\n            const splitted = /** @type {String} */ leave.split(\" \");\n            leaveContainer = splitted[0];\n            leaveTarget = splitted.length > 1 ? splitted[1] : leaveTarget;\n        } else if (isObj(leave)) {\n            const t = /** @type {ScrollThresholdParam} */ leave;\n            if (!isUnd(t.container)) leaveContainer = t.container;\n            if (!isUnd(t.target)) leaveTarget = t.target;\n        } else if (isNum(leave)) {\n            leaveContainer = /** @type {Number} */ leave;\n        }\n        const parsedEnterTarget = parseBoundValue($target, enterTarget, targetSize);\n        const parsedLeaveTarget = parseBoundValue($target, leaveTarget, targetSize);\n        const under = parsedEnterTarget + offset - containerSize;\n        const over = parsedLeaveTarget + offset - maxScroll;\n        const parsedEnterContainer = parseBoundValue($target, enterContainer, containerSize, under, over);\n        const parsedLeaveContainer = parseBoundValue($target, leaveContainer, containerSize, under, over);\n        const offsetStart = parsedEnterTarget + offset - parsedEnterContainer;\n        const offsetEnd = parsedLeaveTarget + offset - parsedLeaveContainer;\n        const scrollDelta = offsetEnd - offsetStart;\n        this.offsets[0] = offsetX;\n        this.offsets[1] = offsetY;\n        this.offset = offset;\n        this.offsetStart = offsetStart;\n        this.offsetEnd = offsetEnd;\n        this.distance = scrollDelta <= 0 ? 0 : scrollDelta;\n        this.thresholds = [\n            enterTarget,\n            leaveTarget,\n            enterContainer,\n            leaveContainer\n        ];\n        this.coords = [\n            parsedEnterTarget,\n            parsedLeaveTarget,\n            parsedEnterContainer,\n            parsedLeaveContainer\n        ];\n        if (stickys) {\n            stickys.forEach((sticky)=>sticky.revert());\n        }\n        if (linked) {\n            linked.seek(linkedTime, true);\n        }\n        if (this._debug) {\n            this.debug();\n        }\n    }\n    handleScroll() {\n        const linked = this.linked;\n        const sync = this.sync;\n        const syncEase = this.syncEase;\n        const syncSmooth = this.syncSmooth;\n        const shouldSeek = linked && (syncEase || syncSmooth);\n        const isHori = this.horizontal;\n        const container = this.container;\n        const scroll = this.scroll;\n        const isBefore = scroll <= this.offsetStart;\n        const isAfter = scroll >= this.offsetEnd;\n        const isInView = !isBefore && !isAfter;\n        const isOnTheEdge = scroll === this.offsetStart || scroll === this.offsetEnd;\n        const forceEnter = !this.hasEntered && isOnTheEdge;\n        const $debug = this._debug && this.$debug;\n        let hasUpdated = false;\n        let syncCompleted = false;\n        let p = this.progress;\n        if (isBefore && this.began) {\n            this.began = false;\n        }\n        if (p > 0 && !this.began) {\n            this.began = true;\n        }\n        if (shouldSeek) {\n            const lp = linked.progress;\n            if (syncSmooth && isNum(syncSmooth)) {\n                if (/** @type {Number} */ syncSmooth < 1) {\n                    const step = 0.0001;\n                    const snap = lp < p && p === 1 ? step : lp > p && !p ? -1e-4 : 0;\n                    p = round(lerp(lp, p, interpolate(.01, .2, /** @type {Number} */ syncSmooth), false) + snap, 6);\n                }\n            } else if (syncEase) {\n                p = syncEase(p);\n            }\n            hasUpdated = p !== this.prevProgress;\n            syncCompleted = lp === 1;\n            if (hasUpdated && !syncCompleted && syncSmooth && lp) {\n                container.wakeTicker.restart();\n            }\n        }\n        if ($debug) {\n            const sticky = isHori ? container.scrollY : container.scrollX;\n            $debug.style[isHori ? \"top\" : \"left\"] = sticky + 10 + \"px\";\n        }\n        // Trigger enter callbacks if already in view or when entering the view\n        if (isInView && !this.isInView || forceEnter && !this.forceEnter && !this.hasEntered) {\n            if (isInView) this.isInView = true;\n            if (!this.forceEnter || !this.hasEntered) {\n                if ($debug && isInView) $debug.style.zIndex = \"\".concat(this.container.zIndex++);\n                this.onSyncEnter(this);\n                this.onEnter(this);\n                if (this.backward) {\n                    this.onSyncEnterBackward(this);\n                    this.onEnterBackward(this);\n                } else {\n                    this.onSyncEnterForward(this);\n                    this.onEnterForward(this);\n                }\n                this.hasEntered = true;\n                if (forceEnter) this.forceEnter = true;\n            } else if (isInView) {\n                this.forceEnter = false;\n            }\n        }\n        if (isInView || !isInView && this.isInView) {\n            hasUpdated = true;\n        }\n        if (hasUpdated) {\n            if (shouldSeek) linked.seek(linked.duration * p);\n            this.onUpdate(this);\n        }\n        if (!isInView && this.isInView) {\n            this.isInView = false;\n            this.onSyncLeave(this);\n            this.onLeave(this);\n            if (this.backward) {\n                this.onSyncLeaveBackward(this);\n                this.onLeaveBackward(this);\n            } else {\n                this.onSyncLeaveForward(this);\n                this.onLeaveForward(this);\n            }\n            if (sync && !syncSmooth) {\n                syncCompleted = true;\n            }\n        }\n        if (p >= 1 && this.began && !this.completed && (sync && syncCompleted || !sync)) {\n            if (sync) {\n                this.onSyncComplete(this);\n            }\n            this.completed = true;\n            if (!this.repeat && !linked || !this.repeat && linked && linked.completed) {\n                this.revert();\n            }\n        }\n        if (p < 1 && this.completed) {\n            this.completed = false;\n        }\n        this.prevProgress = p;\n    }\n    revert() {\n        if (this.reverted) return;\n        const container = this.container;\n        removeChild(container, this);\n        if (!container._head) {\n            container.revert();\n        }\n        if (this._debug) {\n            this.removeDebug();\n        }\n        this.reverted = true;\n        return this;\n    }\n    /**\n   * @param {ScrollObserverParams} parameters\n   */ constructor(parameters = {}){\n        if (globals.scope) globals.scope.revertibles.push(this);\n        const syncMode = setValue(parameters.sync, \"play pause\");\n        const ease = syncMode ? parseEasings(/** @type {EasingParam} */ syncMode) : null;\n        const isLinear = syncMode && (syncMode === \"linear\" || syncMode === none);\n        const isEase = syncMode && !(ease === none && !isLinear);\n        const isSmooth = syncMode && (isNum(syncMode) || syncMode === true || isLinear);\n        const isMethods = syncMode && isStr(syncMode) && !isEase && !isSmooth;\n        const syncMethods = isMethods ? /** @type {String} */ syncMode.split(\" \").map((/** @type {String} */ m)=>()=>{\n                const linked = this.linked;\n                return linked && linked[m] ? linked[m]() : null;\n            }) : null;\n        const biDirSync = isMethods && syncMethods.length > 2;\n        /** @type {Number} */ this.index = scrollerIndex++;\n        /** @type {String|Number} */ this.id = !isUnd(parameters.id) ? parameters.id : this.index;\n        /** @type {ScrollContainer} */ this.container = registerAndGetScrollContainer(parameters.container);\n        /** @type {HTMLElement} */ this.target = null;\n        /** @type {Tickable|WAAPIAnimation} */ this.linked = null;\n        /** @type {Boolean} */ this.repeat = null;\n        /** @type {Boolean} */ this.horizontal = null;\n        /** @type {ScrollThresholdParam|ScrollThresholdValue|ScrollThresholdCallback} */ this.enter = null;\n        /** @type {ScrollThresholdParam|ScrollThresholdValue|ScrollThresholdCallback} */ this.leave = null;\n        /** @type {Boolean} */ this.sync = isEase || isSmooth || !!syncMethods;\n        /** @type {EasingFunction} */ this.syncEase = isEase ? ease : null;\n        /** @type {Number} */ this.syncSmooth = isSmooth ? syncMode === true || isLinear ? 1 : /** @type {Number} */ syncMode : null;\n        /** @type {Callback<ScrollObserver>} */ this.onSyncEnter = syncMethods && !biDirSync && syncMethods[0] ? syncMethods[0] : noop;\n        /** @type {Callback<ScrollObserver>} */ this.onSyncLeave = syncMethods && !biDirSync && syncMethods[1] ? syncMethods[1] : noop;\n        /** @type {Callback<ScrollObserver>} */ this.onSyncEnterForward = syncMethods && biDirSync && syncMethods[0] ? syncMethods[0] : noop;\n        /** @type {Callback<ScrollObserver>} */ this.onSyncLeaveForward = syncMethods && biDirSync && syncMethods[1] ? syncMethods[1] : noop;\n        /** @type {Callback<ScrollObserver>} */ this.onSyncEnterBackward = syncMethods && biDirSync && syncMethods[2] ? syncMethods[2] : noop;\n        /** @type {Callback<ScrollObserver>} */ this.onSyncLeaveBackward = syncMethods && biDirSync && syncMethods[3] ? syncMethods[3] : noop;\n        /** @type {Callback<ScrollObserver>} */ this.onEnter = parameters.onEnter || noop;\n        /** @type {Callback<ScrollObserver>} */ this.onLeave = parameters.onLeave || noop;\n        /** @type {Callback<ScrollObserver>} */ this.onEnterForward = parameters.onEnterForward || noop;\n        /** @type {Callback<ScrollObserver>} */ this.onLeaveForward = parameters.onLeaveForward || noop;\n        /** @type {Callback<ScrollObserver>} */ this.onEnterBackward = parameters.onEnterBackward || noop;\n        /** @type {Callback<ScrollObserver>} */ this.onLeaveBackward = parameters.onLeaveBackward || noop;\n        /** @type {Callback<ScrollObserver>} */ this.onUpdate = parameters.onUpdate || noop;\n        /** @type {Callback<ScrollObserver>} */ this.onSyncComplete = parameters.onSyncComplete || noop;\n        /** @type {Boolean} */ this.reverted = false;\n        /** @type {Boolean} */ this.completed = false;\n        /** @type {Boolean} */ this.began = false;\n        /** @type {Boolean} */ this.isInView = false;\n        /** @type {Boolean} */ this.forceEnter = false;\n        /** @type {Boolean} */ this.hasEntered = false;\n        /** @type {Array.<Number>} */ this.offsets = [];\n        /** @type {Number} */ this.offset = 0;\n        /** @type {Number} */ this.offsetStart = 0;\n        /** @type {Number} */ this.offsetEnd = 0;\n        /** @type {Number} */ this.distance = 0;\n        /** @type {Number} */ this.prevProgress = 0;\n        /** @type {Array} */ this.thresholds = [\n            \"start\",\n            \"end\",\n            \"end\",\n            \"start\"\n        ];\n        /** @type {[Number, Number, Number, Number]} */ this.coords = [\n            0,\n            0,\n            0,\n            0\n        ];\n        /** @type {JSAnimation} */ this.debugStyles = null;\n        /** @type {HTMLElement} */ this.$debug = null;\n        /** @type {ScrollObserverParams} */ this._params = parameters;\n        /** @type {Boolean} */ this._debug = setValue(parameters.debug, false);\n        /** @type {ScrollObserver} */ this._next = null;\n        /** @type {ScrollObserver} */ this._prev = null;\n        addChild(this.container, this);\n        // Wait for the next frame to add to the container in order to handle calls to link()\n        sync(()=>{\n            if (this.reverted) return;\n            if (!this.target) {\n                const target = /** @type {HTMLElement} */ parseTargets(parameters.target)[0];\n                this.target = target || doc.body;\n                this.refresh();\n            }\n            if (this._debug) this.debug();\n        });\n    }\n}\n/**\n * @param {ScrollObserverParams} [parameters={}]\n * @return {ScrollObserver}\n */ const onScroll = function() {\n    let parameters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    return new ScrollObserver(parameters);\n};\n/**\n * @typedef  {Object} StaggerParameters\n * @property {Number|String} [start]\n * @property {Number|'first'|'center'|'last'} [from]\n * @property {Boolean} [reversed]\n * @property {Array.<Number>} [grid]\n * @property {('x'|'y')} [axis]\n * @property {EasingParam} [ease]\n * @property {TweenModifier} [modifier]\n */ /**\n * @callback StaggerFunction\n * @param {Target} [target]\n * @param {Number} [index]\n * @param {Number} [length]\n * @param {Timeline} [tl]\n * @return {Number|String}\n */ /**\n * @param  {Number|String|[Number|String,Number|String]} val\n * @param  {StaggerParameters} params\n * @return {StaggerFunction}\n */ const stagger = function(val) {\n    let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    let values = [];\n    let maxValue = 0;\n    const from = params.from;\n    const reversed = params.reversed;\n    const ease = params.ease;\n    const hasEasing = !isUnd(ease);\n    const hasSpring = hasEasing && !isUnd(/** @type {Spring} */ ease.ease);\n    const staggerEase = hasSpring ? /** @type {Spring} */ ease.ease : hasEasing ? parseEasings(ease) : null;\n    const grid = params.grid;\n    const axis = params.axis;\n    const fromFirst = isUnd(from) || from === 0 || from === \"first\";\n    const fromCenter = from === \"center\";\n    const fromLast = from === \"last\";\n    const isRange = isArr(val);\n    const val1 = isRange ? parseNumber(val[0]) : parseNumber(val);\n    const val2 = isRange ? parseNumber(val[1]) : 0;\n    const unitMatch = unitsExecRgx.exec((isRange ? val[1] : val) + emptyString);\n    const start = params.start || 0 + (isRange ? val1 : 0);\n    let fromIndex = fromFirst ? 0 : isNum(from) ? from : 0;\n    return (_, i, t, tl)=>{\n        if (fromCenter) fromIndex = (t - 1) / 2;\n        if (fromLast) fromIndex = t - 1;\n        if (!values.length) {\n            for(let index = 0; index < t; index++){\n                if (!grid) {\n                    values.push(abs(fromIndex - index));\n                } else {\n                    const fromX = !fromCenter ? fromIndex % grid[0] : (grid[0] - 1) / 2;\n                    const fromY = !fromCenter ? floor(fromIndex / grid[0]) : (grid[1] - 1) / 2;\n                    const toX = index % grid[0];\n                    const toY = floor(index / grid[0]);\n                    const distanceX = fromX - toX;\n                    const distanceY = fromY - toY;\n                    let value = sqrt(distanceX * distanceX + distanceY * distanceY);\n                    if (axis === \"x\") value = -distanceX;\n                    if (axis === \"y\") value = -distanceY;\n                    values.push(value);\n                }\n                maxValue = max(...values);\n            }\n            if (staggerEase) values = values.map((val)=>staggerEase(val / maxValue) * maxValue);\n            if (reversed) values = values.map((val)=>axis ? val < 0 ? val * -1 : -val : abs(maxValue - val));\n        }\n        const spacing = isRange ? (val2 - val1) / maxValue : val1;\n        const offset = tl ? parseTimelinePosition(tl, isUnd(params.start) ? tl.iterationDuration : start) : /** @type {Number} */ start;\n        /** @type {String|Number} */ let output = offset + (spacing * round(values[i], 2) || 0);\n        if (params.modifier) output = params.modifier(output);\n        if (unitMatch) output = \"\".concat(output).concat(unitMatch[2]);\n        return output;\n    };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/animejs/lib/anime.esm.js\n"));

/***/ })

});